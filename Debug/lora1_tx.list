
lora1_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009df0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08009f30  08009f30  00019f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1e8  0800a1e8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1e8  0800a1e8  0001a1e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1f0  0800a1f0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1f0  0800a1f0  0001a1f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1f4  0800a1f4  0001a1f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a1f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b8  20000074  0800a26c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000062c  0800a26c  0002062c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021b83  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000442a  00000000  00000000  00041c21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001890  00000000  00000000  00046050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016f0  00000000  00000000  000478e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fe3b  00000000  00000000  00048fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001935e  00000000  00000000  00068e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b77be  00000000  00000000  00082169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00139927  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006700  00000000  00000000  0013997c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000074 	.word	0x20000074
 800015c:	00000000 	.word	0x00000000
 8000160:	08009f18 	.word	0x08009f18

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000078 	.word	0x20000078
 800017c:	08009f18 	.word	0x08009f18

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96c 	b.w	8000510 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	468e      	mov	lr, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	f040 8082 	bne.w	8000366 <__udivmoddi4+0x116>
 8000262:	428a      	cmp	r2, r1
 8000264:	4617      	mov	r7, r2
 8000266:	d946      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000268:	fab2 f282 	clz	r2, r2
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x32>
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa05 f302 	lsl.w	r3, r5, r2
 8000276:	fa20 f101 	lsr.w	r1, r0, r1
 800027a:	4097      	lsls	r7, r2
 800027c:	ea41 0e03 	orr.w	lr, r1, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000286:	0c23      	lsrs	r3, r4, #16
 8000288:	fbbe fcf8 	udiv	ip, lr, r8
 800028c:	b2b9      	uxth	r1, r7
 800028e:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000292:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000296:	fb0c f001 	mul.w	r0, ip, r1
 800029a:	4298      	cmp	r0, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f10c 35ff 	add.w	r5, ip, #4294967295
 80002a4:	f080 8116 	bcs.w	80004d4 <__udivmoddi4+0x284>
 80002a8:	4298      	cmp	r0, r3
 80002aa:	f240 8113 	bls.w	80004d4 <__udivmoddi4+0x284>
 80002ae:	f1ac 0c02 	sub.w	ip, ip, #2
 80002b2:	443b      	add	r3, r7
 80002b4:	1a1b      	subs	r3, r3, r0
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f101 	mul.w	r1, r0, r1
 80002c8:	42a1      	cmp	r1, r4
 80002ca:	d909      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002cc:	193c      	adds	r4, r7, r4
 80002ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d2:	f080 8101 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002d6:	42a1      	cmp	r1, r4
 80002d8:	f240 80fe 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002dc:	3802      	subs	r0, #2
 80002de:	443c      	add	r4, r7
 80002e0:	1a64      	subs	r4, r4, r1
 80002e2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40d4      	lsrs	r4, r2
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d14f      	bne.n	80003a2 <__udivmoddi4+0x152>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c25      	lsrs	r5, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	42ab      	cmp	r3, r5
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	197d      	adds	r5, r7, r5
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	42ab      	cmp	r3, r5
 800032e:	f200 80e7 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000332:	4684      	mov	ip, r0
 8000334:	1aed      	subs	r5, r5, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb5 f0fe 	udiv	r0, r5, lr
 800033c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000340:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d7 	bhi.w	8000508 <__udivmoddi4+0x2b8>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7c0      	b.n	80002e8 <__udivmoddi4+0x98>
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80af 	beq.w	80004ce <__udivmoddi4+0x27e>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d14b      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0x13e>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80b7 	bhi.w	80004fc <__udivmoddi4+0x2ac>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0303 	sbc.w	r3, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	469e      	mov	lr, r3
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0aa      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800039c:	e9c6 4e00 	strd	r4, lr, [r6]
 80003a0:	e7a7      	b.n	80002f2 <__udivmoddi4+0xa2>
 80003a2:	f1c2 0c20 	rsb	ip, r2, #32
 80003a6:	fa01 f302 	lsl.w	r3, r1, r2
 80003aa:	4097      	lsls	r7, r2
 80003ac:	fa20 f00c 	lsr.w	r0, r0, ip
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	fa21 fc0c 	lsr.w	ip, r1, ip
 80003b8:	4318      	orrs	r0, r3
 80003ba:	fbbc f1fe 	udiv	r1, ip, lr
 80003be:	0c05      	lsrs	r5, r0, #16
 80003c0:	fb0e cc11 	mls	ip, lr, r1, ip
 80003c4:	fa1f f887 	uxth.w	r8, r7
 80003c8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80003cc:	fb01 f308 	mul.w	r3, r1, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	197d      	adds	r5, r7, r5
 80003da:	f101 3cff 	add.w	ip, r1, #4294967295
 80003de:	f080 808b 	bcs.w	80004f8 <__udivmoddi4+0x2a8>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	f240 8088 	bls.w	80004f8 <__udivmoddi4+0x2a8>
 80003e8:	3902      	subs	r1, #2
 80003ea:	443d      	add	r5, r7
 80003ec:	1aeb      	subs	r3, r5, r3
 80003ee:	b285      	uxth	r5, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	42ab      	cmp	r3, r5
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	197d      	adds	r5, r7, r5
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d271      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 800040c:	42ab      	cmp	r3, r5
 800040e:	d96f      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000410:	3802      	subs	r0, #2
 8000412:	443d      	add	r5, r7
 8000414:	1aeb      	subs	r3, r5, r3
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c1 0c20 	rsb	ip, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f70c 	lsr.w	r7, r2, ip
 8000426:	431f      	orrs	r7, r3
 8000428:	fa20 f40c 	lsr.w	r4, r0, ip
 800042c:	fa05 f301 	lsl.w	r3, r5, r1
 8000430:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000434:	fa25 f50c 	lsr.w	r5, r5, ip
 8000438:	431c      	orrs	r4, r3
 800043a:	0c23      	lsrs	r3, r4, #16
 800043c:	fbb5 f9fe 	udiv	r9, r5, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 5519 	mls	r5, lr, r9, r5
 8000448:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800044c:	fb09 fa08 	mul.w	sl, r9, r8
 8000450:	45aa      	cmp	sl, r5
 8000452:	fa02 f201 	lsl.w	r2, r2, r1
 8000456:	fa00 f301 	lsl.w	r3, r0, r1
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x21e>
 800045c:	197d      	adds	r5, r7, r5
 800045e:	f109 30ff 	add.w	r0, r9, #4294967295
 8000462:	d247      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 8000464:	45aa      	cmp	sl, r5
 8000466:	d945      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000468:	f1a9 0902 	sub.w	r9, r9, #2
 800046c:	443d      	add	r5, r7
 800046e:	eba5 050a 	sub.w	r5, r5, sl
 8000472:	b2a4      	uxth	r4, r4
 8000474:	fbb5 f0fe 	udiv	r0, r5, lr
 8000478:	fb0e 5510 	mls	r5, lr, r0, r5
 800047c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000480:	fb00 f808 	mul.w	r8, r0, r8
 8000484:	45a0      	cmp	r8, r4
 8000486:	d907      	bls.n	8000498 <__udivmoddi4+0x248>
 8000488:	193c      	adds	r4, r7, r4
 800048a:	f100 35ff 	add.w	r5, r0, #4294967295
 800048e:	d22d      	bcs.n	80004ec <__udivmoddi4+0x29c>
 8000490:	45a0      	cmp	r8, r4
 8000492:	d92b      	bls.n	80004ec <__udivmoddi4+0x29c>
 8000494:	3802      	subs	r0, #2
 8000496:	443c      	add	r4, r7
 8000498:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049c:	eba4 0408 	sub.w	r4, r4, r8
 80004a0:	fba0 8902 	umull	r8, r9, r0, r2
 80004a4:	454c      	cmp	r4, r9
 80004a6:	46c6      	mov	lr, r8
 80004a8:	464d      	mov	r5, r9
 80004aa:	d319      	bcc.n	80004e0 <__udivmoddi4+0x290>
 80004ac:	d016      	beq.n	80004dc <__udivmoddi4+0x28c>
 80004ae:	b15e      	cbz	r6, 80004c8 <__udivmoddi4+0x278>
 80004b0:	ebb3 020e 	subs.w	r2, r3, lr
 80004b4:	eb64 0405 	sbc.w	r4, r4, r5
 80004b8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004bc:	40ca      	lsrs	r2, r1
 80004be:	ea4c 0202 	orr.w	r2, ip, r2
 80004c2:	40cc      	lsrs	r4, r1
 80004c4:	e9c6 2400 	strd	r2, r4, [r6]
 80004c8:	2100      	movs	r1, #0
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	4631      	mov	r1, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e70e      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004d4:	46ac      	mov	ip, r5
 80004d6:	e6ed      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d8:	4618      	mov	r0, r3
 80004da:	e701      	b.n	80002e0 <__udivmoddi4+0x90>
 80004dc:	4543      	cmp	r3, r8
 80004de:	d2e6      	bcs.n	80004ae <__udivmoddi4+0x25e>
 80004e0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e4:	eb69 0507 	sbc.w	r5, r9, r7
 80004e8:	3801      	subs	r0, #1
 80004ea:	e7e0      	b.n	80004ae <__udivmoddi4+0x25e>
 80004ec:	4628      	mov	r0, r5
 80004ee:	e7d3      	b.n	8000498 <__udivmoddi4+0x248>
 80004f0:	4660      	mov	r0, ip
 80004f2:	e78f      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f4:	4681      	mov	r9, r0
 80004f6:	e7ba      	b.n	800046e <__udivmoddi4+0x21e>
 80004f8:	4661      	mov	r1, ip
 80004fa:	e777      	b.n	80003ec <__udivmoddi4+0x19c>
 80004fc:	4608      	mov	r0, r1
 80004fe:	e74b      	b.n	8000398 <__udivmoddi4+0x148>
 8000500:	f1ac 0c02 	sub.w	ip, ip, #2
 8000504:	443d      	add	r5, r7
 8000506:	e715      	b.n	8000334 <__udivmoddi4+0xe4>
 8000508:	3802      	subs	r0, #2
 800050a:	443c      	add	r4, r7
 800050c:	e726      	b.n	800035c <__udivmoddi4+0x10c>
 800050e:	bf00      	nop

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800051c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000520:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000522:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4313      	orrs	r3, r2
 800052a:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800052c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000530:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4013      	ands	r3, r2
 8000536:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000538:	68fb      	ldr	r3, [r7, #12]
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr

08000544 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000548:	2004      	movs	r0, #4
 800054a:	f7ff ffe3 	bl	8000514 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800054e:	2001      	movs	r0, #1
 8000550:	f7ff ffe0 	bl	8000514 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000554:	2200      	movs	r2, #0
 8000556:	2100      	movs	r1, #0
 8000558:	200b      	movs	r0, #11
 800055a:	f000 ff0a 	bl	8001372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800055e:	200b      	movs	r0, #11
 8000560:	f000 ff21 	bl	80013a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000564:	2200      	movs	r2, #0
 8000566:	2100      	movs	r1, #0
 8000568:	200c      	movs	r0, #12
 800056a:	f000 ff02 	bl	8001372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800056e:	200c      	movs	r0, #12
 8000570:	f000 ff19 	bl	80013a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000574:	2200      	movs	r2, #0
 8000576:	2100      	movs	r1, #0
 8000578:	200d      	movs	r0, #13
 800057a:	f000 fefa 	bl	8001372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800057e:	200d      	movs	r0, #13
 8000580:	f000 ff11 	bl	80013a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000584:	2200      	movs	r2, #0
 8000586:	2100      	movs	r1, #0
 8000588:	200e      	movs	r0, #14
 800058a:	f000 fef2 	bl	8001372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800058e:	200e      	movs	r0, #14
 8000590:	f000 ff09 	bl	80013a6 <HAL_NVIC_EnableIRQ>

}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}

08000598 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4313      	orrs	r3, r2
 80005ae:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4013      	ands	r3, r2
 80005ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005bc:	68fb      	ldr	r3, [r7, #12]
}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr

080005c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005cc:	2004      	movs	r0, #4
 80005ce:	f7ff ffe3 	bl	8000598 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	2002      	movs	r0, #2
 80005d4:	f7ff ffe0 	bl	8000598 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d8:	2001      	movs	r0, #1
 80005da:	f7ff ffdd 	bl	8000598 <LL_AHB2_GRP1_EnableClock>

}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80005e2:	b480      	push	{r7}
 80005e4:	b083      	sub	sp, #12
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80005ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005f2:	f023 0218 	bic.w	r2, r3, #24
 80005f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4313      	orrs	r3, r2
 80005fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <DioIrqHndlr>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void DioIrqHndlr(RadioIrqMasks_t radioIrq) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	80fb      	strh	r3, [r7, #6]
	switch (radioIrq) {
 8000616:	88fb      	ldrh	r3, [r7, #6]
 8000618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800061c:	d078      	beq.n	8000710 <DioIrqHndlr+0x104>
 800061e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000622:	dc7c      	bgt.n	800071e <DioIrqHndlr+0x112>
 8000624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000628:	d074      	beq.n	8000714 <DioIrqHndlr+0x108>
 800062a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800062e:	dc76      	bgt.n	800071e <DioIrqHndlr+0x112>
 8000630:	2b80      	cmp	r3, #128	; 0x80
 8000632:	d071      	beq.n	8000718 <DioIrqHndlr+0x10c>
 8000634:	2b80      	cmp	r3, #128	; 0x80
 8000636:	dc72      	bgt.n	800071e <DioIrqHndlr+0x112>
 8000638:	2b20      	cmp	r3, #32
 800063a:	dc49      	bgt.n	80006d0 <DioIrqHndlr+0xc4>
 800063c:	2b00      	cmp	r3, #0
 800063e:	db6e      	blt.n	800071e <DioIrqHndlr+0x112>
 8000640:	2b20      	cmp	r3, #32
 8000642:	d86c      	bhi.n	800071e <DioIrqHndlr+0x112>
 8000644:	a201      	add	r2, pc, #4	; (adr r2, 800064c <DioIrqHndlr+0x40>)
 8000646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064a:	bf00      	nop
 800064c:	0800071d 	.word	0x0800071d
 8000650:	080006f9 	.word	0x080006f9
 8000654:	080006d5 	.word	0x080006d5
 8000658:	0800071f 	.word	0x0800071f
 800065c:	0800071d 	.word	0x0800071d
 8000660:	0800071f 	.word	0x0800071f
 8000664:	0800071f 	.word	0x0800071f
 8000668:	0800071f 	.word	0x0800071f
 800066c:	0800071d 	.word	0x0800071d
 8000670:	0800071f 	.word	0x0800071f
 8000674:	0800071f 	.word	0x0800071f
 8000678:	0800071f 	.word	0x0800071f
 800067c:	0800071f 	.word	0x0800071f
 8000680:	0800071f 	.word	0x0800071f
 8000684:	0800071f 	.word	0x0800071f
 8000688:	0800071f 	.word	0x0800071f
 800068c:	0800071d 	.word	0x0800071d
 8000690:	0800071f 	.word	0x0800071f
 8000694:	0800071f 	.word	0x0800071f
 8000698:	0800071f 	.word	0x0800071f
 800069c:	0800071f 	.word	0x0800071f
 80006a0:	0800071f 	.word	0x0800071f
 80006a4:	0800071f 	.word	0x0800071f
 80006a8:	0800071f 	.word	0x0800071f
 80006ac:	0800071f 	.word	0x0800071f
 80006b0:	0800071f 	.word	0x0800071f
 80006b4:	0800071f 	.word	0x0800071f
 80006b8:	0800071f 	.word	0x0800071f
 80006bc:	0800071f 	.word	0x0800071f
 80006c0:	0800071f 	.word	0x0800071f
 80006c4:	0800071f 	.word	0x0800071f
 80006c8:	0800071f 	.word	0x0800071f
 80006cc:	0800071d 	.word	0x0800071d
 80006d0:	2b40      	cmp	r3, #64	; 0x40
	case IRQ_HEADER_ERROR:

		break;
	case IRQ_CRC_ERROR:

		break;
 80006d2:	e024      	b.n	800071e <DioIrqHndlr+0x112>
		SUBGRF_GetPayload(rx_buf, &p_len, PAYLOAD_LENGTH);
 80006d4:	2205      	movs	r2, #5
 80006d6:	4914      	ldr	r1, [pc, #80]	; (8000728 <DioIrqHndlr+0x11c>)
 80006d8:	4814      	ldr	r0, [pc, #80]	; (800072c <DioIrqHndlr+0x120>)
 80006da:	f007 fb8f 	bl	8007dfc <SUBGRF_GetPayload>
		myprintf("%s",rx_buf);
 80006de:	4913      	ldr	r1, [pc, #76]	; (800072c <DioIrqHndlr+0x120>)
 80006e0:	4813      	ldr	r0, [pc, #76]	; (8000730 <DioIrqHndlr+0x124>)
 80006e2:	f000 f83f 	bl	8000764 <myprintf>
		SUBGRF_SetSwitch(1, RFSWITCH_RX);
 80006e6:	2100      	movs	r1, #0
 80006e8:	2001      	movs	r0, #1
 80006ea:	f008 fab9 	bl	8008c60 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 80006ee:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80006f2:	f007 fd0f 	bl	8008114 <SUBGRF_SetRxBoosted>
		break;
 80006f6:	e012      	b.n	800071e <DioIrqHndlr+0x112>
		SUBGRF_SetSwitch(1, RFSWITCH_RX); /*Set RF switch*/
 80006f8:	2100      	movs	r1, #0
 80006fa:	2001      	movs	r0, #1
 80006fc:	f008 fab0 	bl	8008c60 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 8000700:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8000704:	f007 fd06 	bl	8008114 <SUBGRF_SetRxBoosted>
		SUBGRF_SetRfFrequency(FREQ_402_MHZ);
 8000708:	480a      	ldr	r0, [pc, #40]	; (8000734 <DioIrqHndlr+0x128>)
 800070a:	f007 fed3 	bl	80084b4 <SUBGRF_SetRfFrequency>
		break;
 800070e:	e006      	b.n	800071e <DioIrqHndlr+0x112>
	case IRQ_CAD_DETECTED:

		break;
	case IRQ_RX_TX_TIMEOUT:

		break;
 8000710:	bf00      	nop
 8000712:	e004      	b.n	800071e <DioIrqHndlr+0x112>
		break;
 8000714:	bf00      	nop
 8000716:	e002      	b.n	800071e <DioIrqHndlr+0x112>
		break;
 8000718:	bf00      	nop
 800071a:	e000      	b.n	800071e <DioIrqHndlr+0x112>
		break;
 800071c:	bf00      	nop
	}
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000000 	.word	0x20000000
 800072c:	20000090 	.word	0x20000090
 8000730:	08009f30 	.word	0x08009f30
 8000734:	192cee58 	.word	0x192cee58

08000738 <buffersize>:


int buffersize(char *buff) {
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]

	while (*buff++ != '\0')
 8000744:	e002      	b.n	800074c <buffersize+0x14>
		i++;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	3301      	adds	r3, #1
 800074a:	60fb      	str	r3, [r7, #12]
	while (*buff++ != '\0')
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	1c5a      	adds	r2, r3, #1
 8000750:	607a      	str	r2, [r7, #4]
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d1f6      	bne.n	8000746 <buffersize+0xe>
	return i;
 8000758:	68fb      	ldr	r3, [r7, #12]
}
 800075a:	4618      	mov	r0, r3
 800075c:	3714      	adds	r7, #20
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr

08000764 <myprintf>:
void myprintf(const char *fmt, ...) {
 8000764:	b40f      	push	{r0, r1, r2, r3}
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
	static char temp[255];
	va_list args;
	va_start(args, fmt);
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	693a      	ldr	r2, [r7, #16]
 8000776:	21ff      	movs	r1, #255	; 0xff
 8000778:	480a      	ldr	r0, [pc, #40]	; (80007a4 <myprintf+0x40>)
 800077a:	f008 ffb3 	bl	80096e4 <vsniprintf>
	va_end(args);
	int len = buffersize(temp);
 800077e:	4809      	ldr	r0, [pc, #36]	; (80007a4 <myprintf+0x40>)
 8000780:	f7ff ffda 	bl	8000738 <buffersize>
 8000784:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)temp, len, 5000);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	b29a      	uxth	r2, r3
 800078a:	f241 3388 	movw	r3, #5000	; 0x1388
 800078e:	4905      	ldr	r1, [pc, #20]	; (80007a4 <myprintf+0x40>)
 8000790:	4805      	ldr	r0, [pc, #20]	; (80007a8 <myprintf+0x44>)
 8000792:	f003 faba 	bl	8003d0a <HAL_UART_Transmit>

}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007a0:	b004      	add	sp, #16
 80007a2:	4770      	bx	lr
 80007a4:	20000098 	.word	0x20000098
 80007a8:	20000470 	.word	0x20000470

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08e      	sub	sp, #56	; 0x38
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b2:	f000 fc9b 	bl	80010ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b6:	f000 f87b 	bl	80008b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ba:	f7ff ff05 	bl	80005c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80007be:	f7ff fec1 	bl	8000544 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80007c2:	f000 fabd 	bl	8000d40 <MX_USART1_UART_Init>
  MX_SubGHz_Phy_Init();
 80007c6:	f008 fc7c 	bl	80090c2 <MX_SubGHz_Phy_Init>
  /* USER CODE BEGIN 2 */



  PacketParams_t pkt_params;
  	pkt_params.PacketType = PACKET_TYPE_LORA;
 80007ca:	2301      	movs	r3, #1
 80007cc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  	pkt_params.Params.LoRa.PayloadLength = PAYLOAD_LENGTH;
 80007d0:	2305      	movs	r3, #5
 80007d2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  	pkt_params.Params.LoRa.PreambleLength = 8;
 80007d6:	2308      	movs	r3, #8
 80007d8:	867b      	strh	r3, [r7, #50]	; 0x32
  	pkt_params.Params.LoRa.HeaderType = LORA_PACKET_IMPLICIT;
 80007da:	2301      	movs	r3, #1
 80007dc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  	pkt_params.Params.LoRa.CrcMode = LORA_CRC_ON;
 80007e0:	2301      	movs	r3, #1
 80007e2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  	pkt_params.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  ModulationParams_t mod_params;
  	mod_params.PacketType = PACKET_TYPE_LORA;
 80007ec:	2301      	movs	r3, #1
 80007ee:	723b      	strb	r3, [r7, #8]
  	mod_params.Params.LoRa.Bandwidth = LORA_BW_031;
 80007f0:	2302      	movs	r3, #2
 80007f2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  	mod_params.Params.LoRa.SpreadingFactor = LORA_SF10;
 80007f6:	230a      	movs	r3, #10
 80007f8:	f887 3020 	strb.w	r3, [r7, #32]
  	mod_params.Params.LoRa.CodingRate = LORA_CR_4_8;
 80007fc:	2304      	movs	r3, #4
 80007fe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  	mod_params.Params.LoRa.LowDatarateOptimize = 1;
 8000802:	2301      	movs	r3, #1
 8000804:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23


	SUBGRF_Init(DioIrqHndlr);
 8000808:	4824      	ldr	r0, [pc, #144]	; (800089c <main+0xf0>)
 800080a:	f007 fa99 	bl	8007d40 <SUBGRF_Init>
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 800080e:	2100      	movs	r1, #0
 8000810:	2000      	movs	r0, #0
 8000812:	f008 f887 	bl	8008924 <SUBGRF_SetBufferBaseAddress>
	SUBGRF_SetPayload(tx_buf, CMD_LEN);
 8000816:	2105      	movs	r1, #5
 8000818:	4821      	ldr	r0, [pc, #132]	; (80008a0 <main+0xf4>)
 800081a:	f007 fadf 	bl	8007ddc <SUBGRF_SetPayload>
	SUBGRF_SetPacketParams(&pkt_params);
 800081e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000822:	4618      	mov	r0, r3
 8000824:	f007 ffe0 	bl	80087e8 <SUBGRF_SetPacketParams>
	SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00,
 8000828:	4a1e      	ldr	r2, [pc, #120]	; (80008a4 <main+0xf8>)
 800082a:	463b      	mov	r3, r7
 800082c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000830:	e883 0003 	stmia.w	r3, {r0, r1}
 8000834:	463b      	mov	r3, r7
 8000836:	4618      	mov	r0, r3
 8000838:	f007 fb15 	bl	8007e66 <SUBGRF_SetSyncWord>
					0x00 });
	SUBGRF_SetWhiteningSeed(0x01FF);
 800083c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000840:	f007 fb60 	bl	8007f04 <SUBGRF_SetWhiteningSeed>
	SUBGRF_SetRfFrequency(FREQ_402_MHZ);
 8000844:	4818      	ldr	r0, [pc, #96]	; (80008a8 <main+0xfc>)
 8000846:	f007 fe35 	bl	80084b4 <SUBGRF_SetRfFrequency>
	SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 800084a:	2301      	movs	r3, #1
 800084c:	2200      	movs	r2, #0
 800084e:	2107      	movs	r1, #7
 8000850:	2004      	movs	r0, #4
 8000852:	f007 fdb1 	bl	80083b8 <SUBGRF_SetPaConfig>
	SUBGRF_SetTxParams(RFO_HP, POWER, RAMP_TIME);
 8000856:	2205      	movs	r2, #5
 8000858:	2115      	movs	r1, #21
 800085a:	2002      	movs	r0, #2
 800085c:	f007 fe92 	bl	8008584 <SUBGRF_SetTxParams>
	SUBGRF_SetModulationParams(&mod_params);
 8000860:	f107 0308 	add.w	r3, r7, #8
 8000864:	4618      	mov	r0, r3
 8000866:	f007 fef3 	bl	8008650 <SUBGRF_SetModulationParams>
	SUBGRF_SetDioIrqParams(
 800086a:	2300      	movs	r3, #0
 800086c:	2200      	movs	r2, #0
 800086e:	f240 210f 	movw	r1, #527	; 0x20f
 8000872:	f240 200f 	movw	r0, #527	; 0x20f
 8000876:	f007 fdc1 	bl	80083fc <SUBGRF_SetDioIrqParams>
//			pkt_params.Params.Gfsk.PreambleMinDetect);
//	myprintf("HeaderType 			%d\n\r", pkt_params.Params.LoRa.HeaderType);
//	myprintf("__________________________________________________\r\n");
//	myprintf("________________Waiting OBC DATA____________\r\n");

	SUBGRF_SetSwitch(RFO_HP, RFSWITCH_RX); /*Set RF switch*/
 800087a:	2100      	movs	r1, #0
 800087c:	2002      	movs	r0, #2
 800087e:	f008 f9ef 	bl	8008c60 <SUBGRF_SetSwitch>
	SUBGRF_SetRxBoosted(0xFFFFFF);
 8000882:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8000886:	f007 fc45 	bl	8008114 <SUBGRF_SetRxBoosted>
	HAL_UART_Receive_IT(&huart1,tx_buf,sizeof(tx_buf));
 800088a:	2205      	movs	r2, #5
 800088c:	4904      	ldr	r1, [pc, #16]	; (80008a0 <main+0xf4>)
 800088e:	4807      	ldr	r0, [pc, #28]	; (80008ac <main+0x100>)
 8000890:	f003 fb7a 	bl	8003f88 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 8000894:	f008 fc1d 	bl	80090d2 <MX_SubGHz_Phy_Process>
 8000898:	e7fc      	b.n	8000894 <main+0xe8>
 800089a:	bf00      	nop
 800089c:	0800060d 	.word	0x0800060d
 80008a0:	200002dc 	.word	0x200002dc
 80008a4:	08009f34 	.word	0x08009f34
 80008a8:	192cee58 	.word	0x192cee58
 80008ac:	20000470 	.word	0x20000470

080008b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b09a      	sub	sp, #104	; 0x68
 80008b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b6:	f107 0320 	add.w	r3, r7, #32
 80008ba:	2248      	movs	r2, #72	; 0x48
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f008 fedc 	bl	800967c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]
 80008d2:	615a      	str	r2, [r3, #20]
 80008d4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008d6:	f001 f9a9 	bl	8001c2c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008da:	2000      	movs	r0, #0
 80008dc:	f7ff fe81 	bl	80005e2 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e0:	4b1e      	ldr	r3, [pc, #120]	; (800095c <SystemClock_Config+0xac>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80008e8:	4a1c      	ldr	r2, [pc, #112]	; (800095c <SystemClock_Config+0xac>)
 80008ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ee:	6013      	str	r3, [r2, #0]
 80008f0:	4b1a      	ldr	r3, [pc, #104]	; (800095c <SystemClock_Config+0xac>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80008fc:	2324      	movs	r3, #36	; 0x24
 80008fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000900:	2381      	movs	r3, #129	; 0x81
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000904:	2301      	movs	r3, #1
 8000906:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000908:	2300      	movs	r3, #0
 800090a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800090c:	23b0      	movs	r3, #176	; 0xb0
 800090e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000910:	2300      	movs	r3, #0
 8000912:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000914:	f107 0320 	add.w	r3, r7, #32
 8000918:	4618      	mov	r0, r3
 800091a:	f001 fc59 	bl	80021d0 <HAL_RCC_OscConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000924:	f000 f842 	bl	80009ac <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000928:	234f      	movs	r3, #79	; 0x4f
 800092a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2102      	movs	r1, #2
 8000944:	4618      	mov	r0, r3
 8000946:	f001 ffdd 	bl	8002904 <HAL_RCC_ClockConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000950:	f000 f82c 	bl	80009ac <Error_Handler>
  }
}
 8000954:	bf00      	nop
 8000956:	3768      	adds	r7, #104	; 0x68
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	58000400 	.word	0x58000400

08000960 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart1,"received",8);
 8000968:	2208      	movs	r2, #8
 800096a:	490d      	ldr	r1, [pc, #52]	; (80009a0 <HAL_UART_RxCpltCallback+0x40>)
 800096c:	480d      	ldr	r0, [pc, #52]	; (80009a4 <HAL_UART_RxCpltCallback+0x44>)
 800096e:	f003 fa63 	bl	8003e38 <HAL_UART_Transmit_IT>
	SUBGRF_SetSwitch(1, RFSWITCH_TX);
 8000972:	2101      	movs	r1, #1
 8000974:	2001      	movs	r0, #1
 8000976:	f008 f973 	bl	8008c60 <SUBGRF_SetSwitch>
//	strcpy(tx_buf,"Tx callback");
//	SUBGRF_SendPayload("lorada", 6, 0);
	SUBGRF_SendPayload(tx_buf, sizeof(tx_buf), 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2105      	movs	r1, #5
 800097e:	480a      	ldr	r0, [pc, #40]	; (80009a8 <HAL_UART_RxCpltCallback+0x48>)
 8000980:	f007 fa5e 	bl	8007e40 <SUBGRF_SendPayload>
	SUBGRF_SetSwitch(1, RFSWITCH_RX);
 8000984:	2100      	movs	r1, #0
 8000986:	2001      	movs	r0, #1
 8000988:	f008 f96a 	bl	8008c60 <SUBGRF_SetSwitch>
	HAL_UART_Receive_IT(&huart1,tx_buf,sizeof(tx_buf));
 800098c:	2205      	movs	r2, #5
 800098e:	4906      	ldr	r1, [pc, #24]	; (80009a8 <HAL_UART_RxCpltCallback+0x48>)
 8000990:	4804      	ldr	r0, [pc, #16]	; (80009a4 <HAL_UART_RxCpltCallback+0x44>)
 8000992:	f003 faf9 	bl	8003f88 <HAL_UART_Receive_IT>
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	08009f3c 	.word	0x08009f3c
 80009a4:	20000470 	.word	0x20000470
 80009a8:	200002dc 	.word	0x200002dc

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <Error_Handler+0x8>

080009b6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr

080009c2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <NMI_Handler+0x4>

080009c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <HardFault_Handler+0x4>

080009ce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <MemManage_Handler+0x4>

080009d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <BusFault_Handler+0x4>

080009da <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <UsageFault_Handler+0x4>

080009e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr

080009f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr

08000a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a08:	f000 fbca 	bl	80011a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <DMA1_Channel1_IRQHandler+0x10>)
 8000a16:	f000 fe47 	bl	80016a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200003b0 	.word	0x200003b0

08000a24 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <DMA1_Channel2_IRQHandler+0x10>)
 8000a2a:	f000 fe3d 	bl	80016a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000350 	.word	0x20000350

08000a38 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 3 Interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a3c:	4802      	ldr	r0, [pc, #8]	; (8000a48 <DMA1_Channel3_IRQHandler+0x10>)
 8000a3e:	f000 fe33 	bl	80016a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200002f0 	.word	0x200002f0

08000a4c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 4 Interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a50:	4802      	ldr	r0, [pc, #8]	; (8000a5c <DMA1_Channel4_IRQHandler+0x10>)
 8000a52:	f000 fe29 	bl	80016a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000410 	.word	0x20000410

08000a60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a64:	4802      	ldr	r0, [pc, #8]	; (8000a70 <USART1_IRQHandler+0x10>)
 8000a66:	f003 fae5 	bl	8004034 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000470 	.word	0x20000470

08000a74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a78:	4802      	ldr	r0, [pc, #8]	; (8000a84 <USART2_IRQHandler+0x10>)
 8000a7a:	f003 fadb 	bl	8004034 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000500 	.word	0x20000500

08000a88 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000a8c:	4802      	ldr	r0, [pc, #8]	; (8000a98 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000a8e:	f002 ff2d 	bl	80038ec <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200002e4 	.word	0x200002e4

08000a9c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aa8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000aaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ab8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4013      	ands	r3, r2
 8000abe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
}
 8000ac2:	bf00      	nop
 8000ac4:	3714      	adds	r7, #20
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_SUBGHZ_Init+0x20>)
 8000ad2:	2208      	movs	r2, #8
 8000ad4:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_SUBGHZ_Init+0x20>)
 8000ad8:	f002 fc8c 	bl	80033f4 <HAL_SUBGHZ_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000ae2:	f7ff ff63 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200002e4 	.word	0x200002e4

08000af0 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000af8:	2001      	movs	r0, #1
 8000afa:	f7ff ffcf 	bl	8000a9c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2100      	movs	r1, #0
 8000b02:	2032      	movs	r0, #50	; 0x32
 8000b04:	f000 fc35 	bl	8001372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000b08:	2032      	movs	r0, #50	; 0x32
 8000b0a:	f000 fc4c 	bl	80013a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr

08000b22 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 8000b26:	f000 f88c 	bl	8000c42 <TIMER_IF_GetTimerValue>
 8000b2a:	4603      	mov	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 f8af 	bl	8000c9e <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b50:	4a14      	ldr	r2, [pc, #80]	; (8000ba4 <_sbrk+0x5c>)
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <_sbrk+0x60>)
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <_sbrk+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d102      	bne.n	8000b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <_sbrk+0x64>)
 8000b66:	4a12      	ldr	r2, [pc, #72]	; (8000bb0 <_sbrk+0x68>)
 8000b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <_sbrk+0x64>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d207      	bcs.n	8000b88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b78:	f008 fd56 	bl	8009628 <__errno>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	220c      	movs	r2, #12
 8000b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b82:	f04f 33ff 	mov.w	r3, #4294967295
 8000b86:	e009      	b.n	8000b9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <_sbrk+0x64>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b8e:	4b07      	ldr	r3, [pc, #28]	; (8000bac <_sbrk+0x64>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	4a05      	ldr	r2, [pc, #20]	; (8000bac <_sbrk+0x64>)
 8000b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3718      	adds	r7, #24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20008000 	.word	0x20008000
 8000ba8:	00000400 	.word	0x00000400
 8000bac:	20000198 	.word	0x20000198
 8000bb0:	20000630 	.word	0x20000630

08000bb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 8000bca:	79fb      	ldrb	r3, [r7, #7]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr

08000bd6 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b085      	sub	sp, #20
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr

08000bee <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8000c08:	4b02      	ldr	r3, [pc, #8]	; (8000c14 <TIMER_IF_SetTimerContext+0x10>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	2000019c 	.word	0x2000019c

08000c18 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8000c1c:	4b02      	ldr	r3, [pc, #8]	; (8000c28 <TIMER_IF_GetTimerContext+0x10>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	2000019c 	.word	0x2000019c

08000c2c <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8000c36:	687b      	ldr	r3, [r7, #4]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr

08000c42 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8000c4c:	687b      	ldr	r3, [r7, #4]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr

08000c58 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 8000c62:	687b      	ldr	r3, [r7, #4]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr

08000c6e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b085      	sub	sp, #20
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr

08000c86 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b085      	sub	sp, #20
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 8000c92:	68fb      	ldr	r3, [r7, #12]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr

08000c9e <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr

08000cb0 <LL_AHB2_GRP1_EnableClock>:
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ccc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
}
 8000cd6:	bf00      	nop
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr

08000ce0 <LL_APB1_GRP1_EnableClock>:
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000cee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cfc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4013      	ands	r3, r2
 8000d02:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d04:	68fb      	ldr	r3, [r7, #12]
}
 8000d06:	bf00      	nop
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <LL_APB2_GRP1_EnableClock>:
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4013      	ands	r3, r2
 8000d32:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d34:	68fb      	ldr	r3, [r7, #12]
}
 8000d36:	bf00      	nop
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d44:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <MX_USART1_UART_Init+0x90>)
 8000d46:	4a23      	ldr	r2, [pc, #140]	; (8000dd4 <MX_USART1_UART_Init+0x94>)
 8000d48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <MX_USART1_UART_Init+0x90>)
 8000d4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d52:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <MX_USART1_UART_Init+0x90>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d58:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <MX_USART1_UART_Init+0x90>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <MX_USART1_UART_Init+0x90>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <MX_USART1_UART_Init+0x90>)
 8000d66:	220c      	movs	r2, #12
 8000d68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <MX_USART1_UART_Init+0x90>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d70:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <MX_USART1_UART_Init+0x90>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d76:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <MX_USART1_UART_Init+0x90>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d7c:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <MX_USART1_UART_Init+0x90>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d82:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <MX_USART1_UART_Init+0x90>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d88:	4811      	ldr	r0, [pc, #68]	; (8000dd0 <MX_USART1_UART_Init+0x90>)
 8000d8a:	f002 ff6e 	bl	8003c6a <HAL_UART_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d94:	f7ff fe0a 	bl	80009ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d98:	2100      	movs	r1, #0
 8000d9a:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <MX_USART1_UART_Init+0x90>)
 8000d9c:	f005 f879 	bl	8005e92 <HAL_UARTEx_SetTxFifoThreshold>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000da6:	f7ff fe01 	bl	80009ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000daa:	2100      	movs	r1, #0
 8000dac:	4808      	ldr	r0, [pc, #32]	; (8000dd0 <MX_USART1_UART_Init+0x90>)
 8000dae:	f005 f8ae 	bl	8005f0e <HAL_UARTEx_SetRxFifoThreshold>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000db8:	f7ff fdf8 	bl	80009ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000dbc:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <MX_USART1_UART_Init+0x90>)
 8000dbe:	f005 f830 	bl	8005e22 <HAL_UARTEx_DisableFifoMode>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000dc8:	f7ff fdf0 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000470 	.word	0x20000470
 8000dd4:	40013800 	.word	0x40013800

08000dd8 <HAL_UART_MspInit>:
  /* USER CODE END USART2_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b096      	sub	sp, #88	; 0x58
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	2238      	movs	r2, #56	; 0x38
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f008 fc3f 	bl	800967c <memset>
  if(uartHandle->Instance==USART1)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a9a      	ldr	r2, [pc, #616]	; (800106c <HAL_UART_MspInit+0x294>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	f040 8093 	bne.w	8000f30 <HAL_UART_MspInit+0x158>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e0e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000e12:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f002 f937 	bl	800308c <HAL_RCCEx_PeriphCLKConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000e24:	f7ff fdc2 	bl	80009ac <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e28:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e2c:	f7ff ff70 	bl	8000d10 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e30:	2002      	movs	r0, #2
 8000e32:	f7ff ff3d 	bl	8000cb0 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000e36:	23c0      	movs	r3, #192	; 0xc0
 8000e38:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e46:	2307      	movs	r3, #7
 8000e48:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4887      	ldr	r0, [pc, #540]	; (8001070 <HAL_UART_MspInit+0x298>)
 8000e52:	f000 fd8b 	bl	800196c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000e56:	4b87      	ldr	r3, [pc, #540]	; (8001074 <HAL_UART_MspInit+0x29c>)
 8000e58:	4a87      	ldr	r2, [pc, #540]	; (8001078 <HAL_UART_MspInit+0x2a0>)
 8000e5a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000e5c:	4b85      	ldr	r3, [pc, #532]	; (8001074 <HAL_UART_MspInit+0x29c>)
 8000e5e:	2211      	movs	r2, #17
 8000e60:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e62:	4b84      	ldr	r3, [pc, #528]	; (8001074 <HAL_UART_MspInit+0x29c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e68:	4b82      	ldr	r3, [pc, #520]	; (8001074 <HAL_UART_MspInit+0x29c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e6e:	4b81      	ldr	r3, [pc, #516]	; (8001074 <HAL_UART_MspInit+0x29c>)
 8000e70:	2280      	movs	r2, #128	; 0x80
 8000e72:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e74:	4b7f      	ldr	r3, [pc, #508]	; (8001074 <HAL_UART_MspInit+0x29c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e7a:	4b7e      	ldr	r3, [pc, #504]	; (8001074 <HAL_UART_MspInit+0x29c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000e80:	4b7c      	ldr	r3, [pc, #496]	; (8001074 <HAL_UART_MspInit+0x29c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e86:	4b7b      	ldr	r3, [pc, #492]	; (8001074 <HAL_UART_MspInit+0x29c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000e8c:	4879      	ldr	r0, [pc, #484]	; (8001074 <HAL_UART_MspInit+0x29c>)
 8000e8e:	f000 faa5 	bl	80013dc <HAL_DMA_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000e98:	f7ff fd88 	bl	80009ac <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000e9c:	2110      	movs	r1, #16
 8000e9e:	4875      	ldr	r0, [pc, #468]	; (8001074 <HAL_UART_MspInit+0x29c>)
 8000ea0:	f000 fcc8 	bl	8001834 <HAL_DMA_ConfigChannelAttributes>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_UART_MspInit+0xd6>
    {
      Error_Handler();
 8000eaa:	f7ff fd7f 	bl	80009ac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a70      	ldr	r2, [pc, #448]	; (8001074 <HAL_UART_MspInit+0x29c>)
 8000eb2:	67da      	str	r2, [r3, #124]	; 0x7c
 8000eb4:	4a6f      	ldr	r2, [pc, #444]	; (8001074 <HAL_UART_MspInit+0x29c>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000eba:	4b70      	ldr	r3, [pc, #448]	; (800107c <HAL_UART_MspInit+0x2a4>)
 8000ebc:	4a70      	ldr	r2, [pc, #448]	; (8001080 <HAL_UART_MspInit+0x2a8>)
 8000ebe:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000ec0:	4b6e      	ldr	r3, [pc, #440]	; (800107c <HAL_UART_MspInit+0x2a4>)
 8000ec2:	2212      	movs	r2, #18
 8000ec4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ec6:	4b6d      	ldr	r3, [pc, #436]	; (800107c <HAL_UART_MspInit+0x2a4>)
 8000ec8:	2210      	movs	r2, #16
 8000eca:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ecc:	4b6b      	ldr	r3, [pc, #428]	; (800107c <HAL_UART_MspInit+0x2a4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ed2:	4b6a      	ldr	r3, [pc, #424]	; (800107c <HAL_UART_MspInit+0x2a4>)
 8000ed4:	2280      	movs	r2, #128	; 0x80
 8000ed6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ed8:	4b68      	ldr	r3, [pc, #416]	; (800107c <HAL_UART_MspInit+0x2a4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ede:	4b67      	ldr	r3, [pc, #412]	; (800107c <HAL_UART_MspInit+0x2a4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000ee4:	4b65      	ldr	r3, [pc, #404]	; (800107c <HAL_UART_MspInit+0x2a4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000eea:	4b64      	ldr	r3, [pc, #400]	; (800107c <HAL_UART_MspInit+0x2a4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000ef0:	4862      	ldr	r0, [pc, #392]	; (800107c <HAL_UART_MspInit+0x2a4>)
 8000ef2:	f000 fa73 	bl	80013dc <HAL_DMA_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8000efc:	f7ff fd56 	bl	80009ac <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000f00:	2110      	movs	r1, #16
 8000f02:	485e      	ldr	r0, [pc, #376]	; (800107c <HAL_UART_MspInit+0x2a4>)
 8000f04:	f000 fc96 	bl	8001834 <HAL_DMA_ConfigChannelAttributes>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8000f0e:	f7ff fd4d 	bl	80009ac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a59      	ldr	r2, [pc, #356]	; (800107c <HAL_UART_MspInit+0x2a4>)
 8000f16:	679a      	str	r2, [r3, #120]	; 0x78
 8000f18:	4a58      	ldr	r2, [pc, #352]	; (800107c <HAL_UART_MspInit+0x2a4>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	2024      	movs	r0, #36	; 0x24
 8000f24:	f000 fa25 	bl	8001372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f28:	2024      	movs	r0, #36	; 0x24
 8000f2a:	f000 fa3c 	bl	80013a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f2e:	e098      	b.n	8001062 <HAL_UART_MspInit+0x28a>
  else if(uartHandle->Instance==USART2)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a53      	ldr	r2, [pc, #332]	; (8001084 <HAL_UART_MspInit+0x2ac>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	f040 8093 	bne.w	8001062 <HAL_UART_MspInit+0x28a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f40:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000f44:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f46:	f107 030c 	add.w	r3, r7, #12
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f002 f89e 	bl	800308c <HAL_RCCEx_PeriphCLKConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_UART_MspInit+0x182>
      Error_Handler();
 8000f56:	f7ff fd29 	bl	80009ac <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f5a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000f5e:	f7ff febf 	bl	8000ce0 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	2001      	movs	r0, #1
 8000f64:	f7ff fea4 	bl	8000cb0 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8000f68:	230c      	movs	r3, #12
 8000f6a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f78:	2307      	movs	r3, #7
 8000f7a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f80:	4619      	mov	r1, r3
 8000f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f86:	f000 fcf1 	bl	800196c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8000f8a:	4b3f      	ldr	r3, [pc, #252]	; (8001088 <HAL_UART_MspInit+0x2b0>)
 8000f8c:	4a3f      	ldr	r2, [pc, #252]	; (800108c <HAL_UART_MspInit+0x2b4>)
 8000f8e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000f90:	4b3d      	ldr	r3, [pc, #244]	; (8001088 <HAL_UART_MspInit+0x2b0>)
 8000f92:	2213      	movs	r2, #19
 8000f94:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f96:	4b3c      	ldr	r3, [pc, #240]	; (8001088 <HAL_UART_MspInit+0x2b0>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f9c:	4b3a      	ldr	r3, [pc, #232]	; (8001088 <HAL_UART_MspInit+0x2b0>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fa2:	4b39      	ldr	r3, [pc, #228]	; (8001088 <HAL_UART_MspInit+0x2b0>)
 8000fa4:	2280      	movs	r2, #128	; 0x80
 8000fa6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fa8:	4b37      	ldr	r3, [pc, #220]	; (8001088 <HAL_UART_MspInit+0x2b0>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fae:	4b36      	ldr	r3, [pc, #216]	; (8001088 <HAL_UART_MspInit+0x2b0>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000fb4:	4b34      	ldr	r3, [pc, #208]	; (8001088 <HAL_UART_MspInit+0x2b0>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fba:	4b33      	ldr	r3, [pc, #204]	; (8001088 <HAL_UART_MspInit+0x2b0>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000fc0:	4831      	ldr	r0, [pc, #196]	; (8001088 <HAL_UART_MspInit+0x2b0>)
 8000fc2:	f000 fa0b 	bl	80013dc <HAL_DMA_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <HAL_UART_MspInit+0x1f8>
      Error_Handler();
 8000fcc:	f7ff fcee 	bl	80009ac <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000fd0:	2110      	movs	r1, #16
 8000fd2:	482d      	ldr	r0, [pc, #180]	; (8001088 <HAL_UART_MspInit+0x2b0>)
 8000fd4:	f000 fc2e 	bl	8001834 <HAL_DMA_ConfigChannelAttributes>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_UART_MspInit+0x20a>
      Error_Handler();
 8000fde:	f7ff fce5 	bl	80009ac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a28      	ldr	r2, [pc, #160]	; (8001088 <HAL_UART_MspInit+0x2b0>)
 8000fe6:	67da      	str	r2, [r3, #124]	; 0x7c
 8000fe8:	4a27      	ldr	r2, [pc, #156]	; (8001088 <HAL_UART_MspInit+0x2b0>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8000fee:	4b28      	ldr	r3, [pc, #160]	; (8001090 <HAL_UART_MspInit+0x2b8>)
 8000ff0:	4a28      	ldr	r2, [pc, #160]	; (8001094 <HAL_UART_MspInit+0x2bc>)
 8000ff2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8000ff4:	4b26      	ldr	r3, [pc, #152]	; (8001090 <HAL_UART_MspInit+0x2b8>)
 8000ff6:	2214      	movs	r2, #20
 8000ff8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ffa:	4b25      	ldr	r3, [pc, #148]	; (8001090 <HAL_UART_MspInit+0x2b8>)
 8000ffc:	2210      	movs	r2, #16
 8000ffe:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001000:	4b23      	ldr	r3, [pc, #140]	; (8001090 <HAL_UART_MspInit+0x2b8>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001006:	4b22      	ldr	r3, [pc, #136]	; (8001090 <HAL_UART_MspInit+0x2b8>)
 8001008:	2280      	movs	r2, #128	; 0x80
 800100a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800100c:	4b20      	ldr	r3, [pc, #128]	; (8001090 <HAL_UART_MspInit+0x2b8>)
 800100e:	2200      	movs	r2, #0
 8001010:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001012:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <HAL_UART_MspInit+0x2b8>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <HAL_UART_MspInit+0x2b8>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <HAL_UART_MspInit+0x2b8>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001024:	481a      	ldr	r0, [pc, #104]	; (8001090 <HAL_UART_MspInit+0x2b8>)
 8001026:	f000 f9d9 	bl	80013dc <HAL_DMA_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8001030:	f7ff fcbc 	bl	80009ac <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001034:	2110      	movs	r1, #16
 8001036:	4816      	ldr	r0, [pc, #88]	; (8001090 <HAL_UART_MspInit+0x2b8>)
 8001038:	f000 fbfc 	bl	8001834 <HAL_DMA_ConfigChannelAttributes>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_UART_MspInit+0x26e>
      Error_Handler();
 8001042:	f7ff fcb3 	bl	80009ac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a11      	ldr	r2, [pc, #68]	; (8001090 <HAL_UART_MspInit+0x2b8>)
 800104a:	679a      	str	r2, [r3, #120]	; 0x78
 800104c:	4a10      	ldr	r2, [pc, #64]	; (8001090 <HAL_UART_MspInit+0x2b8>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	2025      	movs	r0, #37	; 0x25
 8001058:	f000 f98b 	bl	8001372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800105c:	2025      	movs	r0, #37	; 0x25
 800105e:	f000 f9a2 	bl	80013a6 <HAL_NVIC_EnableIRQ>
}
 8001062:	bf00      	nop
 8001064:	3758      	adds	r7, #88	; 0x58
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40013800 	.word	0x40013800
 8001070:	48000400 	.word	0x48000400
 8001074:	200003b0 	.word	0x200003b0
 8001078:	40020008 	.word	0x40020008
 800107c:	20000350 	.word	0x20000350
 8001080:	4002001c 	.word	0x4002001c
 8001084:	40004400 	.word	0x40004400
 8001088:	200002f0 	.word	0x200002f0
 800108c:	40020030 	.word	0x40020030
 8001090:	20000410 	.word	0x20000410
 8001094:	40020044 	.word	0x40020044

08001098 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001098:	480d      	ldr	r0, [pc, #52]	; (80010d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800109a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800109c:	f7ff fd8a 	bl	8000bb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a0:	480c      	ldr	r0, [pc, #48]	; (80010d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80010a2:	490d      	ldr	r1, [pc, #52]	; (80010d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010a4:	4a0d      	ldr	r2, [pc, #52]	; (80010dc <LoopForever+0xe>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a8:	e002      	b.n	80010b0 <LoopCopyDataInit>

080010aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ae:	3304      	adds	r3, #4

080010b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b4:	d3f9      	bcc.n	80010aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b6:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010b8:	4c0a      	ldr	r4, [pc, #40]	; (80010e4 <LoopForever+0x16>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010bc:	e001      	b.n	80010c2 <LoopFillZerobss>

080010be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c0:	3204      	adds	r2, #4

080010c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c4:	d3fb      	bcc.n	80010be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010c6:	f008 fab5 	bl	8009634 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ca:	f7ff fb6f 	bl	80007ac <main>

080010ce <LoopForever>:

LoopForever:
    b LoopForever
 80010ce:	e7fe      	b.n	80010ce <LoopForever>
  ldr   r0, =_estack
 80010d0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80010d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80010dc:	0800a1f8 	.word	0x0800a1f8
  ldr r2, =_sbss
 80010e0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80010e4:	2000062c 	.word	0x2000062c

080010e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <ADC_IRQHandler>
	...

080010ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f6:	2003      	movs	r0, #3
 80010f8:	f000 f930 	bl	800135c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80010fc:	f001 fde4 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8001100:	4603      	mov	r3, r0
 8001102:	4a09      	ldr	r2, [pc, #36]	; (8001128 <HAL_Init+0x3c>)
 8001104:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001106:	200f      	movs	r0, #15
 8001108:	f000 f810 	bl	800112c <HAL_InitTick>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d002      	beq.n	8001118 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	71fb      	strb	r3, [r7, #7]
 8001116:	e001      	b.n	800111c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001118:	f7ff fc4d 	bl	80009b6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800111c:	79fb      	ldrb	r3, [r7, #7]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000004 	.word	0x20000004

0800112c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001134:	2300      	movs	r3, #0
 8001136:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <HAL_InitTick+0x6c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d024      	beq.n	800118a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001140:	f001 fdc2 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8001144:	4602      	mov	r2, r0
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_InitTick+0x6c>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	4619      	mov	r1, r3
 800114c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001150:	fbb3 f3f1 	udiv	r3, r3, r1
 8001154:	fbb2 f3f3 	udiv	r3, r2, r3
 8001158:	4618      	mov	r0, r3
 800115a:	f000 f932 	bl	80013c2 <HAL_SYSTICK_Config>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d10f      	bne.n	8001184 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b0f      	cmp	r3, #15
 8001168:	d809      	bhi.n	800117e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800116a:	2200      	movs	r2, #0
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	f04f 30ff 	mov.w	r0, #4294967295
 8001172:	f000 f8fe 	bl	8001372 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001176:	4a09      	ldr	r2, [pc, #36]	; (800119c <HAL_InitTick+0x70>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	e007      	b.n	800118e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	73fb      	strb	r3, [r7, #15]
 8001182:	e004      	b.n	800118e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	73fb      	strb	r3, [r7, #15]
 8001188:	e001      	b.n	800118e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800118e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	2000000c 	.word	0x2000000c
 800119c:	20000008 	.word	0x20000008

080011a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <HAL_IncTick+0x1c>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <HAL_IncTick+0x20>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	4a03      	ldr	r2, [pc, #12]	; (80011c0 <HAL_IncTick+0x20>)
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr
 80011bc:	2000000c 	.word	0x2000000c
 80011c0:	20000590 	.word	0x20000590

080011c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e0:	4013      	ands	r3, r2
 80011e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f6:	4a04      	ldr	r2, [pc, #16]	; (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	60d3      	str	r3, [r2, #12]
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <__NVIC_GetPriorityGrouping+0x18>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	0a1b      	lsrs	r3, r3, #8
 8001216:	f003 0307 	and.w	r3, r3, #7
}
 800121a:	4618      	mov	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	2b00      	cmp	r3, #0
 8001238:	db0b      	blt.n	8001252 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	f003 021f 	and.w	r2, r3, #31
 8001240:	4906      	ldr	r1, [pc, #24]	; (800125c <__NVIC_EnableIRQ+0x34>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	095b      	lsrs	r3, r3, #5
 8001248:	2001      	movs	r0, #1
 800124a:	fa00 f202 	lsl.w	r2, r0, r2
 800124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	e000e100 	.word	0xe000e100

08001260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001270:	2b00      	cmp	r3, #0
 8001272:	db0a      	blt.n	800128a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	b2da      	uxtb	r2, r3
 8001278:	490c      	ldr	r1, [pc, #48]	; (80012ac <__NVIC_SetPriority+0x4c>)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	0112      	lsls	r2, r2, #4
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	440b      	add	r3, r1
 8001284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001288:	e00a      	b.n	80012a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4908      	ldr	r1, [pc, #32]	; (80012b0 <__NVIC_SetPriority+0x50>)
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	3b04      	subs	r3, #4
 8001298:	0112      	lsls	r2, r2, #4
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	440b      	add	r3, r1
 800129e:	761a      	strb	r2, [r3, #24]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000e100 	.word	0xe000e100
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b089      	sub	sp, #36	; 0x24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f1c3 0307 	rsb	r3, r3, #7
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	bf28      	it	cs
 80012d2:	2304      	movcs	r3, #4
 80012d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3304      	adds	r3, #4
 80012da:	2b06      	cmp	r3, #6
 80012dc:	d902      	bls.n	80012e4 <NVIC_EncodePriority+0x30>
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3b03      	subs	r3, #3
 80012e2:	e000      	b.n	80012e6 <NVIC_EncodePriority+0x32>
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43da      	mvns	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	401a      	ands	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	43d9      	mvns	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	4313      	orrs	r3, r2
         );
}
 800130e:	4618      	mov	r0, r3
 8001310:	3724      	adds	r7, #36	; 0x24
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001328:	d301      	bcc.n	800132e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800132a:	2301      	movs	r3, #1
 800132c:	e00f      	b.n	800134e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132e:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <SysTick_Config+0x40>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001336:	210f      	movs	r1, #15
 8001338:	f04f 30ff 	mov.w	r0, #4294967295
 800133c:	f7ff ff90 	bl	8001260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <SysTick_Config+0x40>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001346:	4b04      	ldr	r3, [pc, #16]	; (8001358 <SysTick_Config+0x40>)
 8001348:	2207      	movs	r2, #7
 800134a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	e000e010 	.word	0xe000e010

0800135c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff ff2d 	bl	80011c4 <__NVIC_SetPriorityGrouping>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b086      	sub	sp, #24
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
 800137e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001380:	f7ff ff44 	bl	800120c <__NVIC_GetPriorityGrouping>
 8001384:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	68b9      	ldr	r1, [r7, #8]
 800138a:	6978      	ldr	r0, [r7, #20]
 800138c:	f7ff ff92 	bl	80012b4 <NVIC_EncodePriority>
 8001390:	4602      	mov	r2, r0
 8001392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001396:	4611      	mov	r1, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff61 	bl	8001260 <__NVIC_SetPriority>
}
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff37 	bl	8001228 <__NVIC_EnableIRQ>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ffa4 	bl	8001318 <SysTick_Config>
 80013d0:	4603      	mov	r3, r0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e08e      	b.n	800150c <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	461a      	mov	r2, r3
 80013f4:	4b47      	ldr	r3, [pc, #284]	; (8001514 <HAL_DMA_Init+0x138>)
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d80f      	bhi.n	800141a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	4b45      	ldr	r3, [pc, #276]	; (8001518 <HAL_DMA_Init+0x13c>)
 8001402:	4413      	add	r3, r2
 8001404:	4a45      	ldr	r2, [pc, #276]	; (800151c <HAL_DMA_Init+0x140>)
 8001406:	fba2 2303 	umull	r2, r3, r2, r3
 800140a:	091b      	lsrs	r3, r3, #4
 800140c:	009a      	lsls	r2, r3, #2
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a42      	ldr	r2, [pc, #264]	; (8001520 <HAL_DMA_Init+0x144>)
 8001416:	641a      	str	r2, [r3, #64]	; 0x40
 8001418:	e00e      	b.n	8001438 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	4b40      	ldr	r3, [pc, #256]	; (8001524 <HAL_DMA_Init+0x148>)
 8001422:	4413      	add	r3, r2
 8001424:	4a3d      	ldr	r2, [pc, #244]	; (800151c <HAL_DMA_Init+0x140>)
 8001426:	fba2 2303 	umull	r2, r3, r2, r3
 800142a:	091b      	lsrs	r3, r3, #4
 800142c:	009a      	lsls	r2, r3, #2
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a3c      	ldr	r2, [pc, #240]	; (8001528 <HAL_DMA_Init+0x14c>)
 8001436:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2202      	movs	r2, #2
 800143c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6812      	ldr	r2, [r2, #0]
 800144a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800144e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001452:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6819      	ldr	r1, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	431a      	orrs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	431a      	orrs	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	431a      	orrs	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	431a      	orrs	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 fa02 	bl	8001894 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001498:	d102      	bne.n	80014a0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80014ac:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014b6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d010      	beq.n	80014e2 <HAL_DMA_Init+0x106>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	d80c      	bhi.n	80014e2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 fa2b 	bl	8001924 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	e008      	b.n	80014f4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2201      	movs	r2, #1
 80014fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40020407 	.word	0x40020407
 8001518:	bffdfff8 	.word	0xbffdfff8
 800151c:	cccccccd 	.word	0xcccccccd
 8001520:	40020000 	.word	0x40020000
 8001524:	bffdfbf8 	.word	0xbffdfbf8
 8001528:	40020400 	.word	0x40020400

0800152c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e04f      	b.n	80015de <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d008      	beq.n	800155c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2204      	movs	r2, #4
 800154e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e040      	b.n	80015de <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 020e 	bic.w	r2, r2, #14
 800156a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001576:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800157a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 0201 	bic.w	r2, r2, #1
 800158a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001590:	f003 021c 	and.w	r2, r3, #28
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	2101      	movs	r1, #1
 800159a:	fa01 f202 	lsl.w	r2, r1, r2
 800159e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015a8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d00c      	beq.n	80015cc <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015c0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015ca:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d005      	beq.n	800160c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2204      	movs	r2, #4
 8001604:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	73fb      	strb	r3, [r7, #15]
 800160a:	e047      	b.n	800169c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 020e 	bic.w	r2, r2, #14
 800161a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0201 	bic.w	r2, r2, #1
 800162a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001636:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800163a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001640:	f003 021c 	and.w	r2, r3, #28
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	2101      	movs	r1, #1
 800164a:	fa01 f202 	lsl.w	r2, r1, r2
 800164e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001658:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00c      	beq.n	800167c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800166c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001670:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800167a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	4798      	blx	r3
    }
  }
  return status;
 800169c:	7bfb      	ldrb	r3, [r7, #15]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c4:	f003 031c 	and.w	r3, r3, #28
 80016c8:	2204      	movs	r2, #4
 80016ca:	409a      	lsls	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4013      	ands	r3, r2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d027      	beq.n	8001724 <HAL_DMA_IRQHandler+0x7c>
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	f003 0304 	and.w	r3, r3, #4
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d022      	beq.n	8001724 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0320 	and.w	r3, r3, #32
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d107      	bne.n	80016fc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0204 	bic.w	r2, r2, #4
 80016fa:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001700:	f003 021c 	and.w	r2, r3, #28
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	2104      	movs	r1, #4
 800170a:	fa01 f202 	lsl.w	r2, r1, r2
 800170e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 8081 	beq.w	800181c <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001722:	e07b      	b.n	800181c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001728:	f003 031c 	and.w	r3, r3, #28
 800172c:	2202      	movs	r2, #2
 800172e:	409a      	lsls	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4013      	ands	r3, r2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d03d      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x10c>
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d038      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0320 	and.w	r3, r3, #32
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10b      	bne.n	8001768 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 020a 	bic.w	r2, r2, #10
 800175e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	4b2e      	ldr	r3, [pc, #184]	; (8001828 <HAL_DMA_IRQHandler+0x180>)
 8001770:	429a      	cmp	r2, r3
 8001772:	d909      	bls.n	8001788 <HAL_DMA_IRQHandler+0xe0>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001778:	f003 031c 	and.w	r3, r3, #28
 800177c:	4a2b      	ldr	r2, [pc, #172]	; (800182c <HAL_DMA_IRQHandler+0x184>)
 800177e:	2102      	movs	r1, #2
 8001780:	fa01 f303 	lsl.w	r3, r1, r3
 8001784:	6053      	str	r3, [r2, #4]
 8001786:	e008      	b.n	800179a <HAL_DMA_IRQHandler+0xf2>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178c:	f003 031c 	and.w	r3, r3, #28
 8001790:	4a27      	ldr	r2, [pc, #156]	; (8001830 <HAL_DMA_IRQHandler+0x188>)
 8001792:	2102      	movs	r1, #2
 8001794:	fa01 f303 	lsl.w	r3, r1, r3
 8001798:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d038      	beq.n	800181c <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80017b2:	e033      	b.n	800181c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b8:	f003 031c 	and.w	r3, r3, #28
 80017bc:	2208      	movs	r2, #8
 80017be:	409a      	lsls	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d02a      	beq.n	800181e <HAL_DMA_IRQHandler+0x176>
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d025      	beq.n	800181e <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 020e 	bic.w	r2, r2, #14
 80017e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	f003 021c 	and.w	r2, r3, #28
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	2101      	movs	r1, #1
 80017f0:	fa01 f202 	lsl.w	r2, r1, r2
 80017f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001810:	2b00      	cmp	r3, #0
 8001812:	d004      	beq.n	800181e <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800181c:	bf00      	nop
 800181e:	bf00      	nop
}
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40020080 	.word	0x40020080
 800182c:	40020400 	.word	0x40020400
 8001830:	40020000 	.word	0x40020000

08001834 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d103      	bne.n	8001850 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	72fb      	strb	r3, [r7, #11]
    return status;
 800184c:	7afb      	ldrb	r3, [r7, #11]
 800184e:	e01b      	b.n	8001888 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	f003 0310 	and.w	r3, r3, #16
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00d      	beq.n	800187e <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d004      	beq.n	8001876 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	e003      	b.n	800187e <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800187c:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	601a      	str	r2, [r3, #0]

  return status;
 8001886:	7afb      	ldrb	r3, [r7, #11]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr
	...

08001894 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d813      	bhi.n	80018d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ac:	089b      	lsrs	r3, r3, #2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80018b4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	3b08      	subs	r3, #8
 80018c4:	4a14      	ldr	r2, [pc, #80]	; (8001918 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80018c6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ca:	091b      	lsrs	r3, r3, #4
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	e011      	b.n	80018f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d4:	089b      	lsrs	r3, r3, #2
 80018d6:	009a      	lsls	r2, r3, #2
 80018d8:	4b10      	ldr	r3, [pc, #64]	; (800191c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80018da:	4413      	add	r3, r2
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	3b08      	subs	r3, #8
 80018e8:	4a0b      	ldr	r2, [pc, #44]	; (8001918 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80018ea:	fba2 2303 	umull	r2, r3, r2, r3
 80018ee:	091b      	lsrs	r3, r3, #4
 80018f0:	3307      	adds	r3, #7
 80018f2:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80018f8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f003 031f 	and.w	r3, r3, #31
 8001900:	2201      	movs	r2, #1
 8001902:	409a      	lsls	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40020407 	.word	0x40020407
 8001918:	cccccccd 	.word	0xcccccccd
 800191c:	4002081c 	.word	0x4002081c
 8001920:	40020880 	.word	0x40020880

08001924 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001934:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800193a:	4413      	add	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	461a      	mov	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a08      	ldr	r2, [pc, #32]	; (8001968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001948:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	3b01      	subs	r3, #1
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	2201      	movs	r2, #1
 8001954:	409a      	lsls	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800195a:	bf00      	nop
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	1000823f 	.word	0x1000823f
 8001968:	40020940 	.word	0x40020940

0800196c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800196c:	b480      	push	{r7}
 800196e:	b087      	sub	sp, #28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800197a:	e140      	b.n	8001bfe <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	2101      	movs	r1, #1
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	fa01 f303 	lsl.w	r3, r1, r3
 8001988:	4013      	ands	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 8132 	beq.w	8001bf8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	2b01      	cmp	r3, #1
 800199e:	d005      	beq.n	80019ac <HAL_GPIO_Init+0x40>
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d130      	bne.n	8001a0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	2203      	movs	r2, #3
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019e2:	2201      	movs	r2, #1
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	091b      	lsrs	r3, r3, #4
 80019f8:	f003 0201 	and.w	r2, r3, #1
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	2b03      	cmp	r3, #3
 8001a18:	d017      	beq.n	8001a4a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	2203      	movs	r2, #3
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d123      	bne.n	8001a9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	08da      	lsrs	r2, r3, #3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3208      	adds	r2, #8
 8001a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	220f      	movs	r2, #15
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	691a      	ldr	r2, [r3, #16]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	08da      	lsrs	r2, r3, #3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3208      	adds	r2, #8
 8001a98:	6939      	ldr	r1, [r7, #16]
 8001a9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0203 	and.w	r2, r3, #3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 808c 	beq.w	8001bf8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001ae0:	4a4e      	ldr	r2, [pc, #312]	; (8001c1c <HAL_GPIO_Init+0x2b0>)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	089b      	lsrs	r3, r3, #2
 8001ae6:	3302      	adds	r3, #2
 8001ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	2207      	movs	r2, #7
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b0a:	d00d      	beq.n	8001b28 <HAL_GPIO_Init+0x1bc>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a44      	ldr	r2, [pc, #272]	; (8001c20 <HAL_GPIO_Init+0x2b4>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d007      	beq.n	8001b24 <HAL_GPIO_Init+0x1b8>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a43      	ldr	r2, [pc, #268]	; (8001c24 <HAL_GPIO_Init+0x2b8>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d101      	bne.n	8001b20 <HAL_GPIO_Init+0x1b4>
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	e004      	b.n	8001b2a <HAL_GPIO_Init+0x1be>
 8001b20:	2307      	movs	r3, #7
 8001b22:	e002      	b.n	8001b2a <HAL_GPIO_Init+0x1be>
 8001b24:	2301      	movs	r3, #1
 8001b26:	e000      	b.n	8001b2a <HAL_GPIO_Init+0x1be>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	f002 0203 	and.w	r2, r2, #3
 8001b30:	0092      	lsls	r2, r2, #2
 8001b32:	4093      	lsls	r3, r2
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b3a:	4938      	ldr	r1, [pc, #224]	; (8001c1c <HAL_GPIO_Init+0x2b0>)
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	089b      	lsrs	r3, r3, #2
 8001b40:	3302      	adds	r3, #2
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001b48:	4b37      	ldr	r3, [pc, #220]	; (8001c28 <HAL_GPIO_Init+0x2bc>)
 8001b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b4e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	4013      	ands	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001b6e:	4a2e      	ldr	r2, [pc, #184]	; (8001c28 <HAL_GPIO_Init+0x2bc>)
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001b76:	4b2c      	ldr	r3, [pc, #176]	; (8001c28 <HAL_GPIO_Init+0x2bc>)
 8001b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b7c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	43db      	mvns	r3, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4013      	ands	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001b9c:	4a22      	ldr	r2, [pc, #136]	; (8001c28 <HAL_GPIO_Init+0x2bc>)
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ba4:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <HAL_GPIO_Init+0x2bc>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bc8:	4a17      	ldr	r2, [pc, #92]	; (8001c28 <HAL_GPIO_Init+0x2bc>)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001bce:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <HAL_GPIO_Init+0x2bc>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bf2:	4a0d      	ldr	r2, [pc, #52]	; (8001c28 <HAL_GPIO_Init+0x2bc>)
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	fa22 f303 	lsr.w	r3, r2, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f47f aeb7 	bne.w	800197c <HAL_GPIO_Init+0x10>
  }
}
 8001c0e:	bf00      	nop
 8001c10:	bf00      	nop
 8001c12:	371c      	adds	r7, #28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40010000 	.word	0x40010000
 8001c20:	48000400 	.word	0x48000400
 8001c24:	48000800 	.word	0x48000800
 8001c28:	58000800 	.word	0x58000800

08001c2c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c30:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a03      	ldr	r2, [pc, #12]	; (8001c44 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c3a:	6013      	str	r3, [r2, #0]
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr
 8001c44:	58000400 	.word	0x58000400

08001c48 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001c4c:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <HAL_PWREx_GetVoltageRange+0x14>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr
 8001c5c:	58000400 	.word	0x58000400

08001c60 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c70:	d101      	bne.n	8001c76 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001c72:	2301      	movs	r3, #1
 8001c74:	e000      	b.n	8001c78 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	58000400 	.word	0x58000400

08001c84 <LL_RCC_HSE_EnableTcxo>:
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c96:	6013      	str	r3, [r2, #0]
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <LL_RCC_HSE_DisableTcxo>:
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001cb2:	6013      	str	r3, [r2, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr

08001cbc <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cce:	d101      	bne.n	8001cd4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <LL_RCC_HSE_Enable>:
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf0:	6013      	str	r3, [r2, #0]
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr

08001cfa <LL_RCC_HSE_Disable>:
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d0c:	6013      	str	r3, [r2, #0]
}
 8001d0e:	bf00      	nop
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr

08001d16 <LL_RCC_HSE_IsReady>:
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d28:	d101      	bne.n	8001d2e <LL_RCC_HSE_IsReady+0x18>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <LL_RCC_HSE_IsReady+0x1a>
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr

08001d38 <LL_RCC_HSI_Enable>:
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4a:	6013      	str	r3, [r2, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr

08001d54 <LL_RCC_HSI_Disable>:
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d66:	6013      	str	r3, [r2, #0]
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <LL_RCC_HSI_IsReady>:
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d82:	d101      	bne.n	8001d88 <LL_RCC_HSI_IsReady+0x18>
 8001d84:	2301      	movs	r3, #1
 8001d86:	e000      	b.n	8001d8a <LL_RCC_HSI_IsReady+0x1a>
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr

08001d92 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	061b      	lsls	r3, r3, #24
 8001da8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dac:	4313      	orrs	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr

08001dba <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d101      	bne.n	8001dd2 <LL_RCC_LSE_IsReady+0x18>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <LL_RCC_LSE_IsReady+0x1a>
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr

08001ddc <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001de8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr

08001dfc <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e0c:	f023 0301 	bic.w	r3, r3, #1
 8001e10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d101      	bne.n	8001e34 <LL_RCC_LSI_IsReady+0x18>
 8001e30:	2301      	movs	r3, #1
 8001e32:	e000      	b.n	8001e36 <LL_RCC_LSI_IsReady+0x1a>
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr

08001e3e <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	6013      	str	r3, [r2, #0]
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr

08001e5a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e68:	f023 0301 	bic.w	r3, r3, #1
 8001e6c:	6013      	str	r3, [r2, #0]
}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr

08001e76 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d101      	bne.n	8001e8c <LL_RCC_MSI_IsReady+0x16>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <LL_RCC_MSI_IsReady+0x18>
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr

08001e96 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d101      	bne.n	8001eac <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr

08001eb6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	021b      	lsls	r3, r3, #8
 8001efa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001efe:	4313      	orrs	r3, r2
 8001f00:	604b      	str	r3, [r1, #4]
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f023 0203 	bic.w	r2, r3, #3
 8001f1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	608b      	str	r3, [r1, #8]
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr

08001f32 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 030c 	and.w	r3, r3, #12
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr

08001f48 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	608b      	str	r3, [r1, #8]
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr

08001f6e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001fa8:	f023 020f 	bic.w	r2, r3, #15
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	091b      	lsrs	r3, r3, #4
 8001fb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	608b      	str	r3, [r1, #8]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr

08001fea <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ffc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4313      	orrs	r3, r2
 8002004:	608b      	str	r3, [r1, #8]
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800201e:	4618      	mov	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr

08002026 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800202a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr

08002040 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800204e:	4618      	mov	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr

08002056 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800205a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800207a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800207e:	6013      	str	r3, [r2, #0]
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800208c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800209a:	6013      	str	r3, [r2, #0]
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80020a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020b6:	d101      	bne.n	80020bc <LL_RCC_PLL_IsReady+0x18>
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <LL_RCC_PLL_IsReady+0x1a>
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc80      	pop	{r7}
 80020c4:	4770      	bx	lr

080020c6 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80020c6:	b480      	push	{r7}
 80020c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80020ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	0a1b      	lsrs	r3, r3, #8
 80020d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr

080020de <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80020e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr

080020f4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80020f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002102:	4618      	mov	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr

0800210a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800210e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f003 0303 	and.w	r3, r3, #3
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr

08002120 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002132:	d101      	bne.n	8002138 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr

08002142 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002156:	d101      	bne.n	800215c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr

08002166 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800216a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800217a:	d101      	bne.n	8002180 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800217c:	2301      	movs	r3, #1
 800217e:	e000      	b.n	8002182 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr

0800218a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800218e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002198:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800219c:	d101      	bne.n	80021a2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr

080021ac <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80021b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80021be:	d101      	bne.n	80021c4 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80021c0:	2301      	movs	r3, #1
 80021c2:	e000      	b.n	80021c6 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr
	...

080021d0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e38a      	b.n	80028f8 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021e2:	f7ff fea6 	bl	8001f32 <LL_RCC_GetSysClkSource>
 80021e6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021e8:	f7ff ff8f 	bl	800210a <LL_RCC_PLL_GetMainSource>
 80021ec:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 80c9 	beq.w	800238e <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d005      	beq.n	800220e <HAL_RCC_OscConfig+0x3e>
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	2b0c      	cmp	r3, #12
 8002206:	d17b      	bne.n	8002300 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d178      	bne.n	8002300 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800220e:	f7ff fe32 	bl	8001e76 <LL_RCC_MSI_IsReady>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <HAL_RCC_OscConfig+0x54>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e369      	b.n	80028f8 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d005      	beq.n	8002242 <HAL_RCC_OscConfig+0x72>
 8002236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002240:	e006      	b.n	8002250 <HAL_RCC_OscConfig+0x80>
 8002242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800224a:	091b      	lsrs	r3, r3, #4
 800224c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002250:	4293      	cmp	r3, r2
 8002252:	d222      	bcs.n	800229a <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002258:	4618      	mov	r0, r3
 800225a:	f000 fd6d 	bl	8002d38 <RCC_SetFlashLatencyFromMSIRange>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e347      	b.n	80028f8 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002272:	f043 0308 	orr.w	r3, r3, #8
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002286:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800228a:	4313      	orrs	r3, r2
 800228c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff fe26 	bl	8001ee4 <LL_RCC_MSI_SetCalibTrimming>
 8002298:	e021      	b.n	80022de <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800229a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022a4:	f043 0308 	orr.w	r3, r3, #8
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022bc:	4313      	orrs	r3, r2
 80022be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fe0d 	bl	8001ee4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 fd32 	bl	8002d38 <RCC_SetFlashLatencyFromMSIRange>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e30c      	b.n	80028f8 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80022de:	f000 fcf3 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 80022e2:	4603      	mov	r3, r0
 80022e4:	4ab4      	ldr	r2, [pc, #720]	; (80025b8 <HAL_RCC_OscConfig+0x3e8>)
 80022e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022e8:	4bb4      	ldr	r3, [pc, #720]	; (80025bc <HAL_RCC_OscConfig+0x3ec>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe ff1d 	bl	800112c <HAL_InitTick>
 80022f2:	4603      	mov	r3, r0
 80022f4:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80022f6:	7cfb      	ldrb	r3, [r7, #19]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d047      	beq.n	800238c <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 80022fc:	7cfb      	ldrb	r3, [r7, #19]
 80022fe:	e2fb      	b.n	80028f8 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d02c      	beq.n	8002362 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002308:	f7ff fd99 	bl	8001e3e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800230c:	f7fe fc09 	bl	8000b22 <HAL_GetTick>
 8002310:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002314:	f7fe fc05 	bl	8000b22 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e2e8      	b.n	80028f8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002326:	f7ff fda6 	bl	8001e76 <LL_RCC_MSI_IsReady>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f1      	beq.n	8002314 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800233a:	f043 0308 	orr.w	r3, r3, #8
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002352:	4313      	orrs	r3, r2
 8002354:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff fdc2 	bl	8001ee4 <LL_RCC_MSI_SetCalibTrimming>
 8002360:	e015      	b.n	800238e <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002362:	f7ff fd7a 	bl	8001e5a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002366:	f7fe fbdc 	bl	8000b22 <HAL_GetTick>
 800236a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800236e:	f7fe fbd8 	bl	8000b22 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e2bb      	b.n	80028f8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002380:	f7ff fd79 	bl	8001e76 <LL_RCC_MSI_IsReady>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f1      	bne.n	800236e <HAL_RCC_OscConfig+0x19e>
 800238a:	e000      	b.n	800238e <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800238c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d05f      	beq.n	800245a <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	2b08      	cmp	r3, #8
 800239e:	d005      	beq.n	80023ac <HAL_RCC_OscConfig+0x1dc>
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	2b0c      	cmp	r3, #12
 80023a4:	d10d      	bne.n	80023c2 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d10a      	bne.n	80023c2 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ac:	f7ff fcb3 	bl	8001d16 <LL_RCC_HSE_IsReady>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d050      	beq.n	8002458 <HAL_RCC_OscConfig+0x288>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d14c      	bne.n	8002458 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e29a      	b.n	80028f8 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80023c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023d4:	4313      	orrs	r3, r2
 80023d6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e0:	d102      	bne.n	80023e8 <HAL_RCC_OscConfig+0x218>
 80023e2:	f7ff fc7c 	bl	8001cde <LL_RCC_HSE_Enable>
 80023e6:	e00d      	b.n	8002404 <HAL_RCC_OscConfig+0x234>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80023f0:	d104      	bne.n	80023fc <HAL_RCC_OscConfig+0x22c>
 80023f2:	f7ff fc47 	bl	8001c84 <LL_RCC_HSE_EnableTcxo>
 80023f6:	f7ff fc72 	bl	8001cde <LL_RCC_HSE_Enable>
 80023fa:	e003      	b.n	8002404 <HAL_RCC_OscConfig+0x234>
 80023fc:	f7ff fc7d 	bl	8001cfa <LL_RCC_HSE_Disable>
 8002400:	f7ff fc4e 	bl	8001ca0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d012      	beq.n	8002432 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240c:	f7fe fb89 	bl	8000b22 <HAL_GetTick>
 8002410:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002414:	f7fe fb85 	bl	8000b22 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b64      	cmp	r3, #100	; 0x64
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e268      	b.n	80028f8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002426:	f7ff fc76 	bl	8001d16 <LL_RCC_HSE_IsReady>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0f1      	beq.n	8002414 <HAL_RCC_OscConfig+0x244>
 8002430:	e013      	b.n	800245a <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002432:	f7fe fb76 	bl	8000b22 <HAL_GetTick>
 8002436:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800243a:	f7fe fb72 	bl	8000b22 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b64      	cmp	r3, #100	; 0x64
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e255      	b.n	80028f8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 800244c:	f7ff fc63 	bl	8001d16 <LL_RCC_HSE_IsReady>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f1      	bne.n	800243a <HAL_RCC_OscConfig+0x26a>
 8002456:	e000      	b.n	800245a <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002458:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d04b      	beq.n	80024fe <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	2b04      	cmp	r3, #4
 800246a:	d005      	beq.n	8002478 <HAL_RCC_OscConfig+0x2a8>
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	2b0c      	cmp	r3, #12
 8002470:	d113      	bne.n	800249a <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	2b02      	cmp	r3, #2
 8002476:	d110      	bne.n	800249a <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002478:	f7ff fc7a 	bl	8001d70 <LL_RCC_HSI_IsReady>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d005      	beq.n	800248e <HAL_RCC_OscConfig+0x2be>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e234      	b.n	80028f8 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff fc7d 	bl	8001d92 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002498:	e031      	b.n	80024fe <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d019      	beq.n	80024d6 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a2:	f7ff fc49 	bl	8001d38 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a6:	f7fe fb3c 	bl	8000b22 <HAL_GetTick>
 80024aa:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ae:	f7fe fb38 	bl	8000b22 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e21b      	b.n	80028f8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 80024c0:	f7ff fc56 	bl	8001d70 <LL_RCC_HSI_IsReady>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f1      	beq.n	80024ae <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fc5f 	bl	8001d92 <LL_RCC_HSI_SetCalibTrimming>
 80024d4:	e013      	b.n	80024fe <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024d6:	f7ff fc3d 	bl	8001d54 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024da:	f7fe fb22 	bl	8000b22 <HAL_GetTick>
 80024de:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e2:	f7fe fb1e 	bl	8000b22 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e201      	b.n	80028f8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 80024f4:	f7ff fc3c 	bl	8001d70 <LL_RCC_HSI_IsReady>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f1      	bne.n	80024e2 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d06e      	beq.n	80025e8 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d056      	beq.n	80025c0 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 8002512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800251a:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69da      	ldr	r2, [r3, #28]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	429a      	cmp	r2, r3
 8002528:	d031      	beq.n	800258e <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d006      	beq.n	8002542 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e1da      	b.n	80028f8 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	d013      	beq.n	8002574 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 800254c:	f7ff fc56 	bl	8001dfc <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002550:	f7fe fae7 	bl	8000b22 <HAL_GetTick>
 8002554:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002558:	f7fe fae3 	bl	8000b22 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b11      	cmp	r3, #17
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e1c6      	b.n	80028f8 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 800256a:	f7ff fc57 	bl	8001e1c <LL_RCC_LSI_IsReady>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1f1      	bne.n	8002558 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002578:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800257c:	f023 0210 	bic.w	r2, r3, #16
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800258e:	f7ff fc25 	bl	8001ddc <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002592:	f7fe fac6 	bl	8000b22 <HAL_GetTick>
 8002596:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800259a:	f7fe fac2 	bl	8000b22 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b11      	cmp	r3, #17
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e1a5      	b.n	80028f8 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 80025ac:	f7ff fc36 	bl	8001e1c <LL_RCC_LSI_IsReady>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0f1      	beq.n	800259a <HAL_RCC_OscConfig+0x3ca>
 80025b6:	e017      	b.n	80025e8 <HAL_RCC_OscConfig+0x418>
 80025b8:	20000004 	.word	0x20000004
 80025bc:	20000008 	.word	0x20000008
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025c0:	f7ff fc1c 	bl	8001dfc <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c4:	f7fe faad 	bl	8000b22 <HAL_GetTick>
 80025c8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025cc:	f7fe faa9 	bl	8000b22 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b11      	cmp	r3, #17
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e18c      	b.n	80028f8 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 80025de:	f7ff fc1d 	bl	8001e1c <LL_RCC_LSI_IsReady>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1f1      	bne.n	80025cc <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 80d8 	beq.w	80027a6 <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80025f6:	f7ff fb33 	bl	8001c60 <LL_PWR_IsEnabledBkUpAccess>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d113      	bne.n	8002628 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002600:	f7ff fb14 	bl	8001c2c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002604:	f7fe fa8d 	bl	8000b22 <HAL_GetTick>
 8002608:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800260c:	f7fe fa89 	bl	8000b22 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e16c      	b.n	80028f8 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800261e:	f7ff fb1f 	bl	8001c60 <LL_PWR_IsEnabledBkUpAccess>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0f1      	beq.n	800260c <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d07b      	beq.n	8002728 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	2b85      	cmp	r3, #133	; 0x85
 8002636:	d003      	beq.n	8002640 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	2b05      	cmp	r3, #5
 800263e:	d109      	bne.n	8002654 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002648:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800264c:	f043 0304 	orr.w	r3, r3, #4
 8002650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002654:	f7fe fa65 	bl	8000b22 <HAL_GetTick>
 8002658:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800265a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800265e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002662:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800266e:	e00a      	b.n	8002686 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002670:	f7fe fa57 	bl	8000b22 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f241 3288 	movw	r2, #5000	; 0x1388
 800267e:	4293      	cmp	r3, r2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e138      	b.n	80028f8 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002686:	f7ff fb98 	bl	8001dba <LL_RCC_LSE_IsReady>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0ef      	beq.n	8002670 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	2b81      	cmp	r3, #129	; 0x81
 8002696:	d003      	beq.n	80026a0 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	2b85      	cmp	r3, #133	; 0x85
 800269e:	d121      	bne.n	80026e4 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a0:	f7fe fa3f 	bl	8000b22 <HAL_GetTick>
 80026a4:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80026a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80026ba:	e00a      	b.n	80026d2 <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026bc:	f7fe fa31 	bl	8000b22 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e112      	b.n	80028f8 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80026d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0ec      	beq.n	80026bc <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80026e2:	e060      	b.n	80027a6 <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e4:	f7fe fa1d 	bl	8000b22 <HAL_GetTick>
 80026e8:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80026ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80026fe:	e00a      	b.n	8002716 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002700:	f7fe fa0f 	bl	8000b22 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	f241 3288 	movw	r2, #5000	; 0x1388
 800270e:	4293      	cmp	r3, r2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e0f0      	b.n	80028f8 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800271a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1ec      	bne.n	8002700 <HAL_RCC_OscConfig+0x530>
 8002726:	e03e      	b.n	80027a6 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002728:	f7fe f9fb 	bl	8000b22 <HAL_GetTick>
 800272c:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800272e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002736:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800273a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800273e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002742:	e00a      	b.n	800275a <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002744:	f7fe f9ed 	bl	8000b22 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002752:	4293      	cmp	r3, r2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e0ce      	b.n	80028f8 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800275a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800275e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1ec      	bne.n	8002744 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276a:	f7fe f9da 	bl	8000b22 <HAL_GetTick>
 800276e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002778:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800277c:	f023 0301 	bic.w	r3, r3, #1
 8002780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002784:	e00a      	b.n	800279c <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002786:	f7fe f9cc 	bl	8000b22 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	f241 3288 	movw	r2, #5000	; 0x1388
 8002794:	4293      	cmp	r3, r2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e0ad      	b.n	80028f8 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 800279c:	f7ff fb0d 	bl	8001dba <LL_RCC_LSE_IsReady>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1ef      	bne.n	8002786 <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 80a3 	beq.w	80028f6 <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	2b0c      	cmp	r3, #12
 80027b4:	d076      	beq.n	80028a4 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d14b      	bne.n	8002856 <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027be:	f7ff fc63 	bl	8002088 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c2:	f7fe f9ae 	bl	8000b22 <HAL_GetTick>
 80027c6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ca:	f7fe f9aa 	bl	8000b22 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b0a      	cmp	r3, #10
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e08d      	b.n	80028f8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 80027dc:	f7ff fc62 	bl	80020a4 <LL_RCC_PLL_IsReady>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f1      	bne.n	80027ca <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	4b44      	ldr	r3, [pc, #272]	; (8002900 <HAL_RCC_OscConfig+0x730>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027f8:	4311      	orrs	r1, r2
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027fe:	0212      	lsls	r2, r2, #8
 8002800:	4311      	orrs	r1, r2
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002806:	4311      	orrs	r1, r2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800280c:	4311      	orrs	r1, r2
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002812:	430a      	orrs	r2, r1
 8002814:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002818:	4313      	orrs	r3, r2
 800281a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800281c:	f7ff fc26 	bl	800206c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800282a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800282e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002830:	f7fe f977 	bl	8000b22 <HAL_GetTick>
 8002834:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002838:	f7fe f973 	bl	8000b22 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b0a      	cmp	r3, #10
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e056      	b.n	80028f8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 800284a:	f7ff fc2b 	bl	80020a4 <LL_RCC_PLL_IsReady>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0f1      	beq.n	8002838 <HAL_RCC_OscConfig+0x668>
 8002854:	e04f      	b.n	80028f6 <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002856:	f7ff fc17 	bl	8002088 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800285a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002864:	f023 0303 	bic.w	r3, r3, #3
 8002868:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 800286a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002874:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800287c:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287e:	f7fe f950 	bl	8000b22 <HAL_GetTick>
 8002882:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002886:	f7fe f94c 	bl	8000b22 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b0a      	cmp	r3, #10
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e02f      	b.n	80028f8 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002898:	f7ff fc04 	bl	80020a4 <LL_RCC_PLL_IsReady>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f1      	bne.n	8002886 <HAL_RCC_OscConfig+0x6b6>
 80028a2:	e028      	b.n	80028f6 <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e023      	b.n	80028f8 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	f003 0203 	and.w	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d115      	bne.n	80028f2 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d10e      	bne.n	80028f2 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028de:	021b      	lsls	r3, r3, #8
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d106      	bne.n	80028f2 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d001      	beq.n	80028f6 <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3720      	adds	r7, #32
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	11c1808c 	.word	0x11c1808c

08002904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e12c      	b.n	8002b72 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002918:	4b98      	ldr	r3, [pc, #608]	; (8002b7c <HAL_RCC_ClockConfig+0x278>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d91b      	bls.n	800295e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002926:	4b95      	ldr	r3, [pc, #596]	; (8002b7c <HAL_RCC_ClockConfig+0x278>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 0207 	bic.w	r2, r3, #7
 800292e:	4993      	ldr	r1, [pc, #588]	; (8002b7c <HAL_RCC_ClockConfig+0x278>)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	4313      	orrs	r3, r2
 8002934:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002936:	f7fe f8f4 	bl	8000b22 <HAL_GetTick>
 800293a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800293c:	e008      	b.n	8002950 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800293e:	f7fe f8f0 	bl	8000b22 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e110      	b.n	8002b72 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002950:	4b8a      	ldr	r3, [pc, #552]	; (8002b7c <HAL_RCC_ClockConfig+0x278>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d1ef      	bne.n	800293e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d016      	beq.n	8002998 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff faea 	bl	8001f48 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002974:	f7fe f8d5 	bl	8000b22 <HAL_GetTick>
 8002978:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800297a:	e008      	b.n	800298e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800297c:	f7fe f8d1 	bl	8000b22 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e0f1      	b.n	8002b72 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800298e:	f7ff fbc7 	bl	8002120 <LL_RCC_IsActiveFlag_HPRE>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0f1      	beq.n	800297c <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0320 	and.w	r3, r3, #32
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d016      	beq.n	80029d2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff fae0 	bl	8001f6e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80029ae:	f7fe f8b8 	bl	8000b22 <HAL_GetTick>
 80029b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029b6:	f7fe f8b4 	bl	8000b22 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e0d4      	b.n	8002b72 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80029c8:	f7ff fbbb 	bl	8002142 <LL_RCC_IsActiveFlag_C2HPRE>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f1      	beq.n	80029b6 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d016      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff fad8 	bl	8001f98 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80029e8:	f7fe f89b 	bl	8000b22 <HAL_GetTick>
 80029ec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029f0:	f7fe f897 	bl	8000b22 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e0b7      	b.n	8002b72 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002a02:	f7ff fbb0 	bl	8002166 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0f1      	beq.n	80029f0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d016      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff fad1 	bl	8001fc4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a22:	f7fe f87e 	bl	8000b22 <HAL_GetTick>
 8002a26:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a2a:	f7fe f87a 	bl	8000b22 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e09a      	b.n	8002b72 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002a3c:	f7ff fba5 	bl	800218a <LL_RCC_IsActiveFlag_PPRE1>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f1      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d017      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fac6 	bl	8001fea <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a5e:	f7fe f860 	bl	8000b22 <HAL_GetTick>
 8002a62:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a66:	f7fe f85c 	bl	8000b22 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e07c      	b.n	8002b72 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002a78:	f7ff fb98 	bl	80021ac <LL_RCC_IsActiveFlag_PPRE2>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0f1      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d043      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d106      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002a96:	f7ff f93e 	bl	8001d16 <LL_RCC_HSE_IsReady>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d11e      	bne.n	8002ade <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e066      	b.n	8002b72 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d106      	bne.n	8002aba <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002aac:	f7ff fafa 	bl	80020a4 <LL_RCC_PLL_IsReady>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d113      	bne.n	8002ade <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e05b      	b.n	8002b72 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d106      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002ac2:	f7ff f9d8 	bl	8001e76 <LL_RCC_MSI_IsReady>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d108      	bne.n	8002ade <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e050      	b.n	8002b72 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002ad0:	f7ff f94e 	bl	8001d70 <LL_RCC_HSI_IsReady>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e049      	b.n	8002b72 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fa12 	bl	8001f0c <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae8:	f7fe f81b 	bl	8000b22 <HAL_GetTick>
 8002aec:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aee:	e00a      	b.n	8002b06 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af0:	f7fe f817 	bl	8000b22 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e035      	b.n	8002b72 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b06:	f7ff fa14 	bl	8001f32 <LL_RCC_GetSysClkSource>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d1ec      	bne.n	8002af0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b16:	4b19      	ldr	r3, [pc, #100]	; (8002b7c <HAL_RCC_ClockConfig+0x278>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d21b      	bcs.n	8002b5c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b24:	4b15      	ldr	r3, [pc, #84]	; (8002b7c <HAL_RCC_ClockConfig+0x278>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f023 0207 	bic.w	r2, r3, #7
 8002b2c:	4913      	ldr	r1, [pc, #76]	; (8002b7c <HAL_RCC_ClockConfig+0x278>)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b34:	f7fd fff5 	bl	8000b22 <HAL_GetTick>
 8002b38:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b3c:	f7fd fff1 	bl	8000b22 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e011      	b.n	8002b72 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4e:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <HAL_RCC_ClockConfig+0x278>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d1ef      	bne.n	8002b3c <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002b5c:	f000 f8b4 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002b60:	4603      	mov	r3, r0
 8002b62:	4a07      	ldr	r2, [pc, #28]	; (8002b80 <HAL_RCC_ClockConfig+0x27c>)
 8002b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002b66:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <HAL_RCC_ClockConfig+0x280>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fe fade 	bl	800112c <HAL_InitTick>
 8002b70:	4603      	mov	r3, r0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	58004000 	.word	0x58004000
 8002b80:	20000004 	.word	0x20000004
 8002b84:	20000008 	.word	0x20000008

08002b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b88:	b590      	push	{r4, r7, lr}
 8002b8a:	b087      	sub	sp, #28
 8002b8c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b96:	f7ff f9cc 	bl	8001f32 <LL_RCC_GetSysClkSource>
 8002b9a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b9c:	f7ff fab5 	bl	800210a <LL_RCC_PLL_GetMainSource>
 8002ba0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x2c>
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2b0c      	cmp	r3, #12
 8002bac:	d139      	bne.n	8002c22 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d136      	bne.n	8002c22 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002bb4:	f7ff f96f 	bl	8001e96 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d115      	bne.n	8002bea <HAL_RCC_GetSysClockFreq+0x62>
 8002bbe:	f7ff f96a 	bl	8001e96 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d106      	bne.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x4e>
 8002bc8:	f7ff f975 	bl	8001eb6 <LL_RCC_MSI_GetRange>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	0a1b      	lsrs	r3, r3, #8
 8002bd0:	f003 030f 	and.w	r3, r3, #15
 8002bd4:	e005      	b.n	8002be2 <HAL_RCC_GetSysClockFreq+0x5a>
 8002bd6:	f7ff f979 	bl	8001ecc <LL_RCC_MSI_GetRangeAfterStandby>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	0a1b      	lsrs	r3, r3, #8
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	4a36      	ldr	r2, [pc, #216]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x134>)
 8002be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be8:	e014      	b.n	8002c14 <HAL_RCC_GetSysClockFreq+0x8c>
 8002bea:	f7ff f954 	bl	8001e96 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d106      	bne.n	8002c02 <HAL_RCC_GetSysClockFreq+0x7a>
 8002bf4:	f7ff f95f 	bl	8001eb6 <LL_RCC_MSI_GetRange>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	091b      	lsrs	r3, r3, #4
 8002bfc:	f003 030f 	and.w	r3, r3, #15
 8002c00:	e005      	b.n	8002c0e <HAL_RCC_GetSysClockFreq+0x86>
 8002c02:	f7ff f963 	bl	8001ecc <LL_RCC_MSI_GetRangeAfterStandby>
 8002c06:	4603      	mov	r3, r0
 8002c08:	091b      	lsrs	r3, r3, #4
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	4a2b      	ldr	r2, [pc, #172]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x134>)
 8002c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c14:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d115      	bne.n	8002c48 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c20:	e012      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d102      	bne.n	8002c2e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c28:	4b25      	ldr	r3, [pc, #148]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	e00c      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d109      	bne.n	8002c48 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002c34:	f7ff f842 	bl	8001cbc <LL_RCC_HSE_IsEnabledDiv2>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d102      	bne.n	8002c44 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002c3e:	4b20      	ldr	r3, [pc, #128]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	e001      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002c44:	4b1f      	ldr	r3, [pc, #124]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002c46:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c48:	f7ff f973 	bl	8001f32 <LL_RCC_GetSysClkSource>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b0c      	cmp	r3, #12
 8002c50:	d12f      	bne.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002c52:	f7ff fa5a 	bl	800210a <LL_RCC_PLL_GetMainSource>
 8002c56:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d003      	beq.n	8002c66 <HAL_RCC_GetSysClockFreq+0xde>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d003      	beq.n	8002c6c <HAL_RCC_GetSysClockFreq+0xe4>
 8002c64:	e00d      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002c66:	4b16      	ldr	r3, [pc, #88]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c68:	60fb      	str	r3, [r7, #12]
        break;
 8002c6a:	e00d      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002c6c:	f7ff f826 	bl	8001cbc <LL_RCC_HSE_IsEnabledDiv2>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d102      	bne.n	8002c7c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002c76:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c78:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002c7a:	e005      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002c7c:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002c7e:	60fb      	str	r3, [r7, #12]
        break;
 8002c80:	e002      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	60fb      	str	r3, [r7, #12]
        break;
 8002c86:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002c88:	f7ff fa1d 	bl	80020c6 <LL_RCC_PLL_GetN>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	fb03 f402 	mul.w	r4, r3, r2
 8002c94:	f7ff fa2e 	bl	80020f4 <LL_RCC_PLL_GetDivider>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	091b      	lsrs	r3, r3, #4
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	fbb4 f4f3 	udiv	r4, r4, r3
 8002ca2:	f7ff fa1c 	bl	80020de <LL_RCC_PLL_GetR>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	0f5b      	lsrs	r3, r3, #29
 8002caa:	3301      	adds	r3, #1
 8002cac:	fbb4 f3f3 	udiv	r3, r4, r3
 8002cb0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002cb2:	697b      	ldr	r3, [r7, #20]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	371c      	adds	r7, #28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd90      	pop	{r4, r7, pc}
 8002cbc:	08009fe8 	.word	0x08009fe8
 8002cc0:	00f42400 	.word	0x00f42400
 8002cc4:	01e84800 	.word	0x01e84800

08002cc8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc8:	b598      	push	{r3, r4, r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002ccc:	f7ff ff5c 	bl	8002b88 <HAL_RCC_GetSysClockFreq>
 8002cd0:	4604      	mov	r4, r0
 8002cd2:	f7ff f99d 	bl	8002010 <LL_RCC_GetAHBPrescaler>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	091b      	lsrs	r3, r3, #4
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	4a03      	ldr	r2, [pc, #12]	; (8002cec <HAL_RCC_GetHCLKFreq+0x24>)
 8002ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	bd98      	pop	{r3, r4, r7, pc}
 8002cec:	08009f88 	.word	0x08009f88

08002cf0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cf0:	b598      	push	{r3, r4, r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002cf4:	f7ff ffe8 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002cf8:	4604      	mov	r4, r0
 8002cfa:	f7ff f9a1 	bl	8002040 <LL_RCC_GetAPB1Prescaler>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	0a1b      	lsrs	r3, r3, #8
 8002d02:	4a03      	ldr	r2, [pc, #12]	; (8002d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d08:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	bd98      	pop	{r3, r4, r7, pc}
 8002d10:	08009fc8 	.word	0x08009fc8

08002d14 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d14:	b598      	push	{r3, r4, r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002d18:	f7ff ffd6 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002d1c:	4604      	mov	r4, r0
 8002d1e:	f7ff f99a 	bl	8002056 <LL_RCC_GetAPB2Prescaler>
 8002d22:	4603      	mov	r3, r0
 8002d24:	0adb      	lsrs	r3, r3, #11
 8002d26:	4a03      	ldr	r2, [pc, #12]	; (8002d34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d2c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	bd98      	pop	{r3, r4, r7, pc}
 8002d34:	08009fc8 	.word	0x08009fc8

08002d38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002d38:	b590      	push	{r4, r7, lr}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	091b      	lsrs	r3, r3, #4
 8002d44:	f003 030f 	and.w	r3, r3, #15
 8002d48:	4a10      	ldr	r2, [pc, #64]	; (8002d8c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002d50:	f7ff f969 	bl	8002026 <LL_RCC_GetAHB3Prescaler>
 8002d54:	4603      	mov	r3, r0
 8002d56:	091b      	lsrs	r3, r3, #4
 8002d58:	f003 030f 	and.w	r3, r3, #15
 8002d5c:	4a0c      	ldr	r2, [pc, #48]	; (8002d90 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d68:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	4a09      	ldr	r2, [pc, #36]	; (8002d94 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d72:	0c9c      	lsrs	r4, r3, #18
 8002d74:	f7fe ff68 	bl	8001c48 <HAL_PWREx_GetVoltageRange>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	f000 f80b 	bl	8002d98 <RCC_SetFlashLatency>
 8002d82:	4603      	mov	r3, r0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd90      	pop	{r4, r7, pc}
 8002d8c:	08009fe8 	.word	0x08009fe8
 8002d90:	08009f88 	.word	0x08009f88
 8002d94:	431bde83 	.word	0x431bde83

08002d98 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08e      	sub	sp, #56	; 0x38
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002da2:	4a3c      	ldr	r2, [pc, #240]	; (8002e94 <RCC_SetFlashLatency+0xfc>)
 8002da4:	f107 0320 	add.w	r3, r7, #32
 8002da8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002dac:	6018      	str	r0, [r3, #0]
 8002dae:	3304      	adds	r3, #4
 8002db0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002db2:	4a39      	ldr	r2, [pc, #228]	; (8002e98 <RCC_SetFlashLatency+0x100>)
 8002db4:	f107 0318 	add.w	r3, r7, #24
 8002db8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002dbc:	6018      	str	r0, [r3, #0]
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002dc2:	4a36      	ldr	r2, [pc, #216]	; (8002e9c <RCC_SetFlashLatency+0x104>)
 8002dc4:	f107 030c 	add.w	r3, r7, #12
 8002dc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002dca:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002dce:	2300      	movs	r3, #0
 8002dd0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dd8:	d11d      	bne.n	8002e16 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002dda:	2300      	movs	r3, #0
 8002ddc:	633b      	str	r3, [r7, #48]	; 0x30
 8002dde:	e016      	b.n	8002e0e <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002de8:	4413      	add	r3, r2
 8002dea:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002dee:	461a      	mov	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d808      	bhi.n	8002e08 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002dfe:	4413      	add	r3, r2
 8002e00:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002e04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e06:	e023      	b.n	8002e50 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	633b      	str	r3, [r7, #48]	; 0x30
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d9e5      	bls.n	8002de0 <RCC_SetFlashLatency+0x48>
 8002e14:	e01c      	b.n	8002e50 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002e16:	2300      	movs	r3, #0
 8002e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e1a:	e016      	b.n	8002e4a <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002e24:	4413      	add	r3, r2
 8002e26:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d808      	bhi.n	8002e44 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002e40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e42:	e005      	b.n	8002e50 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e46:	3301      	adds	r3, #1
 8002e48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d9e5      	bls.n	8002e1c <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e50:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <RCC_SetFlashLatency+0x108>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f023 0207 	bic.w	r2, r3, #7
 8002e58:	4911      	ldr	r1, [pc, #68]	; (8002ea0 <RCC_SetFlashLatency+0x108>)
 8002e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002e60:	f7fd fe5f 	bl	8000b22 <HAL_GetTick>
 8002e64:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002e66:	e008      	b.n	8002e7a <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e68:	f7fd fe5b 	bl	8000b22 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e007      	b.n	8002e8a <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002e7a:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <RCC_SetFlashLatency+0x108>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d1ef      	bne.n	8002e68 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3738      	adds	r7, #56	; 0x38
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	08009f48 	.word	0x08009f48
 8002e98:	08009f50 	.word	0x08009f50
 8002e9c:	08009f58 	.word	0x08009f58
 8002ea0:	58004000 	.word	0x58004000

08002ea4 <LL_RCC_LSE_IsReady>:
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d101      	bne.n	8002ebc <LL_RCC_LSE_IsReady+0x18>
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e000      	b.n	8002ebe <LL_RCC_LSE_IsReady+0x1a>
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <LL_RCC_SetUSARTClockSource>:
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	0c1b      	lsrs	r3, r3, #16
 8002eda:	43db      	mvns	r3, r3
 8002edc:	401a      	ands	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr

08002ef6 <LL_RCC_SetI2SClockSource>:
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr

08002f20 <LL_RCC_SetLPUARTClockSource>:
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f30:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr

08002f4a <LL_RCC_SetI2CClockSource>:
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f56:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	091b      	lsrs	r3, r3, #4
 8002f5e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002f62:	43db      	mvns	r3, r3
 8002f64:	401a      	ands	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002f6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr

08002f82 <LL_RCC_SetLPTIMClockSource>:
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	041b      	lsls	r3, r3, #16
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	401a      	ands	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	041b      	lsls	r3, r3, #16
 8002fa0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr

08002fb4 <LL_RCC_SetRNGClockSource>:
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002fc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bc80      	pop	{r7}
 8002fdc:	4770      	bx	lr

08002fde <LL_RCC_SetADCClockSource>:
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ff2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr

08003008 <LL_RCC_SetRTCClockSource>:
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003018:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800301c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr

08003032 <LL_RCC_GetRTCClockSource>:
{
 8003032:	b480      	push	{r7}
 8003034:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800303a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003042:	4618      	mov	r0, r3
 8003044:	46bd      	mov	sp, r7
 8003046:	bc80      	pop	{r7}
 8003048:	4770      	bx	lr

0800304a <LL_RCC_ForceBackupDomainReset>:
{
 800304a:	b480      	push	{r7}
 800304c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800304e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003056:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800305a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003062:	bf00      	nop
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr

0800306a <LL_RCC_ReleaseBackupDomainReset>:
{
 800306a:	b480      	push	{r7}
 800306c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800306e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003076:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800307a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800307e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003082:	bf00      	nop
 8003084:	46bd      	mov	sp, r7
 8003086:	bc80      	pop	{r7}
 8003088:	4770      	bx	lr
	...

0800308c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003098:	2300      	movs	r3, #0
 800309a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800309c:	2300      	movs	r3, #0
 800309e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d058      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80030ac:	f7fe fdbe 	bl	8001c2c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030b0:	f7fd fd37 	bl	8000b22 <HAL_GetTick>
 80030b4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80030b6:	e009      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b8:	f7fd fd33 	bl	8000b22 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d902      	bls.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	74fb      	strb	r3, [r7, #19]
        break;
 80030ca:	e006      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80030cc:	4b7b      	ldr	r3, [pc, #492]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030d8:	d1ee      	bne.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80030da:	7cfb      	ldrb	r3, [r7, #19]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d13c      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80030e0:	f7ff ffa7 	bl	8003032 <LL_RCC_GetRTCClockSource>
 80030e4:	4602      	mov	r2, r0
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d00f      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030fa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030fc:	f7ff ffa5 	bl	800304a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003100:	f7ff ffb3 	bl	800306a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003104:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d014      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003118:	f7fd fd03 	bl	8000b22 <HAL_GetTick>
 800311c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800311e:	e00b      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003120:	f7fd fcff 	bl	8000b22 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	f241 3288 	movw	r2, #5000	; 0x1388
 800312e:	4293      	cmp	r3, r2
 8003130:	d902      	bls.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	74fb      	strb	r3, [r7, #19]
            break;
 8003136:	e004      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003138:	f7ff feb4 	bl	8002ea4 <LL_RCC_LSE_IsReady>
 800313c:	4603      	mov	r3, r0
 800313e:	2b01      	cmp	r3, #1
 8003140:	d1ee      	bne.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003142:	7cfb      	ldrb	r3, [r7, #19]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d105      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff ff5b 	bl	8003008 <LL_RCC_SetRTCClockSource>
 8003152:	e004      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003154:	7cfb      	ldrb	r3, [r7, #19]
 8003156:	74bb      	strb	r3, [r7, #18]
 8003158:	e001      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800315a:	7cfb      	ldrb	r3, [r7, #19]
 800315c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d004      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff fea9 	bl	8002ec6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d004      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff fe9e 	bl	8002ec6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	2b00      	cmp	r3, #0
 8003194:	d004      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff fec0 	bl	8002f20 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d004      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff fee6 	bl	8002f82 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d004      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff fedb 	bl	8002f82 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d004      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fed0 	bl	8002f82 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d004      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fea9 	bl	8002f4a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003200:	2b00      	cmp	r3, #0
 8003202:	d004      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff fe9e 	bl	8002f4a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003216:	2b00      	cmp	r3, #0
 8003218:	d004      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff fe93 	bl	8002f4a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0310 	and.w	r3, r3, #16
 800322c:	2b00      	cmp	r3, #0
 800322e:	d011      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fe5e 	bl	8002ef6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003242:	d107      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800324e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003252:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d010      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff fea5 	bl	8002fb4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	2b00      	cmp	r3, #0
 8003270:	d107      	bne.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800327c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003280:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d011      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff fea3 	bl	8002fde <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032a0:	d107      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80032a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032b0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80032b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	58000400 	.word	0x58000400

080032c0 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80032c8:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80032d0:	4904      	ldr	r1, [pc, #16]	; (80032e4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	608b      	str	r3, [r1, #8]
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	58000400 	.word	0x58000400

080032e8 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80032ec:	4b05      	ldr	r3, [pc, #20]	; (8003304 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f2:	4a04      	ldr	r2, [pc, #16]	; (8003304 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80032f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80032fc:	bf00      	nop
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr
 8003304:	58000400 	.word	0x58000400

08003308 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800330e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003312:	4a04      	ldr	r2, [pc, #16]	; (8003324 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003314:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800331c:	bf00      	nop
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr
 8003324:	58000400 	.word	0x58000400

08003328 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800332c:	4b03      	ldr	r3, [pc, #12]	; (800333c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800332e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003332:	619a      	str	r2, [r3, #24]
}
 8003334:	bf00      	nop
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr
 800333c:	58000400 	.word	0x58000400

08003340 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8003344:	4b06      	ldr	r3, [pc, #24]	; (8003360 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b02      	cmp	r3, #2
 800334e:	d101      	bne.n	8003354 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8003350:	2301      	movs	r3, #1
 8003352:	e000      	b.n	8003356 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	58000400 	.word	0x58000400

08003364 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8003368:	4b06      	ldr	r3, [pc, #24]	; (8003384 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b04      	cmp	r3, #4
 8003372:	d101      	bne.n	8003378 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	bc80      	pop	{r7}
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	58000400 	.word	0x58000400

08003388 <LL_RCC_RF_DisableReset>:
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800338c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003390:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003394:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003398:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800339c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80033a0:	bf00      	nop
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bc80      	pop	{r7}
 80033a6:	4770      	bx	lr

080033a8 <LL_RCC_IsRFUnderReset>:
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80033ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033bc:	d101      	bne.n	80033c2 <LL_RCC_IsRFUnderReset+0x1a>
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <LL_RCC_IsRFUnderReset+0x1c>
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr

080033cc <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80033d4:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <LL_EXTI_EnableIT_32_63+0x24>)
 80033d6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80033da:	4905      	ldr	r1, [pc, #20]	; (80033f0 <LL_EXTI_EnableIT_32_63+0x24>)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	58000800 	.word	0x58000800

080033f4 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d103      	bne.n	800340a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	73fb      	strb	r3, [r7, #15]
    return status;
 8003406:	7bfb      	ldrb	r3, [r7, #15]
 8003408:	e04b      	b.n	80034a2 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 800340a:	2300      	movs	r3, #0
 800340c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	799b      	ldrb	r3, [r3, #6]
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	d105      	bne.n	8003424 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7fd fb66 	bl	8000af0 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 800342a:	f7ff ffad 	bl	8003388 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800342e:	4b1f      	ldr	r3, [pc, #124]	; (80034ac <HAL_SUBGHZ_Init+0xb8>)
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	4613      	mov	r3, r2
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	1a9b      	subs	r3, r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	0cdb      	lsrs	r3, r3, #19
 800343c:	2264      	movs	r2, #100	; 0x64
 800343e:	fb02 f303 	mul.w	r3, r2, r3
 8003442:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d105      	bne.n	8003456 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	609a      	str	r2, [r3, #8]
      break;
 8003454:	e007      	b.n	8003466 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	3b01      	subs	r3, #1
 800345a:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 800345c:	f7ff ffa4 	bl	80033a8 <LL_RCC_IsRFUnderReset>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1ee      	bne.n	8003444 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8003466:	f7ff ff3f 	bl	80032e8 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800346a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800346e:	f7ff ffad 	bl	80033cc <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8003472:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003476:	f7ff ff23 	bl	80032c0 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800347a:	f7ff ff55 	bl	8003328 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800347e:	7bfb      	ldrb	r3, [r7, #15]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10a      	bne.n	800349a <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f000 faad 	bl	80039e8 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	719a      	strb	r2, [r3, #6]

  return status;
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000004 	.word	0x20000004

080034b0 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	607a      	str	r2, [r7, #4]
 80034ba:	461a      	mov	r2, r3
 80034bc:	460b      	mov	r3, r1
 80034be:	817b      	strh	r3, [r7, #10]
 80034c0:	4613      	mov	r3, r2
 80034c2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	799b      	ldrb	r3, [r3, #6]
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d14a      	bne.n	8003564 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	795b      	ldrb	r3, [r3, #5]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d101      	bne.n	80034da <HAL_SUBGHZ_WriteRegisters+0x2a>
 80034d6:	2302      	movs	r3, #2
 80034d8:	e045      	b.n	8003566 <HAL_SUBGHZ_WriteRegisters+0xb6>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2201      	movs	r2, #1
 80034de:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2202      	movs	r2, #2
 80034e4:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 fb4c 	bl	8003b84 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80034ec:	f7ff ff0c 	bl	8003308 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80034f0:	210d      	movs	r1, #13
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 fa98 	bl	8003a28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80034f8:	897b      	ldrh	r3, [r7, #10]
 80034fa:	0a1b      	lsrs	r3, r3, #8
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	4619      	mov	r1, r3
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 fa90 	bl	8003a28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8003508:	897b      	ldrh	r3, [r7, #10]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	4619      	mov	r1, r3
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 fa8a 	bl	8003a28 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003514:	2300      	movs	r3, #0
 8003516:	82bb      	strh	r3, [r7, #20]
 8003518:	e00a      	b.n	8003530 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800351a:	8abb      	ldrh	r3, [r7, #20]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	4413      	add	r3, r2
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	4619      	mov	r1, r3
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 fa7f 	bl	8003a28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800352a:	8abb      	ldrh	r3, [r7, #20]
 800352c:	3301      	adds	r3, #1
 800352e:	82bb      	strh	r3, [r7, #20]
 8003530:	8aba      	ldrh	r2, [r7, #20]
 8003532:	893b      	ldrh	r3, [r7, #8]
 8003534:	429a      	cmp	r2, r3
 8003536:	d3f0      	bcc.n	800351a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003538:	f7ff fed6 	bl	80032e8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 fb45 	bl	8003bcc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	75fb      	strb	r3, [r7, #23]
 800354e:	e001      	b.n	8003554 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003550:	2300      	movs	r3, #0
 8003552:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2201      	movs	r2, #1
 8003558:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	715a      	strb	r2, [r3, #5]

    return status;
 8003560:	7dfb      	ldrb	r3, [r7, #23]
 8003562:	e000      	b.n	8003566 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003564:	2302      	movs	r3, #2
  }
}
 8003566:	4618      	mov	r0, r3
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b088      	sub	sp, #32
 8003572:	af00      	add	r7, sp, #0
 8003574:	60f8      	str	r0, [r7, #12]
 8003576:	607a      	str	r2, [r7, #4]
 8003578:	461a      	mov	r2, r3
 800357a:	460b      	mov	r3, r1
 800357c:	817b      	strh	r3, [r7, #10]
 800357e:	4613      	mov	r3, r2
 8003580:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	799b      	ldrb	r3, [r3, #6]
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b01      	cmp	r3, #1
 800358e:	d14a      	bne.n	8003626 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	795b      	ldrb	r3, [r3, #5]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d101      	bne.n	800359c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8003598:	2302      	movs	r3, #2
 800359a:	e045      	b.n	8003628 <HAL_SUBGHZ_ReadRegisters+0xba>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2201      	movs	r2, #1
 80035a0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 faee 	bl	8003b84 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80035a8:	f7ff feae 	bl	8003308 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80035ac:	211d      	movs	r1, #29
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 fa3a 	bl	8003a28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80035b4:	897b      	ldrh	r3, [r7, #10]
 80035b6:	0a1b      	lsrs	r3, r3, #8
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	4619      	mov	r1, r3
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 fa32 	bl	8003a28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80035c4:	897b      	ldrh	r3, [r7, #10]
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	4619      	mov	r1, r3
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 fa2c 	bl	8003a28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80035d0:	2100      	movs	r1, #0
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 fa28 	bl	8003a28 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80035d8:	2300      	movs	r3, #0
 80035da:	82fb      	strh	r3, [r7, #22]
 80035dc:	e009      	b.n	80035f2 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80035de:	69b9      	ldr	r1, [r7, #24]
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 fa77 	bl	8003ad4 <SUBGHZSPI_Receive>
      pData++;
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	3301      	adds	r3, #1
 80035ea:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80035ec:	8afb      	ldrh	r3, [r7, #22]
 80035ee:	3301      	adds	r3, #1
 80035f0:	82fb      	strh	r3, [r7, #22]
 80035f2:	8afa      	ldrh	r2, [r7, #22]
 80035f4:	893b      	ldrh	r3, [r7, #8]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d3f1      	bcc.n	80035de <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80035fa:	f7ff fe75 	bl	80032e8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 fae4 	bl	8003bcc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	77fb      	strb	r3, [r7, #31]
 8003610:	e001      	b.n	8003616 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2201      	movs	r2, #1
 800361a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	715a      	strb	r2, [r3, #5]

    return status;
 8003622:	7ffb      	ldrb	r3, [r7, #31]
 8003624:	e000      	b.n	8003628 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003626:	2302      	movs	r3, #2
  }
}
 8003628:	4618      	mov	r0, r3
 800362a:	3720      	adds	r7, #32
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	607a      	str	r2, [r7, #4]
 800363a:	461a      	mov	r2, r3
 800363c:	460b      	mov	r3, r1
 800363e:	72fb      	strb	r3, [r7, #11]
 8003640:	4613      	mov	r3, r2
 8003642:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	799b      	ldrb	r3, [r3, #6]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b01      	cmp	r3, #1
 800364c:	d14a      	bne.n	80036e4 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	795b      	ldrb	r3, [r3, #5]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d101      	bne.n	800365a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8003656:	2302      	movs	r3, #2
 8003658:	e045      	b.n	80036e6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2201      	movs	r2, #1
 800365e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 fa8f 	bl	8003b84 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003666:	7afb      	ldrb	r3, [r7, #11]
 8003668:	2b84      	cmp	r3, #132	; 0x84
 800366a:	d002      	beq.n	8003672 <HAL_SUBGHZ_ExecSetCmd+0x42>
 800366c:	7afb      	ldrb	r3, [r7, #11]
 800366e:	2b94      	cmp	r3, #148	; 0x94
 8003670:	d103      	bne.n	800367a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2201      	movs	r2, #1
 8003676:	711a      	strb	r2, [r3, #4]
 8003678:	e002      	b.n	8003680 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003680:	f7ff fe42 	bl	8003308 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003684:	7afb      	ldrb	r3, [r7, #11]
 8003686:	4619      	mov	r1, r3
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 f9cd 	bl	8003a28 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800368e:	2300      	movs	r3, #0
 8003690:	82bb      	strh	r3, [r7, #20]
 8003692:	e00a      	b.n	80036aa <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003694:	8abb      	ldrh	r3, [r7, #20]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	4413      	add	r3, r2
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	4619      	mov	r1, r3
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f9c2 	bl	8003a28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80036a4:	8abb      	ldrh	r3, [r7, #20]
 80036a6:	3301      	adds	r3, #1
 80036a8:	82bb      	strh	r3, [r7, #20]
 80036aa:	8aba      	ldrh	r2, [r7, #20]
 80036ac:	893b      	ldrh	r3, [r7, #8]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d3f0      	bcc.n	8003694 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80036b2:	f7ff fe19 	bl	80032e8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80036b6:	7afb      	ldrb	r3, [r7, #11]
 80036b8:	2b84      	cmp	r3, #132	; 0x84
 80036ba:	d002      	beq.n	80036c2 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 fa85 	bl	8003bcc <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	75fb      	strb	r3, [r7, #23]
 80036ce:	e001      	b.n	80036d4 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2201      	movs	r2, #1
 80036d8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	715a      	strb	r2, [r3, #5]

    return status;
 80036e0:	7dfb      	ldrb	r3, [r7, #23]
 80036e2:	e000      	b.n	80036e6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80036e4:	2302      	movs	r3, #2
  }
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b088      	sub	sp, #32
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	60f8      	str	r0, [r7, #12]
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	461a      	mov	r2, r3
 80036fa:	460b      	mov	r3, r1
 80036fc:	72fb      	strb	r3, [r7, #11]
 80036fe:	4613      	mov	r3, r2
 8003700:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	799b      	ldrb	r3, [r3, #6]
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b01      	cmp	r3, #1
 800370e:	d13d      	bne.n	800378c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	795b      	ldrb	r3, [r3, #5]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8003718:	2302      	movs	r3, #2
 800371a:	e038      	b.n	800378e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2201      	movs	r2, #1
 8003720:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 fa2e 	bl	8003b84 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003728:	f7ff fdee 	bl	8003308 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800372c:	7afb      	ldrb	r3, [r7, #11]
 800372e:	4619      	mov	r1, r3
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 f979 	bl	8003a28 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003736:	2100      	movs	r1, #0
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f975 	bl	8003a28 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800373e:	2300      	movs	r3, #0
 8003740:	82fb      	strh	r3, [r7, #22]
 8003742:	e009      	b.n	8003758 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003744:	69b9      	ldr	r1, [r7, #24]
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 f9c4 	bl	8003ad4 <SUBGHZSPI_Receive>
      pData++;
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	3301      	adds	r3, #1
 8003750:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003752:	8afb      	ldrh	r3, [r7, #22]
 8003754:	3301      	adds	r3, #1
 8003756:	82fb      	strh	r3, [r7, #22]
 8003758:	8afa      	ldrh	r2, [r7, #22]
 800375a:	893b      	ldrh	r3, [r7, #8]
 800375c:	429a      	cmp	r2, r3
 800375e:	d3f1      	bcc.n	8003744 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003760:	f7ff fdc2 	bl	80032e8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 fa31 	bl	8003bcc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	77fb      	strb	r3, [r7, #31]
 8003776:	e001      	b.n	800377c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2201      	movs	r2, #1
 8003780:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	715a      	strb	r2, [r3, #5]

    return status;
 8003788:	7ffb      	ldrb	r3, [r7, #31]
 800378a:	e000      	b.n	800378e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800378c:	2302      	movs	r3, #2
  }
}
 800378e:	4618      	mov	r0, r3
 8003790:	3720      	adds	r7, #32
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b086      	sub	sp, #24
 800379a:	af00      	add	r7, sp, #0
 800379c:	60f8      	str	r0, [r7, #12]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	461a      	mov	r2, r3
 80037a2:	460b      	mov	r3, r1
 80037a4:	72fb      	strb	r3, [r7, #11]
 80037a6:	4613      	mov	r3, r2
 80037a8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	799b      	ldrb	r3, [r3, #6]
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d13e      	bne.n	8003832 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	795b      	ldrb	r3, [r3, #5]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_SUBGHZ_WriteBuffer+0x2a>
 80037bc:	2302      	movs	r3, #2
 80037be:	e039      	b.n	8003834 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2201      	movs	r2, #1
 80037c4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 f9dc 	bl	8003b84 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80037cc:	f7ff fd9c 	bl	8003308 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80037d0:	210e      	movs	r1, #14
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 f928 	bl	8003a28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80037d8:	7afb      	ldrb	r3, [r7, #11]
 80037da:	4619      	mov	r1, r3
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f923 	bl	8003a28 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80037e2:	2300      	movs	r3, #0
 80037e4:	82bb      	strh	r3, [r7, #20]
 80037e6:	e00a      	b.n	80037fe <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80037e8:	8abb      	ldrh	r3, [r7, #20]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	4413      	add	r3, r2
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	4619      	mov	r1, r3
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 f918 	bl	8003a28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80037f8:	8abb      	ldrh	r3, [r7, #20]
 80037fa:	3301      	adds	r3, #1
 80037fc:	82bb      	strh	r3, [r7, #20]
 80037fe:	8aba      	ldrh	r2, [r7, #20]
 8003800:	893b      	ldrh	r3, [r7, #8]
 8003802:	429a      	cmp	r2, r3
 8003804:	d3f0      	bcc.n	80037e8 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003806:	f7ff fd6f 	bl	80032e8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 f9de 	bl	8003bcc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	75fb      	strb	r3, [r7, #23]
 800381c:	e001      	b.n	8003822 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2201      	movs	r2, #1
 8003826:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	715a      	strb	r2, [r3, #5]

    return status;
 800382e:	7dfb      	ldrb	r3, [r7, #23]
 8003830:	e000      	b.n	8003834 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003832:	2302      	movs	r3, #2
  }
}
 8003834:	4618      	mov	r0, r3
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	607a      	str	r2, [r7, #4]
 8003846:	461a      	mov	r2, r3
 8003848:	460b      	mov	r3, r1
 800384a:	72fb      	strb	r3, [r7, #11]
 800384c:	4613      	mov	r3, r2
 800384e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	799b      	ldrb	r3, [r3, #6]
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b01      	cmp	r3, #1
 800385c:	d141      	bne.n	80038e2 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	795b      	ldrb	r3, [r3, #5]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_SUBGHZ_ReadBuffer+0x2e>
 8003866:	2302      	movs	r3, #2
 8003868:	e03c      	b.n	80038e4 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f000 f987 	bl	8003b84 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003876:	f7ff fd47 	bl	8003308 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800387a:	211e      	movs	r1, #30
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 f8d3 	bl	8003a28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8003882:	7afb      	ldrb	r3, [r7, #11]
 8003884:	4619      	mov	r1, r3
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 f8ce 	bl	8003a28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800388c:	2100      	movs	r1, #0
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 f8ca 	bl	8003a28 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003894:	2300      	movs	r3, #0
 8003896:	82fb      	strh	r3, [r7, #22]
 8003898:	e009      	b.n	80038ae <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800389a:	69b9      	ldr	r1, [r7, #24]
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 f919 	bl	8003ad4 <SUBGHZSPI_Receive>
      pData++;
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	3301      	adds	r3, #1
 80038a6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80038a8:	8afb      	ldrh	r3, [r7, #22]
 80038aa:	3301      	adds	r3, #1
 80038ac:	82fb      	strh	r3, [r7, #22]
 80038ae:	8afa      	ldrh	r2, [r7, #22]
 80038b0:	893b      	ldrh	r3, [r7, #8]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d3f1      	bcc.n	800389a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80038b6:	f7ff fd17 	bl	80032e8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 f986 	bl	8003bcc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	77fb      	strb	r3, [r7, #31]
 80038cc:	e001      	b.n	80038d2 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2201      	movs	r2, #1
 80038d6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	715a      	strb	r2, [r3, #5]

    return status;
 80038de:	7ffb      	ldrb	r3, [r7, #31]
 80038e0:	e000      	b.n	80038e4 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80038e2:	2302      	movs	r3, #2
  }
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3720      	adds	r7, #32
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 80038f4:	2300      	movs	r3, #0
 80038f6:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 80038f8:	f107 020c 	add.w	r2, r7, #12
 80038fc:	2302      	movs	r3, #2
 80038fe:	2112      	movs	r1, #18
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff fef4 	bl	80036ee <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 8003906:	7b3b      	ldrb	r3, [r7, #12]
 8003908:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 800390a:	89fb      	ldrh	r3, [r7, #14]
 800390c:	021b      	lsls	r3, r3, #8
 800390e:	b21a      	sxth	r2, r3
 8003910:	7b7b      	ldrb	r3, [r7, #13]
 8003912:	b21b      	sxth	r3, r3
 8003914:	4313      	orrs	r3, r2
 8003916:	b21b      	sxth	r3, r3
 8003918:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800391a:	89fb      	ldrh	r3, [r7, #14]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f005 f9ff 	bl	8008d28 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800392a:	89fb      	ldrh	r3, [r7, #14]
 800392c:	085b      	lsrs	r3, r3, #1
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f005 fa04 	bl	8008d44 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800393c:	89fb      	ldrh	r3, [r7, #14]
 800393e:	089b      	lsrs	r3, r3, #2
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f005 fa53 	bl	8008df4 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800394e:	89fb      	ldrh	r3, [r7, #14]
 8003950:	08db      	lsrs	r3, r3, #3
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f005 fa58 	bl	8008e10 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8003960:	89fb      	ldrh	r3, [r7, #14]
 8003962:	091b      	lsrs	r3, r3, #4
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b00      	cmp	r3, #0
 800396a:	d002      	beq.n	8003972 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f005 fa5d 	bl	8008e2c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8003972:	89fb      	ldrh	r3, [r7, #14]
 8003974:	095b      	lsrs	r3, r3, #5
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f005 fa2a 	bl	8008dd8 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8003984:	89fb      	ldrh	r3, [r7, #14]
 8003986:	099b      	lsrs	r3, r3, #6
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f005 f9e5 	bl	8008d60 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8003996:	89fb      	ldrh	r3, [r7, #14]
 8003998:	09db      	lsrs	r3, r3, #7
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00e      	beq.n	80039c0 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80039a2:	89fb      	ldrh	r3, [r7, #14]
 80039a4:	0a1b      	lsrs	r3, r3, #8
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d004      	beq.n	80039b8 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80039ae:	2101      	movs	r1, #1
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f005 f9e3 	bl	8008d7c <HAL_SUBGHZ_CADStatusCallback>
 80039b6:	e003      	b.n	80039c0 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80039b8:	2100      	movs	r1, #0
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f005 f9de 	bl	8008d7c <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80039c0:	89fb      	ldrh	r3, [r7, #14]
 80039c2:	0a5b      	lsrs	r3, r3, #9
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f005 f9f3 	bl	8008db8 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 80039d2:	f107 020c 	add.w	r2, r7, #12
 80039d6:	2302      	movs	r3, #2
 80039d8:	2102      	movs	r1, #2
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7ff fe28 	bl	8003630 <HAL_SUBGHZ_ExecSetCmd>
}
 80039e0:	bf00      	nop
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80039f0:	4b0c      	ldr	r3, [pc, #48]	; (8003a24 <SUBGHZSPI_Init+0x3c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a0b      	ldr	r2, [pc, #44]	; (8003a24 <SUBGHZSPI_Init+0x3c>)
 80039f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039fa:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80039fc:	4a09      	ldr	r2, [pc, #36]	; (8003a24 <SUBGHZSPI_Init+0x3c>)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8003a04:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8003a06:	4b07      	ldr	r3, [pc, #28]	; (8003a24 <SUBGHZSPI_Init+0x3c>)
 8003a08:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8003a0c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003a0e:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <SUBGHZSPI_Init+0x3c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a04      	ldr	r2, [pc, #16]	; (8003a24 <SUBGHZSPI_Init+0x3c>)
 8003a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a18:	6013      	str	r3, [r2, #0]
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr
 8003a24:	58010000 	.word	0x58010000

08003a28 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003a38:	4b23      	ldr	r3, [pc, #140]	; (8003ac8 <SUBGHZSPI_Transmit+0xa0>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	1a9b      	subs	r3, r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	0cdb      	lsrs	r3, r3, #19
 8003a46:	2264      	movs	r2, #100	; 0x64
 8003a48:	fb02 f303 	mul.w	r3, r2, r3
 8003a4c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d105      	bne.n	8003a60 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	609a      	str	r2, [r3, #8]
      break;
 8003a5e:	e008      	b.n	8003a72 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003a66:	4b19      	ldr	r3, [pc, #100]	; (8003acc <SUBGHZSPI_Transmit+0xa4>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d1ed      	bne.n	8003a4e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003a72:	4b17      	ldr	r3, [pc, #92]	; (8003ad0 <SUBGHZSPI_Transmit+0xa8>)
 8003a74:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	78fa      	ldrb	r2, [r7, #3]
 8003a7a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003a7c:	4b12      	ldr	r3, [pc, #72]	; (8003ac8 <SUBGHZSPI_Transmit+0xa0>)
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	4613      	mov	r3, r2
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	1a9b      	subs	r3, r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	0cdb      	lsrs	r3, r3, #19
 8003a8a:	2264      	movs	r2, #100	; 0x64
 8003a8c:	fb02 f303 	mul.w	r3, r2, r3
 8003a90:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d105      	bne.n	8003aa4 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	609a      	str	r2, [r3, #8]
      break;
 8003aa2:	e008      	b.n	8003ab6 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003aaa:	4b08      	ldr	r3, [pc, #32]	; (8003acc <SUBGHZSPI_Transmit+0xa4>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d1ed      	bne.n	8003a92 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8003ab6:	4b05      	ldr	r3, [pc, #20]	; (8003acc <SUBGHZSPI_Transmit+0xa4>)
 8003ab8:	68db      	ldr	r3, [r3, #12]

  return status;
 8003aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	371c      	adds	r7, #28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	20000004 	.word	0x20000004
 8003acc:	58010000 	.word	0x58010000
 8003ad0:	5801000c 	.word	0x5801000c

08003ad4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003ae2:	4b25      	ldr	r3, [pc, #148]	; (8003b78 <SUBGHZSPI_Receive+0xa4>)
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	1a9b      	subs	r3, r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	0cdb      	lsrs	r3, r3, #19
 8003af0:	2264      	movs	r2, #100	; 0x64
 8003af2:	fb02 f303 	mul.w	r3, r2, r3
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d105      	bne.n	8003b0a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	609a      	str	r2, [r3, #8]
      break;
 8003b08:	e008      	b.n	8003b1c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003b10:	4b1a      	ldr	r3, [pc, #104]	; (8003b7c <SUBGHZSPI_Receive+0xa8>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d1ed      	bne.n	8003af8 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003b1c:	4b18      	ldr	r3, [pc, #96]	; (8003b80 <SUBGHZSPI_Receive+0xac>)
 8003b1e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	22ff      	movs	r2, #255	; 0xff
 8003b24:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003b26:	4b14      	ldr	r3, [pc, #80]	; (8003b78 <SUBGHZSPI_Receive+0xa4>)
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	1a9b      	subs	r3, r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	0cdb      	lsrs	r3, r3, #19
 8003b34:	2264      	movs	r2, #100	; 0x64
 8003b36:	fb02 f303 	mul.w	r3, r2, r3
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d105      	bne.n	8003b4e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	609a      	str	r2, [r3, #8]
      break;
 8003b4c:	e008      	b.n	8003b60 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	3b01      	subs	r3, #1
 8003b52:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003b54:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <SUBGHZSPI_Receive+0xa8>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d1ed      	bne.n	8003b3c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8003b60:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <SUBGHZSPI_Receive+0xa8>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	701a      	strb	r2, [r3, #0]

  return status;
 8003b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	371c      	adds	r7, #28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	20000004 	.word	0x20000004
 8003b7c:	58010000 	.word	0x58010000
 8003b80:	5801000c 	.word	0x5801000c

08003b84 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	791b      	ldrb	r3, [r3, #4]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d111      	bne.n	8003bb8 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8003b94:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <SUBGHZ_CheckDeviceReady+0x44>)
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	4413      	add	r3, r2
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	0c1b      	lsrs	r3, r3, #16
 8003ba2:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003ba4:	f7ff fbb0 	bl	8003308 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1f9      	bne.n	8003ba8 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003bb4:	f7ff fb98 	bl	80032e8 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f807 	bl	8003bcc <SUBGHZ_WaitOnBusy>
 8003bbe:	4603      	mov	r3, r0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	20000004 	.word	0x20000004

08003bcc <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8003bd8:	4b12      	ldr	r3, [pc, #72]	; (8003c24 <SUBGHZ_WaitOnBusy+0x58>)
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	4413      	add	r3, r2
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	0d1b      	lsrs	r3, r3, #20
 8003be6:	2264      	movs	r2, #100	; 0x64
 8003be8:	fb02 f303 	mul.w	r3, r2, r3
 8003bec:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8003bee:	f7ff fbb9 	bl	8003364 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8003bf2:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d105      	bne.n	8003c06 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2202      	movs	r2, #2
 8003c02:	609a      	str	r2, [r3, #8]
      break;
 8003c04:	e009      	b.n	8003c1a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8003c0c:	f7ff fb98 	bl	8003340 <LL_PWR_IsActiveFlag_RFBUSYS>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	4013      	ands	r3, r2
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d0e9      	beq.n	8003bee <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8003c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	20000004 	.word	0x20000004

08003c28 <LL_RCC_GetUSARTClockSource>:
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c34:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	401a      	ands	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	041b      	lsls	r3, r3, #16
 8003c40:	4313      	orrs	r3, r2
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr

08003c4c <LL_RCC_GetLPUARTClockSource>:
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c58:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4013      	ands	r3, r2
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bc80      	pop	{r7}
 8003c68:	4770      	bx	lr

08003c6a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b082      	sub	sp, #8
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e042      	b.n	8003d02 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fd f8a2 	bl	8000dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2224      	movs	r2, #36	; 0x24
 8003c98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0201 	bic.w	r2, r2, #1
 8003caa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 fcf7 	bl	80046a0 <UART_SetConfig>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d101      	bne.n	8003cbc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e022      	b.n	8003d02 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d002      	beq.n	8003cca <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 ff3b 	bl	8004b40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cd8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ce8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f042 0201 	orr.w	r2, r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 ffc1 	bl	8004c82 <UART_CheckIdleState>
 8003d00:	4603      	mov	r3, r0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b08a      	sub	sp, #40	; 0x28
 8003d0e:	af02      	add	r7, sp, #8
 8003d10:	60f8      	str	r0, [r7, #12]
 8003d12:	60b9      	str	r1, [r7, #8]
 8003d14:	603b      	str	r3, [r7, #0]
 8003d16:	4613      	mov	r3, r2
 8003d18:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d20:	2b20      	cmp	r3, #32
 8003d22:	f040 8083 	bne.w	8003e2c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <HAL_UART_Transmit+0x28>
 8003d2c:	88fb      	ldrh	r3, [r7, #6]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e07b      	b.n	8003e2e <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d101      	bne.n	8003d44 <HAL_UART_Transmit+0x3a>
 8003d40:	2302      	movs	r3, #2
 8003d42:	e074      	b.n	8003e2e <HAL_UART_Transmit+0x124>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2221      	movs	r2, #33	; 0x21
 8003d58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d5c:	f7fc fee1 	bl	8000b22 <HAL_GetTick>
 8003d60:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	88fa      	ldrh	r2, [r7, #6]
 8003d66:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	88fa      	ldrh	r2, [r7, #6]
 8003d6e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d7a:	d108      	bne.n	8003d8e <HAL_UART_Transmit+0x84>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d104      	bne.n	8003d8e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003d84:	2300      	movs	r3, #0
 8003d86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	61bb      	str	r3, [r7, #24]
 8003d8c:	e003      	b.n	8003d96 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003d9e:	e02c      	b.n	8003dfa <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	2200      	movs	r2, #0
 8003da8:	2180      	movs	r1, #128	; 0x80
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 ffb4 	bl	8004d18 <UART_WaitOnFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e039      	b.n	8003e2e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10b      	bne.n	8003dd8 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	3302      	adds	r3, #2
 8003dd4:	61bb      	str	r3, [r7, #24]
 8003dd6:	e007      	b.n	8003de8 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	781a      	ldrb	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	3301      	adds	r3, #1
 8003de6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1cc      	bne.n	8003da0 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	2140      	movs	r1, #64	; 0x40
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 ff81 	bl	8004d18 <UART_WaitOnFlagUntilTimeout>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e006      	b.n	8003e2e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	e000      	b.n	8003e2e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003e2c:	2302      	movs	r3, #2
  }
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3720      	adds	r7, #32
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
	...

08003e38 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b091      	sub	sp, #68	; 0x44
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	4613      	mov	r3, r2
 8003e44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e4c:	2b20      	cmp	r3, #32
 8003e4e:	f040 808c 	bne.w	8003f6a <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <HAL_UART_Transmit_IT+0x26>
 8003e58:	88fb      	ldrh	r3, [r7, #6]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e084      	b.n	8003f6c <HAL_UART_Transmit_IT+0x134>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_UART_Transmit_IT+0x38>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e07d      	b.n	8003f6c <HAL_UART_Transmit_IT+0x134>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	88fa      	ldrh	r2, [r7, #6]
 8003e82:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	88fa      	ldrh	r2, [r7, #6]
 8003e8a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2221      	movs	r2, #33	; 0x21
 8003ea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eac:	d12e      	bne.n	8003f0c <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb6:	d107      	bne.n	8003ec8 <HAL_UART_Transmit_IT+0x90>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d103      	bne.n	8003ec8 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4a2d      	ldr	r2, [pc, #180]	; (8003f78 <HAL_UART_Transmit_IT+0x140>)
 8003ec4:	675a      	str	r2, [r3, #116]	; 0x74
 8003ec6:	e002      	b.n	8003ece <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4a2c      	ldr	r2, [pc, #176]	; (8003f7c <HAL_UART_Transmit_IT+0x144>)
 8003ecc:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3308      	adds	r3, #8
 8003edc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee0:	e853 3f00 	ldrex	r3, [r3]
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003eec:	63bb      	str	r3, [r7, #56]	; 0x38
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3308      	adds	r3, #8
 8003ef4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ef6:	637a      	str	r2, [r7, #52]	; 0x34
 8003ef8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003efe:	e841 2300 	strex	r3, r2, [r1]
 8003f02:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1e5      	bne.n	8003ed6 <HAL_UART_Transmit_IT+0x9e>
 8003f0a:	e02c      	b.n	8003f66 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f14:	d107      	bne.n	8003f26 <HAL_UART_Transmit_IT+0xee>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d103      	bne.n	8003f26 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4a17      	ldr	r2, [pc, #92]	; (8003f80 <HAL_UART_Transmit_IT+0x148>)
 8003f22:	675a      	str	r2, [r3, #116]	; 0x74
 8003f24:	e002      	b.n	8003f2c <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4a16      	ldr	r2, [pc, #88]	; (8003f84 <HAL_UART_Transmit_IT+0x14c>)
 8003f2a:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	e853 3f00 	ldrex	r3, [r3]
 8003f40:	613b      	str	r3, [r7, #16]
   return(result);
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f52:	623b      	str	r3, [r7, #32]
 8003f54:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f56:	69f9      	ldr	r1, [r7, #28]
 8003f58:	6a3a      	ldr	r2, [r7, #32]
 8003f5a:	e841 2300 	strex	r3, r2, [r1]
 8003f5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e6      	bne.n	8003f34 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8003f66:	2300      	movs	r3, #0
 8003f68:	e000      	b.n	8003f6c <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8003f6a:	2302      	movs	r3, #2
  }
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3744      	adds	r7, #68	; 0x44
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bc80      	pop	{r7}
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	080053f7 	.word	0x080053f7
 8003f7c:	08005319 	.word	0x08005319
 8003f80:	08005259 	.word	0x08005259
 8003f84:	080051a3 	.word	0x080051a3

08003f88 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b08a      	sub	sp, #40	; 0x28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	4613      	mov	r3, r2
 8003f94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d142      	bne.n	8004026 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <HAL_UART_Receive_IT+0x24>
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e03b      	b.n	8004028 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d101      	bne.n	8003fbe <HAL_UART_Receive_IT+0x36>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	e034      	b.n	8004028 <HAL_UART_Receive_IT+0xa0>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a17      	ldr	r2, [pc, #92]	; (8004030 <HAL_UART_Receive_IT+0xa8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d01f      	beq.n	8004016 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d018      	beq.n	8004016 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	623b      	str	r3, [r7, #32]
 8004004:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	69f9      	ldr	r1, [r7, #28]
 8004008:	6a3a      	ldr	r2, [r7, #32]
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e6      	bne.n	8003fe4 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004016:	88fb      	ldrh	r3, [r7, #6]
 8004018:	461a      	mov	r2, r3
 800401a:	68b9      	ldr	r1, [r7, #8]
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f000 ff43 	bl	8004ea8 <UART_Start_Receive_IT>
 8004022:	4603      	mov	r3, r0
 8004024:	e000      	b.n	8004028 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004026:	2302      	movs	r3, #2
  }
}
 8004028:	4618      	mov	r0, r3
 800402a:	3728      	adds	r7, #40	; 0x28
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40008000 	.word	0x40008000

08004034 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b0ba      	sub	sp, #232	; 0xe8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800405a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800405e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004062:	4013      	ands	r3, r2
 8004064:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004068:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800406c:	2b00      	cmp	r3, #0
 800406e:	d11b      	bne.n	80040a8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004074:	f003 0320 	and.w	r3, r3, #32
 8004078:	2b00      	cmp	r3, #0
 800407a:	d015      	beq.n	80040a8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800407c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004080:	f003 0320 	and.w	r3, r3, #32
 8004084:	2b00      	cmp	r3, #0
 8004086:	d105      	bne.n	8004094 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800408c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d009      	beq.n	80040a8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 82d6 	beq.w	800464a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	4798      	blx	r3
      }
      return;
 80040a6:	e2d0      	b.n	800464a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80040a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 811f 	beq.w	80042f0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80040b2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80040b6:	4b8b      	ldr	r3, [pc, #556]	; (80042e4 <HAL_UART_IRQHandler+0x2b0>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d106      	bne.n	80040cc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80040be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80040c2:	4b89      	ldr	r3, [pc, #548]	; (80042e8 <HAL_UART_IRQHandler+0x2b4>)
 80040c4:	4013      	ands	r3, r2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 8112 	beq.w	80042f0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d011      	beq.n	80040fc <HAL_UART_IRQHandler+0xc8>
 80040d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00b      	beq.n	80040fc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2201      	movs	r2, #1
 80040ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040f2:	f043 0201 	orr.w	r2, r3, #1
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d011      	beq.n	800412c <HAL_UART_IRQHandler+0xf8>
 8004108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00b      	beq.n	800412c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2202      	movs	r2, #2
 800411a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004122:	f043 0204 	orr.w	r2, r3, #4
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800412c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d011      	beq.n	800415c <HAL_UART_IRQHandler+0x128>
 8004138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00b      	beq.n	800415c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2204      	movs	r2, #4
 800414a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004152:	f043 0202 	orr.w	r2, r3, #2
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800415c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004160:	f003 0308 	and.w	r3, r3, #8
 8004164:	2b00      	cmp	r3, #0
 8004166:	d017      	beq.n	8004198 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800416c:	f003 0320 	and.w	r3, r3, #32
 8004170:	2b00      	cmp	r3, #0
 8004172:	d105      	bne.n	8004180 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004174:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004178:	4b5a      	ldr	r3, [pc, #360]	; (80042e4 <HAL_UART_IRQHandler+0x2b0>)
 800417a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00b      	beq.n	8004198 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2208      	movs	r2, #8
 8004186:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800418e:	f043 0208 	orr.w	r2, r3, #8
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800419c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d012      	beq.n	80041ca <HAL_UART_IRQHandler+0x196>
 80041a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00c      	beq.n	80041ca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041c0:	f043 0220 	orr.w	r2, r3, #32
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 823c 	beq.w	800464e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80041d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041da:	f003 0320 	and.w	r3, r3, #32
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d013      	beq.n	800420a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80041e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041e6:	f003 0320 	and.w	r3, r3, #32
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d105      	bne.n	80041fa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80041ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d007      	beq.n	800420a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004210:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421e:	2b40      	cmp	r3, #64	; 0x40
 8004220:	d005      	beq.n	800422e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004226:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800422a:	2b00      	cmp	r3, #0
 800422c:	d04f      	beq.n	80042ce <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 ff3c 	bl	80050ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423e:	2b40      	cmp	r3, #64	; 0x40
 8004240:	d141      	bne.n	80042c6 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3308      	adds	r3, #8
 8004248:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004250:	e853 3f00 	ldrex	r3, [r3]
 8004254:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004258:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800425c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3308      	adds	r3, #8
 800426a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800426e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004272:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004276:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800427a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800427e:	e841 2300 	strex	r3, r2, [r1]
 8004282:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004286:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1d9      	bne.n	8004242 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004292:	2b00      	cmp	r3, #0
 8004294:	d013      	beq.n	80042be <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800429a:	4a14      	ldr	r2, [pc, #80]	; (80042ec <HAL_UART_IRQHandler+0x2b8>)
 800429c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fd f9a0 	bl	80015e8 <HAL_DMA_Abort_IT>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d017      	beq.n	80042de <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80042b8:	4610      	mov	r0, r2
 80042ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042bc:	e00f      	b.n	80042de <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f9d9 	bl	8004676 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c4:	e00b      	b.n	80042de <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f9d5 	bl	8004676 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042cc:	e007      	b.n	80042de <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f9d1 	bl	8004676 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80042dc:	e1b7      	b.n	800464e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042de:	bf00      	nop
    return;
 80042e0:	e1b5      	b.n	800464e <HAL_UART_IRQHandler+0x61a>
 80042e2:	bf00      	nop
 80042e4:	10000001 	.word	0x10000001
 80042e8:	04000120 	.word	0x04000120
 80042ec:	08005177 	.word	0x08005177

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	f040 814a 	bne.w	800458e <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80042fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042fe:	f003 0310 	and.w	r3, r3, #16
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 8143 	beq.w	800458e <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800430c:	f003 0310 	and.w	r3, r3, #16
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 813c 	beq.w	800458e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2210      	movs	r2, #16
 800431c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004328:	2b40      	cmp	r3, #64	; 0x40
 800432a:	f040 80b5 	bne.w	8004498 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 800433a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800433e:	2b00      	cmp	r3, #0
 8004340:	f000 8187 	beq.w	8004652 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800434a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800434e:	429a      	cmp	r2, r3
 8004350:	f080 817f 	bcs.w	8004652 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800435a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0320 	and.w	r3, r3, #32
 800436a:	2b00      	cmp	r3, #0
 800436c:	f040 8086 	bne.w	800447c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004378:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800437c:	e853 3f00 	ldrex	r3, [r3]
 8004380:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004384:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800438c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	461a      	mov	r2, r3
 8004396:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800439a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800439e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80043a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80043aa:	e841 2300 	strex	r3, r2, [r1]
 80043ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80043b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1da      	bne.n	8004370 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	3308      	adds	r3, #8
 80043c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043c4:	e853 3f00 	ldrex	r3, [r3]
 80043c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80043ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043cc:	f023 0301 	bic.w	r3, r3, #1
 80043d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3308      	adds	r3, #8
 80043da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80043e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80043e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80043ea:	e841 2300 	strex	r3, r2, [r1]
 80043ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80043f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1e1      	bne.n	80043ba <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	3308      	adds	r3, #8
 80043fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004400:	e853 3f00 	ldrex	r3, [r3]
 8004404:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800440c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3308      	adds	r3, #8
 8004416:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800441a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800441c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004420:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004422:	e841 2300 	strex	r3, r2, [r1]
 8004426:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004428:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1e3      	bne.n	80043f6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2220      	movs	r2, #32
 8004432:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004444:	e853 3f00 	ldrex	r3, [r3]
 8004448:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800444a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800444c:	f023 0310 	bic.w	r3, r3, #16
 8004450:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	461a      	mov	r2, r3
 800445a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800445e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004460:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004462:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004464:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004466:	e841 2300 	strex	r3, r2, [r1]
 800446a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800446c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1e4      	bne.n	800443c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004476:	4618      	mov	r0, r3
 8004478:	f7fd f858 	bl	800152c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004488:	b29b      	uxth	r3, r3
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	b29b      	uxth	r3, r3
 800448e:	4619      	mov	r1, r3
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f8f9 	bl	8004688 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004496:	e0dc      	b.n	8004652 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 80ce 	beq.w	8004656 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 80044ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 80c9 	beq.w	8004656 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044cc:	e853 3f00 	ldrex	r3, [r3]
 80044d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	461a      	mov	r2, r3
 80044e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80044e6:	647b      	str	r3, [r7, #68]	; 0x44
 80044e8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044ee:	e841 2300 	strex	r3, r2, [r1]
 80044f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1e4      	bne.n	80044c4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3308      	adds	r3, #8
 8004500:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	e853 3f00 	ldrex	r3, [r3]
 8004508:	623b      	str	r3, [r7, #32]
   return(result);
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004510:	f023 0301 	bic.w	r3, r3, #1
 8004514:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3308      	adds	r3, #8
 800451e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004522:	633a      	str	r2, [r7, #48]	; 0x30
 8004524:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004526:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800452a:	e841 2300 	strex	r3, r2, [r1]
 800452e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1e1      	bne.n	80044fa <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2220      	movs	r2, #32
 800453a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	e853 3f00 	ldrex	r3, [r3]
 8004556:	60fb      	str	r3, [r7, #12]
   return(result);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0310 	bic.w	r3, r3, #16
 800455e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	461a      	mov	r2, r3
 8004568:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800456c:	61fb      	str	r3, [r7, #28]
 800456e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004570:	69b9      	ldr	r1, [r7, #24]
 8004572:	69fa      	ldr	r2, [r7, #28]
 8004574:	e841 2300 	strex	r3, r2, [r1]
 8004578:	617b      	str	r3, [r7, #20]
   return(result);
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1e4      	bne.n	800454a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004580:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004584:	4619      	mov	r1, r3
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f87e 	bl	8004688 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800458c:	e063      	b.n	8004656 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800458e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00e      	beq.n	80045b8 <HAL_UART_IRQHandler+0x584>
 800459a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800459e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d008      	beq.n	80045b8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80045ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f001 fc1b 	bl	8005dec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045b6:	e051      	b.n	800465c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80045b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d014      	beq.n	80045ee <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80045c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d105      	bne.n	80045dc <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80045d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d008      	beq.n	80045ee <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d03a      	beq.n	800465a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	4798      	blx	r3
    }
    return;
 80045ec:	e035      	b.n	800465a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80045ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d009      	beq.n	800460e <HAL_UART_IRQHandler+0x5da>
 80045fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 ff69 	bl	80054de <UART_EndTransmit_IT>
    return;
 800460c:	e026      	b.n	800465c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800460e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004612:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d009      	beq.n	800462e <HAL_UART_IRQHandler+0x5fa>
 800461a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800461e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f001 fbf2 	bl	8005e10 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800462c:	e016      	b.n	800465c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800462e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004632:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d010      	beq.n	800465c <HAL_UART_IRQHandler+0x628>
 800463a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800463e:	2b00      	cmp	r3, #0
 8004640:	da0c      	bge.n	800465c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f001 fbdb 	bl	8005dfe <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004648:	e008      	b.n	800465c <HAL_UART_IRQHandler+0x628>
      return;
 800464a:	bf00      	nop
 800464c:	e006      	b.n	800465c <HAL_UART_IRQHandler+0x628>
    return;
 800464e:	bf00      	nop
 8004650:	e004      	b.n	800465c <HAL_UART_IRQHandler+0x628>
      return;
 8004652:	bf00      	nop
 8004654:	e002      	b.n	800465c <HAL_UART_IRQHandler+0x628>
      return;
 8004656:	bf00      	nop
 8004658:	e000      	b.n	800465c <HAL_UART_IRQHandler+0x628>
    return;
 800465a:	bf00      	nop
  }
}
 800465c:	37e8      	adds	r7, #232	; 0xe8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop

08004664 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	bc80      	pop	{r7}
 8004674:	4770      	bx	lr

08004676 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004676:	b480      	push	{r7}
 8004678:	b083      	sub	sp, #12
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800467e:	bf00      	nop
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	bc80      	pop	{r7}
 8004686:	4770      	bx	lr

08004688 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	460b      	mov	r3, r1
 8004692:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	bc80      	pop	{r7}
 800469c:	4770      	bx	lr
	...

080046a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046a0:	b5b0      	push	{r4, r5, r7, lr}
 80046a2:	b088      	sub	sp, #32
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046a8:	2300      	movs	r3, #0
 80046aa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	431a      	orrs	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	4bab      	ldr	r3, [pc, #684]	; (8004978 <UART_SetConfig+0x2d8>)
 80046cc:	4013      	ands	r3, r2
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6812      	ldr	r2, [r2, #0]
 80046d2:	69f9      	ldr	r1, [r7, #28]
 80046d4:	430b      	orrs	r3, r1
 80046d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4aa0      	ldr	r2, [pc, #640]	; (800497c <UART_SetConfig+0x2dc>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d004      	beq.n	8004708 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	69fa      	ldr	r2, [r7, #28]
 8004704:	4313      	orrs	r3, r2
 8004706:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004712:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6812      	ldr	r2, [r2, #0]
 800471a:	69f9      	ldr	r1, [r7, #28]
 800471c:	430b      	orrs	r3, r1
 800471e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004726:	f023 010f 	bic.w	r1, r3, #15
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a91      	ldr	r2, [pc, #580]	; (8004980 <UART_SetConfig+0x2e0>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d122      	bne.n	8004786 <UART_SetConfig+0xe6>
 8004740:	2003      	movs	r0, #3
 8004742:	f7ff fa71 	bl	8003c28 <LL_RCC_GetUSARTClockSource>
 8004746:	4603      	mov	r3, r0
 8004748:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800474c:	2b03      	cmp	r3, #3
 800474e:	d817      	bhi.n	8004780 <UART_SetConfig+0xe0>
 8004750:	a201      	add	r2, pc, #4	; (adr r2, 8004758 <UART_SetConfig+0xb8>)
 8004752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004756:	bf00      	nop
 8004758:	08004769 	.word	0x08004769
 800475c:	08004775 	.word	0x08004775
 8004760:	0800476f 	.word	0x0800476f
 8004764:	0800477b 	.word	0x0800477b
 8004768:	2301      	movs	r3, #1
 800476a:	76fb      	strb	r3, [r7, #27]
 800476c:	e072      	b.n	8004854 <UART_SetConfig+0x1b4>
 800476e:	2302      	movs	r3, #2
 8004770:	76fb      	strb	r3, [r7, #27]
 8004772:	e06f      	b.n	8004854 <UART_SetConfig+0x1b4>
 8004774:	2304      	movs	r3, #4
 8004776:	76fb      	strb	r3, [r7, #27]
 8004778:	e06c      	b.n	8004854 <UART_SetConfig+0x1b4>
 800477a:	2308      	movs	r3, #8
 800477c:	76fb      	strb	r3, [r7, #27]
 800477e:	e069      	b.n	8004854 <UART_SetConfig+0x1b4>
 8004780:	2310      	movs	r3, #16
 8004782:	76fb      	strb	r3, [r7, #27]
 8004784:	e066      	b.n	8004854 <UART_SetConfig+0x1b4>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a7e      	ldr	r2, [pc, #504]	; (8004984 <UART_SetConfig+0x2e4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d134      	bne.n	80047fa <UART_SetConfig+0x15a>
 8004790:	200c      	movs	r0, #12
 8004792:	f7ff fa49 	bl	8003c28 <LL_RCC_GetUSARTClockSource>
 8004796:	4603      	mov	r3, r0
 8004798:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800479c:	2b0c      	cmp	r3, #12
 800479e:	d829      	bhi.n	80047f4 <UART_SetConfig+0x154>
 80047a0:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <UART_SetConfig+0x108>)
 80047a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a6:	bf00      	nop
 80047a8:	080047dd 	.word	0x080047dd
 80047ac:	080047f5 	.word	0x080047f5
 80047b0:	080047f5 	.word	0x080047f5
 80047b4:	080047f5 	.word	0x080047f5
 80047b8:	080047e9 	.word	0x080047e9
 80047bc:	080047f5 	.word	0x080047f5
 80047c0:	080047f5 	.word	0x080047f5
 80047c4:	080047f5 	.word	0x080047f5
 80047c8:	080047e3 	.word	0x080047e3
 80047cc:	080047f5 	.word	0x080047f5
 80047d0:	080047f5 	.word	0x080047f5
 80047d4:	080047f5 	.word	0x080047f5
 80047d8:	080047ef 	.word	0x080047ef
 80047dc:	2300      	movs	r3, #0
 80047de:	76fb      	strb	r3, [r7, #27]
 80047e0:	e038      	b.n	8004854 <UART_SetConfig+0x1b4>
 80047e2:	2302      	movs	r3, #2
 80047e4:	76fb      	strb	r3, [r7, #27]
 80047e6:	e035      	b.n	8004854 <UART_SetConfig+0x1b4>
 80047e8:	2304      	movs	r3, #4
 80047ea:	76fb      	strb	r3, [r7, #27]
 80047ec:	e032      	b.n	8004854 <UART_SetConfig+0x1b4>
 80047ee:	2308      	movs	r3, #8
 80047f0:	76fb      	strb	r3, [r7, #27]
 80047f2:	e02f      	b.n	8004854 <UART_SetConfig+0x1b4>
 80047f4:	2310      	movs	r3, #16
 80047f6:	76fb      	strb	r3, [r7, #27]
 80047f8:	e02c      	b.n	8004854 <UART_SetConfig+0x1b4>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a5f      	ldr	r2, [pc, #380]	; (800497c <UART_SetConfig+0x2dc>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d125      	bne.n	8004850 <UART_SetConfig+0x1b0>
 8004804:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004808:	f7ff fa20 	bl	8003c4c <LL_RCC_GetLPUARTClockSource>
 800480c:	4603      	mov	r3, r0
 800480e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004812:	d017      	beq.n	8004844 <UART_SetConfig+0x1a4>
 8004814:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004818:	d817      	bhi.n	800484a <UART_SetConfig+0x1aa>
 800481a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800481e:	d00b      	beq.n	8004838 <UART_SetConfig+0x198>
 8004820:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004824:	d811      	bhi.n	800484a <UART_SetConfig+0x1aa>
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <UART_SetConfig+0x192>
 800482a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800482e:	d006      	beq.n	800483e <UART_SetConfig+0x19e>
 8004830:	e00b      	b.n	800484a <UART_SetConfig+0x1aa>
 8004832:	2300      	movs	r3, #0
 8004834:	76fb      	strb	r3, [r7, #27]
 8004836:	e00d      	b.n	8004854 <UART_SetConfig+0x1b4>
 8004838:	2302      	movs	r3, #2
 800483a:	76fb      	strb	r3, [r7, #27]
 800483c:	e00a      	b.n	8004854 <UART_SetConfig+0x1b4>
 800483e:	2304      	movs	r3, #4
 8004840:	76fb      	strb	r3, [r7, #27]
 8004842:	e007      	b.n	8004854 <UART_SetConfig+0x1b4>
 8004844:	2308      	movs	r3, #8
 8004846:	76fb      	strb	r3, [r7, #27]
 8004848:	e004      	b.n	8004854 <UART_SetConfig+0x1b4>
 800484a:	2310      	movs	r3, #16
 800484c:	76fb      	strb	r3, [r7, #27]
 800484e:	e001      	b.n	8004854 <UART_SetConfig+0x1b4>
 8004850:	2310      	movs	r3, #16
 8004852:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a48      	ldr	r2, [pc, #288]	; (800497c <UART_SetConfig+0x2dc>)
 800485a:	4293      	cmp	r3, r2
 800485c:	f040 8098 	bne.w	8004990 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004860:	7efb      	ldrb	r3, [r7, #27]
 8004862:	2b08      	cmp	r3, #8
 8004864:	d823      	bhi.n	80048ae <UART_SetConfig+0x20e>
 8004866:	a201      	add	r2, pc, #4	; (adr r2, 800486c <UART_SetConfig+0x1cc>)
 8004868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486c:	08004891 	.word	0x08004891
 8004870:	080048af 	.word	0x080048af
 8004874:	08004899 	.word	0x08004899
 8004878:	080048af 	.word	0x080048af
 800487c:	0800489f 	.word	0x0800489f
 8004880:	080048af 	.word	0x080048af
 8004884:	080048af 	.word	0x080048af
 8004888:	080048af 	.word	0x080048af
 800488c:	080048a7 	.word	0x080048a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004890:	f7fe fa2e 	bl	8002cf0 <HAL_RCC_GetPCLK1Freq>
 8004894:	6178      	str	r0, [r7, #20]
        break;
 8004896:	e00f      	b.n	80048b8 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004898:	4b3b      	ldr	r3, [pc, #236]	; (8004988 <UART_SetConfig+0x2e8>)
 800489a:	617b      	str	r3, [r7, #20]
        break;
 800489c:	e00c      	b.n	80048b8 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800489e:	f7fe f973 	bl	8002b88 <HAL_RCC_GetSysClockFreq>
 80048a2:	6178      	str	r0, [r7, #20]
        break;
 80048a4:	e008      	b.n	80048b8 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048aa:	617b      	str	r3, [r7, #20]
        break;
 80048ac:	e004      	b.n	80048b8 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	76bb      	strb	r3, [r7, #26]
        break;
 80048b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 8128 	beq.w	8004b10 <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	4a31      	ldr	r2, [pc, #196]	; (800498c <UART_SetConfig+0x2ec>)
 80048c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048ca:	461a      	mov	r2, r3
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80048d2:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	4613      	mov	r3, r2
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	4413      	add	r3, r2
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d305      	bcc.n	80048f0 <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d902      	bls.n	80048f6 <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	76bb      	strb	r3, [r7, #26]
 80048f4:	e10c      	b.n	8004b10 <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f04f 0100 	mov.w	r1, #0
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	4a22      	ldr	r2, [pc, #136]	; (800498c <UART_SetConfig+0x2ec>)
 8004904:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004908:	b29a      	uxth	r2, r3
 800490a:	f04f 0300 	mov.w	r3, #0
 800490e:	f7fb fc87 	bl	8000220 <__aeabi_uldivmod>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	4610      	mov	r0, r2
 8004918:	4619      	mov	r1, r3
 800491a:	f04f 0200 	mov.w	r2, #0
 800491e:	f04f 0300 	mov.w	r3, #0
 8004922:	020b      	lsls	r3, r1, #8
 8004924:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004928:	0202      	lsls	r2, r0, #8
 800492a:	6879      	ldr	r1, [r7, #4]
 800492c:	6849      	ldr	r1, [r1, #4]
 800492e:	0849      	lsrs	r1, r1, #1
 8004930:	4608      	mov	r0, r1
 8004932:	f04f 0100 	mov.w	r1, #0
 8004936:	1814      	adds	r4, r2, r0
 8004938:	eb43 0501 	adc.w	r5, r3, r1
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	461a      	mov	r2, r3
 8004942:	f04f 0300 	mov.w	r3, #0
 8004946:	4620      	mov	r0, r4
 8004948:	4629      	mov	r1, r5
 800494a:	f7fb fc69 	bl	8000220 <__aeabi_uldivmod>
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	4613      	mov	r3, r2
 8004954:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800495c:	d308      	bcc.n	8004970 <UART_SetConfig+0x2d0>
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004964:	d204      	bcs.n	8004970 <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	60da      	str	r2, [r3, #12]
 800496e:	e0cf      	b.n	8004b10 <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	76bb      	strb	r3, [r7, #26]
 8004974:	e0cc      	b.n	8004b10 <UART_SetConfig+0x470>
 8004976:	bf00      	nop
 8004978:	cfff69f3 	.word	0xcfff69f3
 800497c:	40008000 	.word	0x40008000
 8004980:	40013800 	.word	0x40013800
 8004984:	40004400 	.word	0x40004400
 8004988:	00f42400 	.word	0x00f42400
 800498c:	0800a054 	.word	0x0800a054
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004998:	d165      	bne.n	8004a66 <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 800499a:	7efb      	ldrb	r3, [r7, #27]
 800499c:	2b08      	cmp	r3, #8
 800499e:	d828      	bhi.n	80049f2 <UART_SetConfig+0x352>
 80049a0:	a201      	add	r2, pc, #4	; (adr r2, 80049a8 <UART_SetConfig+0x308>)
 80049a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a6:	bf00      	nop
 80049a8:	080049cd 	.word	0x080049cd
 80049ac:	080049d5 	.word	0x080049d5
 80049b0:	080049dd 	.word	0x080049dd
 80049b4:	080049f3 	.word	0x080049f3
 80049b8:	080049e3 	.word	0x080049e3
 80049bc:	080049f3 	.word	0x080049f3
 80049c0:	080049f3 	.word	0x080049f3
 80049c4:	080049f3 	.word	0x080049f3
 80049c8:	080049eb 	.word	0x080049eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049cc:	f7fe f990 	bl	8002cf0 <HAL_RCC_GetPCLK1Freq>
 80049d0:	6178      	str	r0, [r7, #20]
        break;
 80049d2:	e013      	b.n	80049fc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049d4:	f7fe f99e 	bl	8002d14 <HAL_RCC_GetPCLK2Freq>
 80049d8:	6178      	str	r0, [r7, #20]
        break;
 80049da:	e00f      	b.n	80049fc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049dc:	4b56      	ldr	r3, [pc, #344]	; (8004b38 <UART_SetConfig+0x498>)
 80049de:	617b      	str	r3, [r7, #20]
        break;
 80049e0:	e00c      	b.n	80049fc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049e2:	f7fe f8d1 	bl	8002b88 <HAL_RCC_GetSysClockFreq>
 80049e6:	6178      	str	r0, [r7, #20]
        break;
 80049e8:	e008      	b.n	80049fc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ee:	617b      	str	r3, [r7, #20]
        break;
 80049f0:	e004      	b.n	80049fc <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	76bb      	strb	r3, [r7, #26]
        break;
 80049fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f000 8086 	beq.w	8004b10 <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	4a4c      	ldr	r2, [pc, #304]	; (8004b3c <UART_SetConfig+0x49c>)
 8004a0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a16:	005a      	lsls	r2, r3, #1
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	085b      	lsrs	r3, r3, #1
 8004a1e:	441a      	add	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	2b0f      	cmp	r3, #15
 8004a30:	d916      	bls.n	8004a60 <UART_SetConfig+0x3c0>
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a38:	d212      	bcs.n	8004a60 <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	f023 030f 	bic.w	r3, r3, #15
 8004a42:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	085b      	lsrs	r3, r3, #1
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	f003 0307 	and.w	r3, r3, #7
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	89fb      	ldrh	r3, [r7, #14]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	89fa      	ldrh	r2, [r7, #14]
 8004a5c:	60da      	str	r2, [r3, #12]
 8004a5e:	e057      	b.n	8004b10 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	76bb      	strb	r3, [r7, #26]
 8004a64:	e054      	b.n	8004b10 <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a66:	7efb      	ldrb	r3, [r7, #27]
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	d828      	bhi.n	8004abe <UART_SetConfig+0x41e>
 8004a6c:	a201      	add	r2, pc, #4	; (adr r2, 8004a74 <UART_SetConfig+0x3d4>)
 8004a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a72:	bf00      	nop
 8004a74:	08004a99 	.word	0x08004a99
 8004a78:	08004aa1 	.word	0x08004aa1
 8004a7c:	08004aa9 	.word	0x08004aa9
 8004a80:	08004abf 	.word	0x08004abf
 8004a84:	08004aaf 	.word	0x08004aaf
 8004a88:	08004abf 	.word	0x08004abf
 8004a8c:	08004abf 	.word	0x08004abf
 8004a90:	08004abf 	.word	0x08004abf
 8004a94:	08004ab7 	.word	0x08004ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a98:	f7fe f92a 	bl	8002cf0 <HAL_RCC_GetPCLK1Freq>
 8004a9c:	6178      	str	r0, [r7, #20]
        break;
 8004a9e:	e013      	b.n	8004ac8 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004aa0:	f7fe f938 	bl	8002d14 <HAL_RCC_GetPCLK2Freq>
 8004aa4:	6178      	str	r0, [r7, #20]
        break;
 8004aa6:	e00f      	b.n	8004ac8 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004aa8:	4b23      	ldr	r3, [pc, #140]	; (8004b38 <UART_SetConfig+0x498>)
 8004aaa:	617b      	str	r3, [r7, #20]
        break;
 8004aac:	e00c      	b.n	8004ac8 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aae:	f7fe f86b 	bl	8002b88 <HAL_RCC_GetSysClockFreq>
 8004ab2:	6178      	str	r0, [r7, #20]
        break;
 8004ab4:	e008      	b.n	8004ac8 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aba:	617b      	str	r3, [r7, #20]
        break;
 8004abc:	e004      	b.n	8004ac8 <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	76bb      	strb	r3, [r7, #26]
        break;
 8004ac6:	bf00      	nop
    }

    if (pclk != 0U)
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d020      	beq.n	8004b10 <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	4a1a      	ldr	r2, [pc, #104]	; (8004b3c <UART_SetConfig+0x49c>)
 8004ad4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	085b      	lsrs	r3, r3, #1
 8004ae6:	441a      	add	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	2b0f      	cmp	r3, #15
 8004af8:	d908      	bls.n	8004b0c <UART_SetConfig+0x46c>
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b00:	d204      	bcs.n	8004b0c <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	60da      	str	r2, [r3, #12]
 8004b0a:	e001      	b.n	8004b10 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004b2c:	7ebb      	ldrb	r3, [r7, #26]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3720      	adds	r7, #32
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bdb0      	pop	{r4, r5, r7, pc}
 8004b36:	bf00      	nop
 8004b38:	00f42400 	.word	0x00f42400
 8004b3c:	0800a054 	.word	0x0800a054

08004b40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00a      	beq.n	8004b6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd4:	f003 0310 	and.w	r3, r3, #16
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00a      	beq.n	8004bf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d01a      	beq.n	8004c56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c3e:	d10a      	bne.n	8004c56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	605a      	str	r2, [r3, #4]
  }
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bc80      	pop	{r7}
 8004c80:	4770      	bx	lr

08004c82 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b086      	sub	sp, #24
 8004c86:	af02      	add	r7, sp, #8
 8004c88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c92:	f7fb ff46 	bl	8000b22 <HAL_GetTick>
 8004c96:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	2b08      	cmp	r3, #8
 8004ca4:	d10e      	bne.n	8004cc4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ca6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f82f 	bl	8004d18 <UART_WaitOnFlagUntilTimeout>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e025      	b.n	8004d10 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0304 	and.w	r3, r3, #4
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d10e      	bne.n	8004cf0 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cd2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f819 	bl	8004d18 <UART_WaitOnFlagUntilTimeout>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e00f      	b.n	8004d10 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b09c      	sub	sp, #112	; 0x70
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	603b      	str	r3, [r7, #0]
 8004d24:	4613      	mov	r3, r2
 8004d26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d28:	e0a9      	b.n	8004e7e <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d30:	f000 80a5 	beq.w	8004e7e <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d34:	f7fb fef5 	bl	8000b22 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d302      	bcc.n	8004d4a <UART_WaitOnFlagUntilTimeout+0x32>
 8004d44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d140      	bne.n	8004dcc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d52:	e853 3f00 	ldrex	r3, [r3]
 8004d56:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d5e:	667b      	str	r3, [r7, #100]	; 0x64
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	461a      	mov	r2, r3
 8004d66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d6a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d6e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d70:	e841 2300 	strex	r3, r2, [r1]
 8004d74:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1e6      	bne.n	8004d4a <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3308      	adds	r3, #8
 8004d82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d86:	e853 3f00 	ldrex	r3, [r3]
 8004d8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8e:	f023 0301 	bic.w	r3, r3, #1
 8004d92:	663b      	str	r3, [r7, #96]	; 0x60
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	3308      	adds	r3, #8
 8004d9a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d9c:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d9e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004da2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004da4:	e841 2300 	strex	r3, r2, [r1]
 8004da8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1e5      	bne.n	8004d7c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e069      	b.n	8004ea0 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0304 	and.w	r3, r3, #4
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d051      	beq.n	8004e7e <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69db      	ldr	r3, [r3, #28]
 8004de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004de4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004de8:	d149      	bne.n	8004e7e <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004df2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfc:	e853 3f00 	ldrex	r3, [r3]
 8004e00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e12:	637b      	str	r3, [r7, #52]	; 0x34
 8004e14:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e1a:	e841 2300 	strex	r3, r2, [r1]
 8004e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1e6      	bne.n	8004df4 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3308      	adds	r3, #8
 8004e2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	e853 3f00 	ldrex	r3, [r3]
 8004e34:	613b      	str	r3, [r7, #16]
   return(result);
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	f023 0301 	bic.w	r3, r3, #1
 8004e3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	3308      	adds	r3, #8
 8004e44:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e46:	623a      	str	r2, [r7, #32]
 8004e48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4a:	69f9      	ldr	r1, [r7, #28]
 8004e4c:	6a3a      	ldr	r2, [r7, #32]
 8004e4e:	e841 2300 	strex	r3, r2, [r1]
 8004e52:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1e5      	bne.n	8004e26 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e010      	b.n	8004ea0 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69da      	ldr	r2, [r3, #28]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	4013      	ands	r3, r2
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	bf0c      	ite	eq
 8004e8e:	2301      	moveq	r3, #1
 8004e90:	2300      	movne	r3, #0
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	461a      	mov	r2, r3
 8004e96:	79fb      	ldrb	r3, [r7, #7]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	f43f af46 	beq.w	8004d2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3770      	adds	r7, #112	; 0x70
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b09d      	sub	sp, #116	; 0x74
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	88fa      	ldrh	r2, [r7, #6]
 8004ec0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	88fa      	ldrh	r2, [r7, #6]
 8004ec8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eda:	d10e      	bne.n	8004efa <UART_Start_Receive_IT+0x52>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d105      	bne.n	8004ef0 <UART_Start_Receive_IT+0x48>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004eea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004eee:	e02d      	b.n	8004f4c <UART_Start_Receive_IT+0xa4>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	22ff      	movs	r2, #255	; 0xff
 8004ef4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004ef8:	e028      	b.n	8004f4c <UART_Start_Receive_IT+0xa4>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10d      	bne.n	8004f1e <UART_Start_Receive_IT+0x76>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d104      	bne.n	8004f14 <UART_Start_Receive_IT+0x6c>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	22ff      	movs	r2, #255	; 0xff
 8004f0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004f12:	e01b      	b.n	8004f4c <UART_Start_Receive_IT+0xa4>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	227f      	movs	r2, #127	; 0x7f
 8004f18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004f1c:	e016      	b.n	8004f4c <UART_Start_Receive_IT+0xa4>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f26:	d10d      	bne.n	8004f44 <UART_Start_Receive_IT+0x9c>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d104      	bne.n	8004f3a <UART_Start_Receive_IT+0x92>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	227f      	movs	r2, #127	; 0x7f
 8004f34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004f38:	e008      	b.n	8004f4c <UART_Start_Receive_IT+0xa4>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	223f      	movs	r2, #63	; 0x3f
 8004f3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004f42:	e003      	b.n	8004f4c <UART_Start_Receive_IT+0xa4>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2222      	movs	r2, #34	; 0x22
 8004f58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3308      	adds	r3, #8
 8004f62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f6e:	f043 0301 	orr.w	r3, r3, #1
 8004f72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3308      	adds	r3, #8
 8004f7a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f7c:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004f7e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f80:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f82:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f84:	e841 2300 	strex	r3, r2, [r1]
 8004f88:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1e5      	bne.n	8004f5c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f98:	d14d      	bne.n	8005036 <UART_Start_Receive_IT+0x18e>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004fa0:	88fa      	ldrh	r2, [r7, #6]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d347      	bcc.n	8005036 <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fae:	d107      	bne.n	8004fc0 <UART_Start_Receive_IT+0x118>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d103      	bne.n	8004fc0 <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4a38      	ldr	r2, [pc, #224]	; (800509c <UART_Start_Receive_IT+0x1f4>)
 8004fbc:	671a      	str	r2, [r3, #112]	; 0x70
 8004fbe:	e002      	b.n	8004fc6 <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4a37      	ldr	r2, [pc, #220]	; (80050a0 <UART_Start_Receive_IT+0x1f8>)
 8004fc4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fd6:	e853 3f00 	ldrex	r3, [r3]
 8004fda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fe2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fec:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fee:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ff2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ff4:	e841 2300 	strex	r3, r2, [r1]
 8004ff8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1e6      	bne.n	8004fce <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3308      	adds	r3, #8
 8005006:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500a:	e853 3f00 	ldrex	r3, [r3]
 800500e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005016:	667b      	str	r3, [r7, #100]	; 0x64
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3308      	adds	r3, #8
 800501e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005020:	637a      	str	r2, [r7, #52]	; 0x34
 8005022:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005024:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005026:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005028:	e841 2300 	strex	r3, r2, [r1]
 800502c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800502e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1e5      	bne.n	8005000 <UART_Start_Receive_IT+0x158>
 8005034:	e02c      	b.n	8005090 <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800503e:	d107      	bne.n	8005050 <UART_Start_Receive_IT+0x1a8>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d103      	bne.n	8005050 <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4a16      	ldr	r2, [pc, #88]	; (80050a4 <UART_Start_Receive_IT+0x1fc>)
 800504c:	671a      	str	r2, [r3, #112]	; 0x70
 800504e:	e002      	b.n	8005056 <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4a15      	ldr	r2, [pc, #84]	; (80050a8 <UART_Start_Receive_IT+0x200>)
 8005054:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	e853 3f00 	ldrex	r3, [r3]
 800506a:	613b      	str	r3, [r7, #16]
   return(result);
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005072:	663b      	str	r3, [r7, #96]	; 0x60
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	461a      	mov	r2, r3
 800507a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800507c:	623b      	str	r3, [r7, #32]
 800507e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005080:	69f9      	ldr	r1, [r7, #28]
 8005082:	6a3a      	ldr	r2, [r7, #32]
 8005084:	e841 2300 	strex	r3, r2, [r1]
 8005088:	61bb      	str	r3, [r7, #24]
   return(result);
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1e6      	bne.n	800505e <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3774      	adds	r7, #116	; 0x74
 8005096:	46bd      	mov	sp, r7
 8005098:	bc80      	pop	{r7}
 800509a:	4770      	bx	lr
 800509c:	08005aed 	.word	0x08005aed
 80050a0:	080057f5 	.word	0x080057f5
 80050a4:	08005695 	.word	0x08005695
 80050a8:	08005535 	.word	0x08005535

080050ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b095      	sub	sp, #84	; 0x54
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050bc:	e853 3f00 	ldrex	r3, [r3]
 80050c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	461a      	mov	r2, r3
 80050d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d2:	643b      	str	r3, [r7, #64]	; 0x40
 80050d4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050da:	e841 2300 	strex	r3, r2, [r1]
 80050de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1e6      	bne.n	80050b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3308      	adds	r3, #8
 80050ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	e853 3f00 	ldrex	r3, [r3]
 80050f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050fc:	f023 0301 	bic.w	r3, r3, #1
 8005100:	64bb      	str	r3, [r7, #72]	; 0x48
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3308      	adds	r3, #8
 8005108:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800510a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800510c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005112:	e841 2300 	strex	r3, r2, [r1]
 8005116:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1e3      	bne.n	80050e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005122:	2b01      	cmp	r3, #1
 8005124:	d118      	bne.n	8005158 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	e853 3f00 	ldrex	r3, [r3]
 8005132:	60bb      	str	r3, [r7, #8]
   return(result);
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f023 0310 	bic.w	r3, r3, #16
 800513a:	647b      	str	r3, [r7, #68]	; 0x44
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	461a      	mov	r2, r3
 8005142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005144:	61bb      	str	r3, [r7, #24]
 8005146:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005148:	6979      	ldr	r1, [r7, #20]
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	e841 2300 	strex	r3, r2, [r1]
 8005150:	613b      	str	r3, [r7, #16]
   return(result);
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1e6      	bne.n	8005126 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2220      	movs	r2, #32
 800515c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800516c:	bf00      	nop
 800516e:	3754      	adds	r7, #84	; 0x54
 8005170:	46bd      	mov	sp, r7
 8005172:	bc80      	pop	{r7}
 8005174:	4770      	bx	lr

08005176 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b084      	sub	sp, #16
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005182:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f7ff fa6e 	bl	8004676 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800519a:	bf00      	nop
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b08f      	sub	sp, #60	; 0x3c
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051b0:	2b21      	cmp	r3, #33	; 0x21
 80051b2:	d14c      	bne.n	800524e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d132      	bne.n	8005226 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	e853 3f00 	ldrex	r3, [r3]
 80051cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051d4:	637b      	str	r3, [r7, #52]	; 0x34
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	461a      	mov	r2, r3
 80051dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051e0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051e6:	e841 2300 	strex	r3, r2, [r1]
 80051ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1e6      	bne.n	80051c0 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	e853 3f00 	ldrex	r3, [r3]
 80051fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005206:	633b      	str	r3, [r7, #48]	; 0x30
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	461a      	mov	r2, r3
 800520e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005210:	61bb      	str	r3, [r7, #24]
 8005212:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005214:	6979      	ldr	r1, [r7, #20]
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	e841 2300 	strex	r3, r2, [r1]
 800521c:	613b      	str	r3, [r7, #16]
   return(result);
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1e6      	bne.n	80051f2 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005224:	e013      	b.n	800524e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800522a:	781a      	ldrb	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005242:	b29b      	uxth	r3, r3
 8005244:	3b01      	subs	r3, #1
 8005246:	b29a      	uxth	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800524e:	bf00      	nop
 8005250:	373c      	adds	r7, #60	; 0x3c
 8005252:	46bd      	mov	sp, r7
 8005254:	bc80      	pop	{r7}
 8005256:	4770      	bx	lr

08005258 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005258:	b480      	push	{r7}
 800525a:	b091      	sub	sp, #68	; 0x44
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005266:	2b21      	cmp	r3, #33	; 0x21
 8005268:	d151      	bne.n	800530e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005270:	b29b      	uxth	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d132      	bne.n	80052dc <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	e853 3f00 	ldrex	r3, [r3]
 8005282:	623b      	str	r3, [r7, #32]
   return(result);
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800528a:	63bb      	str	r3, [r7, #56]	; 0x38
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	461a      	mov	r2, r3
 8005292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005294:	633b      	str	r3, [r7, #48]	; 0x30
 8005296:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005298:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800529a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800529c:	e841 2300 	strex	r3, r2, [r1]
 80052a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1e6      	bne.n	8005276 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052bc:	637b      	str	r3, [r7, #52]	; 0x34
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c6:	61fb      	str	r3, [r7, #28]
 80052c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ca:	69b9      	ldr	r1, [r7, #24]
 80052cc:	69fa      	ldr	r2, [r7, #28]
 80052ce:	e841 2300 	strex	r3, r2, [r1]
 80052d2:	617b      	str	r3, [r7, #20]
   return(result);
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1e6      	bne.n	80052a8 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80052da:	e018      	b.n	800530e <UART_TxISR_16BIT+0xb6>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80052e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	461a      	mov	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052f0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f6:	1c9a      	adds	r2, r3, #2
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005302:	b29b      	uxth	r3, r3
 8005304:	3b01      	subs	r3, #1
 8005306:	b29a      	uxth	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800530e:	bf00      	nop
 8005310:	3744      	adds	r7, #68	; 0x44
 8005312:	46bd      	mov	sp, r7
 8005314:	bc80      	pop	{r7}
 8005316:	4770      	bx	lr

08005318 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005318:	b480      	push	{r7}
 800531a:	b091      	sub	sp, #68	; 0x44
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005326:	2b21      	cmp	r3, #33	; 0x21
 8005328:	d160      	bne.n	80053ec <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005330:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005332:	e057      	b.n	80053e4 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800533a:	b29b      	uxth	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	d133      	bne.n	80053a8 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3308      	adds	r3, #8
 8005346:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	e853 3f00 	ldrex	r3, [r3]
 800534e:	623b      	str	r3, [r7, #32]
   return(result);
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005356:	63bb      	str	r3, [r7, #56]	; 0x38
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3308      	adds	r3, #8
 800535e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005360:	633a      	str	r2, [r7, #48]	; 0x30
 8005362:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005364:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005368:	e841 2300 	strex	r3, r2, [r1]
 800536c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800536e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1e5      	bne.n	8005340 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	e853 3f00 	ldrex	r3, [r3]
 8005380:	60fb      	str	r3, [r7, #12]
   return(result);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005388:	637b      	str	r3, [r7, #52]	; 0x34
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005392:	61fb      	str	r3, [r7, #28]
 8005394:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005396:	69b9      	ldr	r1, [r7, #24]
 8005398:	69fa      	ldr	r2, [r7, #28]
 800539a:	e841 2300 	strex	r3, r2, [r1]
 800539e:	617b      	str	r3, [r7, #20]
   return(result);
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1e6      	bne.n	8005374 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80053a6:	e021      	b.n	80053ec <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d013      	beq.n	80053de <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ba:	781a      	ldrb	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c6:	1c5a      	adds	r2, r3, #1
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80053de:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80053e0:	3b01      	subs	r3, #1
 80053e2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80053e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1a4      	bne.n	8005334 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80053ea:	e7ff      	b.n	80053ec <UART_TxISR_8BIT_FIFOEN+0xd4>
 80053ec:	bf00      	nop
 80053ee:	3744      	adds	r7, #68	; 0x44
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bc80      	pop	{r7}
 80053f4:	4770      	bx	lr

080053f6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b091      	sub	sp, #68	; 0x44
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005404:	2b21      	cmp	r3, #33	; 0x21
 8005406:	d165      	bne.n	80054d4 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800540e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005410:	e05c      	b.n	80054cc <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005418:	b29b      	uxth	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d133      	bne.n	8005486 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3308      	adds	r3, #8
 8005424:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	e853 3f00 	ldrex	r3, [r3]
 800542c:	61fb      	str	r3, [r7, #28]
   return(result);
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005434:	637b      	str	r3, [r7, #52]	; 0x34
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3308      	adds	r3, #8
 800543c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800543e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005440:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005442:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005446:	e841 2300 	strex	r3, r2, [r1]
 800544a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1e5      	bne.n	800541e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	e853 3f00 	ldrex	r3, [r3]
 800545e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005466:	633b      	str	r3, [r7, #48]	; 0x30
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	461a      	mov	r2, r3
 800546e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005470:	61bb      	str	r3, [r7, #24]
 8005472:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005474:	6979      	ldr	r1, [r7, #20]
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	e841 2300 	strex	r3, r2, [r1]
 800547c:	613b      	str	r3, [r7, #16]
   return(result);
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1e6      	bne.n	8005452 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8005484:	e026      	b.n	80054d4 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005490:	2b00      	cmp	r3, #0
 8005492:	d018      	beq.n	80054c6 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005498:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800549a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	461a      	mov	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054a8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ae:	1c9a      	adds	r2, r3, #2
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	3b01      	subs	r3, #1
 80054be:	b29a      	uxth	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80054c6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80054c8:	3b01      	subs	r3, #1
 80054ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80054cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d19f      	bne.n	8005412 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80054d2:	e7ff      	b.n	80054d4 <UART_TxISR_16BIT_FIFOEN+0xde>
 80054d4:	bf00      	nop
 80054d6:	3744      	adds	r7, #68	; 0x44
 80054d8:	46bd      	mov	sp, r7
 80054da:	bc80      	pop	{r7}
 80054dc:	4770      	bx	lr

080054de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b088      	sub	sp, #32
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	e853 3f00 	ldrex	r3, [r3]
 80054f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054fa:	61fb      	str	r3, [r7, #28]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	461a      	mov	r2, r3
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	61bb      	str	r3, [r7, #24]
 8005506:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005508:	6979      	ldr	r1, [r7, #20]
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	e841 2300 	strex	r3, r2, [r1]
 8005510:	613b      	str	r3, [r7, #16]
   return(result);
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1e6      	bne.n	80054e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2220      	movs	r2, #32
 800551c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7ff f89c 	bl	8004664 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800552c:	bf00      	nop
 800552e:	3720      	adds	r7, #32
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b096      	sub	sp, #88	; 0x58
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005542:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554c:	2b22      	cmp	r3, #34	; 0x22
 800554e:	f040 8095 	bne.w	800567c <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005558:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800555c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005560:	b2d9      	uxtb	r1, r3
 8005562:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005566:	b2da      	uxtb	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800556c:	400a      	ands	r2, r1
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005576:	1c5a      	adds	r2, r3, #1
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005582:	b29b      	uxth	r3, r3
 8005584:	3b01      	subs	r3, #1
 8005586:	b29a      	uxth	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005594:	b29b      	uxth	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d178      	bne.n	800568c <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a2:	e853 3f00 	ldrex	r3, [r3]
 80055a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055ae:	653b      	str	r3, [r7, #80]	; 0x50
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	461a      	mov	r2, r3
 80055b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055b8:	647b      	str	r3, [r7, #68]	; 0x44
 80055ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055c0:	e841 2300 	strex	r3, r2, [r1]
 80055c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1e6      	bne.n	800559a <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	3308      	adds	r3, #8
 80055d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	e853 3f00 	ldrex	r3, [r3]
 80055da:	623b      	str	r3, [r7, #32]
   return(result);
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	f023 0301 	bic.w	r3, r3, #1
 80055e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3308      	adds	r3, #8
 80055ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055ec:	633a      	str	r2, [r7, #48]	; 0x30
 80055ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055f4:	e841 2300 	strex	r3, r2, [r1]
 80055f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1e5      	bne.n	80055cc <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2220      	movs	r2, #32
 8005604:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005612:	2b01      	cmp	r3, #1
 8005614:	d12e      	bne.n	8005674 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	e853 3f00 	ldrex	r3, [r3]
 8005628:	60fb      	str	r3, [r7, #12]
   return(result);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f023 0310 	bic.w	r3, r3, #16
 8005630:	64bb      	str	r3, [r7, #72]	; 0x48
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	461a      	mov	r2, r3
 8005638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800563a:	61fb      	str	r3, [r7, #28]
 800563c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563e:	69b9      	ldr	r1, [r7, #24]
 8005640:	69fa      	ldr	r2, [r7, #28]
 8005642:	e841 2300 	strex	r3, r2, [r1]
 8005646:	617b      	str	r3, [r7, #20]
   return(result);
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1e6      	bne.n	800561c <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	f003 0310 	and.w	r3, r3, #16
 8005658:	2b10      	cmp	r3, #16
 800565a:	d103      	bne.n	8005664 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2210      	movs	r2, #16
 8005662:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800566a:	4619      	mov	r1, r3
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7ff f80b 	bl	8004688 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005672:	e00b      	b.n	800568c <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7fb f973 	bl	8000960 <HAL_UART_RxCpltCallback>
}
 800567a:	e007      	b.n	800568c <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	699a      	ldr	r2, [r3, #24]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0208 	orr.w	r2, r2, #8
 800568a:	619a      	str	r2, [r3, #24]
}
 800568c:	bf00      	nop
 800568e:	3758      	adds	r7, #88	; 0x58
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b096      	sub	sp, #88	; 0x58
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80056a2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ac:	2b22      	cmp	r3, #34	; 0x22
 80056ae:	f040 8095 	bne.w	80057dc <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80056c2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80056c6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80056ca:	4013      	ands	r3, r2
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d6:	1c9a      	adds	r2, r3, #2
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	3b01      	subs	r3, #1
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d178      	bne.n	80057ec <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005702:	e853 3f00 	ldrex	r3, [r3]
 8005706:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800570e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	461a      	mov	r2, r3
 8005716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005718:	643b      	str	r3, [r7, #64]	; 0x40
 800571a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800571e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005720:	e841 2300 	strex	r3, r2, [r1]
 8005724:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1e6      	bne.n	80056fa <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	3308      	adds	r3, #8
 8005732:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	e853 3f00 	ldrex	r3, [r3]
 800573a:	61fb      	str	r3, [r7, #28]
   return(result);
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	f023 0301 	bic.w	r3, r3, #1
 8005742:	64bb      	str	r3, [r7, #72]	; 0x48
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	3308      	adds	r3, #8
 800574a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800574c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800574e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005750:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005754:	e841 2300 	strex	r3, r2, [r1]
 8005758:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1e5      	bne.n	800572c <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2220      	movs	r2, #32
 8005764:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005772:	2b01      	cmp	r3, #1
 8005774:	d12e      	bne.n	80057d4 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	e853 3f00 	ldrex	r3, [r3]
 8005788:	60bb      	str	r3, [r7, #8]
   return(result);
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	f023 0310 	bic.w	r3, r3, #16
 8005790:	647b      	str	r3, [r7, #68]	; 0x44
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	461a      	mov	r2, r3
 8005798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800579a:	61bb      	str	r3, [r7, #24]
 800579c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579e:	6979      	ldr	r1, [r7, #20]
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	e841 2300 	strex	r3, r2, [r1]
 80057a6:	613b      	str	r3, [r7, #16]
   return(result);
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1e6      	bne.n	800577c <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	f003 0310 	and.w	r3, r3, #16
 80057b8:	2b10      	cmp	r3, #16
 80057ba:	d103      	bne.n	80057c4 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2210      	movs	r2, #16
 80057c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80057ca:	4619      	mov	r1, r3
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7fe ff5b 	bl	8004688 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057d2:	e00b      	b.n	80057ec <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f7fb f8c3 	bl	8000960 <HAL_UART_RxCpltCallback>
}
 80057da:	e007      	b.n	80057ec <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699a      	ldr	r2, [r3, #24]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 0208 	orr.w	r2, r2, #8
 80057ea:	619a      	str	r2, [r3, #24]
}
 80057ec:	bf00      	nop
 80057ee:	3758      	adds	r7, #88	; 0x58
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b0a6      	sub	sp, #152	; 0x98
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005802:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582a:	2b22      	cmp	r3, #34	; 0x22
 800582c:	f040 814f 	bne.w	8005ace <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005836:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800583a:	e0f6      	b.n	8005a2a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005846:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800584a:	b2d9      	uxtb	r1, r3
 800584c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8005850:	b2da      	uxtb	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005856:	400a      	ands	r2, r1
 8005858:	b2d2      	uxtb	r2, r2
 800585a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800586c:	b29b      	uxth	r3, r3
 800586e:	3b01      	subs	r3, #1
 8005870:	b29a      	uxth	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005882:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005886:	f003 0307 	and.w	r3, r3, #7
 800588a:	2b00      	cmp	r3, #0
 800588c:	d053      	beq.n	8005936 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800588e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	d011      	beq.n	80058be <UART_RxISR_8BIT_FIFOEN+0xca>
 800589a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800589e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00b      	beq.n	80058be <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2201      	movs	r2, #1
 80058ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058b4:	f043 0201 	orr.w	r2, r3, #1
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d011      	beq.n	80058ee <UART_RxISR_8BIT_FIFOEN+0xfa>
 80058ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00b      	beq.n	80058ee <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2202      	movs	r2, #2
 80058dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058e4:	f043 0204 	orr.w	r2, r3, #4
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80058f2:	f003 0304 	and.w	r3, r3, #4
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d011      	beq.n	800591e <UART_RxISR_8BIT_FIFOEN+0x12a>
 80058fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00b      	beq.n	800591e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2204      	movs	r2, #4
 800590c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005914:	f043 0202 	orr.w	r2, r3, #2
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005924:	2b00      	cmp	r3, #0
 8005926:	d006      	beq.n	8005936 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f7fe fea4 	bl	8004676 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800593c:	b29b      	uxth	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d173      	bne.n	8005a2a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005948:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800594a:	e853 3f00 	ldrex	r3, [r3]
 800594e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005950:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005952:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005956:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	461a      	mov	r2, r3
 8005960:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005964:	66bb      	str	r3, [r7, #104]	; 0x68
 8005966:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005968:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800596a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800596c:	e841 2300 	strex	r3, r2, [r1]
 8005970:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005972:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1e4      	bne.n	8005942 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3308      	adds	r3, #8
 800597e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005982:	e853 3f00 	ldrex	r3, [r3]
 8005986:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800598a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800598e:	f023 0301 	bic.w	r3, r3, #1
 8005992:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3308      	adds	r3, #8
 800599a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800599c:	657a      	str	r2, [r7, #84]	; 0x54
 800599e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80059a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80059a4:	e841 2300 	strex	r3, r2, [r1]
 80059a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80059aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1e3      	bne.n	8005978 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2220      	movs	r2, #32
 80059b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d12e      	bne.n	8005a24 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d4:	e853 3f00 	ldrex	r3, [r3]
 80059d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059dc:	f023 0310 	bic.w	r3, r3, #16
 80059e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	461a      	mov	r2, r3
 80059e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059ea:	643b      	str	r3, [r7, #64]	; 0x40
 80059ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059f2:	e841 2300 	strex	r3, r2, [r1]
 80059f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1e6      	bne.n	80059cc <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69db      	ldr	r3, [r3, #28]
 8005a04:	f003 0310 	and.w	r3, r3, #16
 8005a08:	2b10      	cmp	r3, #16
 8005a0a:	d103      	bne.n	8005a14 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2210      	movs	r2, #16
 8005a12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7fe fe33 	bl	8004688 <HAL_UARTEx_RxEventCallback>
 8005a22:	e002      	b.n	8005a2a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f7fa ff9b 	bl	8000960 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005a2a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d006      	beq.n	8005a40 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8005a32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f47f aefe 	bne.w	800583c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a46:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005a4a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d045      	beq.n	8005ade <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005a58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d23e      	bcs.n	8005ade <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3308      	adds	r3, #8
 8005a66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	e853 3f00 	ldrex	r3, [r3]
 8005a6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a76:	673b      	str	r3, [r7, #112]	; 0x70
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	3308      	adds	r3, #8
 8005a7e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005a80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a88:	e841 2300 	strex	r3, r2, [r1]
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1e5      	bne.n	8005a60 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a14      	ldr	r2, [pc, #80]	; (8005ae8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8005a98:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	e853 3f00 	ldrex	r3, [r3]
 8005aa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f043 0320 	orr.w	r3, r3, #32
 8005aae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab8:	61bb      	str	r3, [r7, #24]
 8005aba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abc:	6979      	ldr	r1, [r7, #20]
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	e841 2300 	strex	r3, r2, [r1]
 8005ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1e6      	bne.n	8005a9a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005acc:	e007      	b.n	8005ade <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	699a      	ldr	r2, [r3, #24]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f042 0208 	orr.w	r2, r2, #8
 8005adc:	619a      	str	r2, [r3, #24]
}
 8005ade:	bf00      	nop
 8005ae0:	3798      	adds	r7, #152	; 0x98
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	08005535 	.word	0x08005535

08005aec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b0a8      	sub	sp, #160	; 0xa0
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005afa:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69db      	ldr	r3, [r3, #28]
 8005b04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b22:	2b22      	cmp	r3, #34	; 0x22
 8005b24:	f040 8153 	bne.w	8005dce <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005b2e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005b32:	e0fa      	b.n	8005d2a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8005b46:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8005b4a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005b4e:	4013      	ands	r3, r2
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b56:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b5c:	1c9a      	adds	r2, r3, #2
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005b7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b82:	f003 0307 	and.w	r3, r3, #7
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d053      	beq.n	8005c32 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d011      	beq.n	8005bba <UART_RxISR_16BIT_FIFOEN+0xce>
 8005b96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00b      	beq.n	8005bba <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bb0:	f043 0201 	orr.w	r2, r3, #1
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d011      	beq.n	8005bea <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005bc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00b      	beq.n	8005bea <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005be0:	f043 0204 	orr.w	r2, r3, #4
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bee:	f003 0304 	and.w	r3, r3, #4
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d011      	beq.n	8005c1a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005bf6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00b      	beq.n	8005c1a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2204      	movs	r2, #4
 8005c08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c10:	f043 0202 	orr.w	r2, r3, #2
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d006      	beq.n	8005c32 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f7fe fd26 	bl	8004676 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d175      	bne.n	8005d2a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c46:	e853 3f00 	ldrex	r3, [r3]
 8005c4a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c62:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c64:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c66:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c68:	e841 2300 	strex	r3, r2, [r1]
 8005c6c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1e4      	bne.n	8005c3e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	3308      	adds	r3, #8
 8005c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c7e:	e853 3f00 	ldrex	r3, [r3]
 8005c82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c8a:	f023 0301 	bic.w	r3, r3, #1
 8005c8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	3308      	adds	r3, #8
 8005c98:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c9c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c9e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ca2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ca4:	e841 2300 	strex	r3, r2, [r1]
 8005ca8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1e1      	bne.n	8005c74 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d12e      	bne.n	8005d24 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd4:	e853 3f00 	ldrex	r3, [r3]
 8005cd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cdc:	f023 0310 	bic.w	r3, r3, #16
 8005ce0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cea:	647b      	str	r3, [r7, #68]	; 0x44
 8005cec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cf0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cf2:	e841 2300 	strex	r3, r2, [r1]
 8005cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1e6      	bne.n	8005ccc <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	69db      	ldr	r3, [r3, #28]
 8005d04:	f003 0310 	and.w	r3, r3, #16
 8005d08:	2b10      	cmp	r3, #16
 8005d0a:	d103      	bne.n	8005d14 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2210      	movs	r2, #16
 8005d12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7fe fcb3 	bl	8004688 <HAL_UARTEx_RxEventCallback>
 8005d22:	e002      	b.n	8005d2a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7fa fe1b 	bl	8000960 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005d2a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d006      	beq.n	8005d40 <UART_RxISR_16BIT_FIFOEN+0x254>
 8005d32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d36:	f003 0320 	and.w	r3, r3, #32
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f47f aefa 	bne.w	8005b34 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d46:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005d4a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d045      	beq.n	8005dde <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005d58:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d23e      	bcs.n	8005dde <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3308      	adds	r3, #8
 8005d66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	e853 3f00 	ldrex	r3, [r3]
 8005d6e:	623b      	str	r3, [r7, #32]
   return(result);
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d76:	677b      	str	r3, [r7, #116]	; 0x74
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3308      	adds	r3, #8
 8005d7e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005d80:	633a      	str	r2, [r7, #48]	; 0x30
 8005d82:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d88:	e841 2300 	strex	r3, r2, [r1]
 8005d8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1e5      	bne.n	8005d60 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a14      	ldr	r2, [pc, #80]	; (8005de8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8005d98:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	e853 3f00 	ldrex	r3, [r3]
 8005da6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f043 0320 	orr.w	r3, r3, #32
 8005dae:	673b      	str	r3, [r7, #112]	; 0x70
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	461a      	mov	r2, r3
 8005db6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005db8:	61fb      	str	r3, [r7, #28]
 8005dba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbc:	69b9      	ldr	r1, [r7, #24]
 8005dbe:	69fa      	ldr	r2, [r7, #28]
 8005dc0:	e841 2300 	strex	r3, r2, [r1]
 8005dc4:	617b      	str	r3, [r7, #20]
   return(result);
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1e6      	bne.n	8005d9a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005dcc:	e007      	b.n	8005dde <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	699a      	ldr	r2, [r3, #24]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f042 0208 	orr.w	r2, r2, #8
 8005ddc:	619a      	str	r2, [r3, #24]
}
 8005dde:	bf00      	nop
 8005de0:	37a0      	adds	r7, #160	; 0xa0
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	08005695 	.word	0x08005695

08005dec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bc80      	pop	{r7}
 8005dfc:	4770      	bx	lr

08005dfe <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b083      	sub	sp, #12
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005e06:	bf00      	nop
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bc80      	pop	{r7}
 8005e0e:	4770      	bx	lr

08005e10 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bc80      	pop	{r7}
 8005e20:	4770      	bx	lr

08005e22 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b085      	sub	sp, #20
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d101      	bne.n	8005e38 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e34:	2302      	movs	r3, #2
 8005e36:	e027      	b.n	8005e88 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2224      	movs	r2, #36	; 0x24
 8005e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f022 0201 	bic.w	r2, r2, #1
 8005e5e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e66:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2220      	movs	r2, #32
 8005e7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bc80      	pop	{r7}
 8005e90:	4770      	bx	lr

08005e92 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b084      	sub	sp, #16
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d101      	bne.n	8005eaa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	e02d      	b.n	8005f06 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2224      	movs	r2, #36	; 0x24
 8005eb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f022 0201 	bic.w	r2, r2, #1
 8005ed0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f850 	bl	8005f8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b084      	sub	sp, #16
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d101      	bne.n	8005f26 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f22:	2302      	movs	r3, #2
 8005f24:	e02d      	b.n	8005f82 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2224      	movs	r2, #36	; 0x24
 8005f32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f022 0201 	bic.w	r2, r2, #1
 8005f4c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f812 	bl	8005f8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
	...

08005f8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d108      	bne.n	8005fae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005fac:	e031      	b.n	8006012 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005fae:	2308      	movs	r3, #8
 8005fb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005fb2:	2308      	movs	r3, #8
 8005fb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	0e5b      	lsrs	r3, r3, #25
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	f003 0307 	and.w	r3, r3, #7
 8005fc4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	0f5b      	lsrs	r3, r3, #29
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	f003 0307 	and.w	r3, r3, #7
 8005fd4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fd6:	7bbb      	ldrb	r3, [r7, #14]
 8005fd8:	7b3a      	ldrb	r2, [r7, #12]
 8005fda:	4910      	ldr	r1, [pc, #64]	; (800601c <UARTEx_SetNbDataToProcess+0x90>)
 8005fdc:	5c8a      	ldrb	r2, [r1, r2]
 8005fde:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005fe2:	7b3a      	ldrb	r2, [r7, #12]
 8005fe4:	490e      	ldr	r1, [pc, #56]	; (8006020 <UARTEx_SetNbDataToProcess+0x94>)
 8005fe6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fe8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
 8005ff6:	7b7a      	ldrb	r2, [r7, #13]
 8005ff8:	4908      	ldr	r1, [pc, #32]	; (800601c <UARTEx_SetNbDataToProcess+0x90>)
 8005ffa:	5c8a      	ldrb	r2, [r1, r2]
 8005ffc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006000:	7b7a      	ldrb	r2, [r7, #13]
 8006002:	4907      	ldr	r1, [pc, #28]	; (8006020 <UARTEx_SetNbDataToProcess+0x94>)
 8006004:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006006:	fb93 f3f2 	sdiv	r3, r3, r2
 800600a:	b29a      	uxth	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006012:	bf00      	nop
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	bc80      	pop	{r7}
 800601a:	4770      	bx	lr
 800601c:	0800a06c 	.word	0x0800a06c
 8006020:	0800a074 	.word	0x0800a074

08006024 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af02      	add	r7, sp, #8
 800602a:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 800602c:	4a21      	ldr	r2, [pc, #132]	; (80060b4 <RadioInit+0x90>)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8006032:	4b21      	ldr	r3, [pc, #132]	; (80060b8 <RadioInit+0x94>)
 8006034:	2200      	movs	r2, #0
 8006036:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8006038:	4b1f      	ldr	r3, [pc, #124]	; (80060b8 <RadioInit+0x94>)
 800603a:	2200      	movs	r2, #0
 800603c:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 800603e:	4b1e      	ldr	r3, [pc, #120]	; (80060b8 <RadioInit+0x94>)
 8006040:	2200      	movs	r2, #0
 8006042:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 8006044:	481d      	ldr	r0, [pc, #116]	; (80060bc <RadioInit+0x98>)
 8006046:	f001 fe7b 	bl	8007d40 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 800604a:	2000      	movs	r0, #0
 800604c:	f001 f818 	bl	8007080 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 8006050:	f002 f90e 	bl	8008270 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8006054:	2100      	movs	r1, #0
 8006056:	2000      	movs	r0, #0
 8006058:	f002 fc64 	bl	8008924 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 800605c:	2204      	movs	r2, #4
 800605e:	2100      	movs	r1, #0
 8006060:	2001      	movs	r0, #1
 8006062:	f002 fa8f 	bl	8008584 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8006066:	2300      	movs	r3, #0
 8006068:	2200      	movs	r2, #0
 800606a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800606e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006072:	f002 f9c3 	bl	80083fc <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8006076:	f000 fe95 	bl	8006da4 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800607a:	2300      	movs	r3, #0
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	4b10      	ldr	r3, [pc, #64]	; (80060c0 <RadioInit+0x9c>)
 8006080:	2200      	movs	r2, #0
 8006082:	f04f 31ff 	mov.w	r1, #4294967295
 8006086:	480f      	ldr	r0, [pc, #60]	; (80060c4 <RadioInit+0xa0>)
 8006088:	f003 f8ce 	bl	8009228 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800608c:	2300      	movs	r3, #0
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	4b0d      	ldr	r3, [pc, #52]	; (80060c8 <RadioInit+0xa4>)
 8006092:	2200      	movs	r2, #0
 8006094:	f04f 31ff 	mov.w	r1, #4294967295
 8006098:	480c      	ldr	r0, [pc, #48]	; (80060cc <RadioInit+0xa8>)
 800609a:	f003 f8c5 	bl	8009228 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800609e:	4809      	ldr	r0, [pc, #36]	; (80060c4 <RadioInit+0xa0>)
 80060a0:	f003 f966 	bl	8009370 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80060a4:	4809      	ldr	r0, [pc, #36]	; (80060cc <RadioInit+0xa8>)
 80060a6:	f003 f963 	bl	8009370 <UTIL_TIMER_Stop>
}
 80060aa:	bf00      	nop
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	200002a0 	.word	0x200002a0
 80060b8:	20000594 	.word	0x20000594
 80060bc:	08007165 	.word	0x08007165
 80060c0:	080070ed 	.word	0x080070ed
 80060c4:	200005ec 	.word	0x200005ec
 80060c8:	08007101 	.word	0x08007101
 80060cc:	20000604 	.word	0x20000604

080060d0 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80060d4:	f001 fe78 	bl	8007dc8 <SUBGRF_GetOperatingMode>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b07      	cmp	r3, #7
 80060dc:	d00a      	beq.n	80060f4 <RadioGetStatus+0x24>
 80060de:	2b07      	cmp	r3, #7
 80060e0:	dc0a      	bgt.n	80060f8 <RadioGetStatus+0x28>
 80060e2:	2b04      	cmp	r3, #4
 80060e4:	d002      	beq.n	80060ec <RadioGetStatus+0x1c>
 80060e6:	2b05      	cmp	r3, #5
 80060e8:	d002      	beq.n	80060f0 <RadioGetStatus+0x20>
 80060ea:	e005      	b.n	80060f8 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80060ec:	2302      	movs	r3, #2
 80060ee:	e004      	b.n	80060fa <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e002      	b.n	80060fa <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e000      	b.n	80060fa <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80060f8:	2300      	movs	r3, #0
    }
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	bd80      	pop	{r7, pc}
	...

08006100 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	4603      	mov	r3, r0
 8006108:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 800610a:	4a25      	ldr	r2, [pc, #148]	; (80061a0 <RadioSetModem+0xa0>)
 800610c:	79fb      	ldrb	r3, [r7, #7]
 800610e:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 8006110:	79fb      	ldrb	r3, [r7, #7]
 8006112:	4618      	mov	r0, r3
 8006114:	f002 ffcb 	bl	80090ae <RFW_SetRadioModem>
    switch( modem )
 8006118:	79fb      	ldrb	r3, [r7, #7]
 800611a:	3b01      	subs	r3, #1
 800611c:	2b03      	cmp	r3, #3
 800611e:	d80b      	bhi.n	8006138 <RadioSetModem+0x38>
 8006120:	a201      	add	r2, pc, #4	; (adr r2, 8006128 <RadioSetModem+0x28>)
 8006122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006126:	bf00      	nop
 8006128:	08006147 	.word	0x08006147
 800612c:	0800616d 	.word	0x0800616d
 8006130:	0800617b 	.word	0x0800617b
 8006134:	08006189 	.word	0x08006189
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8006138:	2000      	movs	r0, #0
 800613a:	f002 f9fd 	bl	8008538 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800613e:	4b18      	ldr	r3, [pc, #96]	; (80061a0 <RadioSetModem+0xa0>)
 8006140:	2200      	movs	r2, #0
 8006142:	735a      	strb	r2, [r3, #13]
        break;
 8006144:	e028      	b.n	8006198 <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8006146:	2001      	movs	r0, #1
 8006148:	f002 f9f6 	bl	8008538 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800614c:	4b14      	ldr	r3, [pc, #80]	; (80061a0 <RadioSetModem+0xa0>)
 800614e:	7b5a      	ldrb	r2, [r3, #13]
 8006150:	4b13      	ldr	r3, [pc, #76]	; (80061a0 <RadioSetModem+0xa0>)
 8006152:	7b1b      	ldrb	r3, [r3, #12]
 8006154:	429a      	cmp	r2, r3
 8006156:	d01e      	beq.n	8006196 <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8006158:	4b11      	ldr	r3, [pc, #68]	; (80061a0 <RadioSetModem+0xa0>)
 800615a:	7b1a      	ldrb	r2, [r3, #12]
 800615c:	4b10      	ldr	r3, [pc, #64]	; (80061a0 <RadioSetModem+0xa0>)
 800615e:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8006160:	4b0f      	ldr	r3, [pc, #60]	; (80061a0 <RadioSetModem+0xa0>)
 8006162:	7b5b      	ldrb	r3, [r3, #13]
 8006164:	4618      	mov	r0, r3
 8006166:	f000 ff8b 	bl	8007080 <RadioSetPublicNetwork>
        }
        break;
 800616a:	e014      	b.n	8006196 <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800616c:	2002      	movs	r0, #2
 800616e:	f002 f9e3 	bl	8008538 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006172:	4b0b      	ldr	r3, [pc, #44]	; (80061a0 <RadioSetModem+0xa0>)
 8006174:	2200      	movs	r2, #0
 8006176:	735a      	strb	r2, [r3, #13]
        break;
 8006178:	e00e      	b.n	8006198 <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800617a:	2002      	movs	r0, #2
 800617c:	f002 f9dc 	bl	8008538 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006180:	4b07      	ldr	r3, [pc, #28]	; (80061a0 <RadioSetModem+0xa0>)
 8006182:	2200      	movs	r2, #0
 8006184:	735a      	strb	r2, [r3, #13]
        break;
 8006186:	e007      	b.n	8006198 <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8006188:	2000      	movs	r0, #0
 800618a:	f002 f9d5 	bl	8008538 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800618e:	4b04      	ldr	r3, [pc, #16]	; (80061a0 <RadioSetModem+0xa0>)
 8006190:	2200      	movs	r2, #0
 8006192:	735a      	strb	r2, [r3, #13]
        break;
 8006194:	e000      	b.n	8006198 <RadioSetModem+0x98>
        break;
 8006196:	bf00      	nop
    }
}
 8006198:	bf00      	nop
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	20000594 	.word	0x20000594

080061a4 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f002 f981 	bl	80084b4 <SUBGRF_SetRfFrequency>
}
 80061b2:	bf00      	nop
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b090      	sub	sp, #64	; 0x40
 80061be:	af0a      	add	r7, sp, #40	; 0x28
 80061c0:	60f8      	str	r0, [r7, #12]
 80061c2:	60b9      	str	r1, [r7, #8]
 80061c4:	603b      	str	r3, [r7, #0]
 80061c6:	4613      	mov	r3, r2
 80061c8:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80061ca:	2301      	movs	r3, #1
 80061cc:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80061ce:	2300      	movs	r3, #0
 80061d0:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80061d2:	2300      	movs	r3, #0
 80061d4:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 80061d6:	f000 fdf8 	bl	8006dca <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 80061da:	2000      	movs	r0, #0
 80061dc:	f7ff ff90 	bl	8006100 <RadioSetModem>

    RadioSetChannel( freq );
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f7ff ffdf 	bl	80061a4 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80061e6:	2301      	movs	r3, #1
 80061e8:	9309      	str	r3, [sp, #36]	; 0x24
 80061ea:	2300      	movs	r3, #0
 80061ec:	9308      	str	r3, [sp, #32]
 80061ee:	2300      	movs	r3, #0
 80061f0:	9307      	str	r3, [sp, #28]
 80061f2:	2300      	movs	r3, #0
 80061f4:	9306      	str	r3, [sp, #24]
 80061f6:	2300      	movs	r3, #0
 80061f8:	9305      	str	r3, [sp, #20]
 80061fa:	2300      	movs	r3, #0
 80061fc:	9304      	str	r3, [sp, #16]
 80061fe:	2300      	movs	r3, #0
 8006200:	9303      	str	r3, [sp, #12]
 8006202:	2300      	movs	r3, #0
 8006204:	9302      	str	r3, [sp, #8]
 8006206:	2303      	movs	r3, #3
 8006208:	9301      	str	r3, [sp, #4]
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	2300      	movs	r3, #0
 8006210:	f44f 7216 	mov.w	r2, #600	; 0x258
 8006214:	68b9      	ldr	r1, [r7, #8]
 8006216:	2000      	movs	r0, #0
 8006218:	f000 f840 	bl	800629c <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 800621c:	2000      	movs	r0, #0
 800621e:	f000 fddb 	bl	8006dd8 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8006222:	f000 ff5b 	bl	80070dc <RadioGetWakeupTime>
 8006226:	4603      	mov	r3, r0
 8006228:	4618      	mov	r0, r3
 800622a:	f7fa fc81 	bl	8000b30 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 800622e:	f003 f939 	bl	80094a4 <UTIL_TIMER_GetCurrentTime>
 8006232:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8006234:	e00d      	b.n	8006252 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8006236:	2000      	movs	r0, #0
 8006238:	f000 fea0 	bl	8006f7c <RadioRssi>
 800623c:	4603      	mov	r3, r0
 800623e:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8006240:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006244:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006248:	429a      	cmp	r2, r3
 800624a:	dd02      	ble.n	8006252 <RadioIsChannelFree+0x98>
        {
            status = false;
 800624c:	2300      	movs	r3, #0
 800624e:	75fb      	strb	r3, [r7, #23]
            break;
 8006250:	e006      	b.n	8006260 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8006252:	6938      	ldr	r0, [r7, #16]
 8006254:	f003 f938 	bl	80094c8 <UTIL_TIMER_GetElapsedTime>
 8006258:	4602      	mov	r2, r0
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	4293      	cmp	r3, r2
 800625e:	d8ea      	bhi.n	8006236 <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8006260:	f000 fdb3 	bl	8006dca <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 8006264:	7dfb      	ldrb	r3, [r7, #23]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3718      	adds	r7, #24
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <RadioRandom>:

static uint32_t RadioRandom( void )
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b082      	sub	sp, #8
 8006272:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8006274:	2300      	movs	r3, #0
 8006276:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 8006278:	2001      	movs	r0, #1
 800627a:	f7ff ff41 	bl	8006100 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800627e:	2300      	movs	r3, #0
 8006280:	2200      	movs	r2, #0
 8006282:	2100      	movs	r1, #0
 8006284:	2000      	movs	r0, #0
 8006286:	f002 f8b9 	bl	80083fc <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 800628a:	f001 fe6e 	bl	8007f6a <SUBGRF_GetRandom>
 800628e:	6078      	str	r0, [r7, #4]

    return rnd;
 8006290:	687b      	ldr	r3, [r7, #4]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
	...

0800629c <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b08a      	sub	sp, #40	; 0x28
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60b9      	str	r1, [r7, #8]
 80062a4:	607a      	str	r2, [r7, #4]
 80062a6:	461a      	mov	r2, r3
 80062a8:	4603      	mov	r3, r0
 80062aa:	73fb      	strb	r3, [r7, #15]
 80062ac:	4613      	mov	r3, r2
 80062ae:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 80062b0:	4abd      	ldr	r2, [pc, #756]	; (80065a8 <RadioSetRxConfig+0x30c>)
 80062b2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80062b6:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80062b8:	f002 feb7 	bl	800902a <RFW_DeInit>
    if( rxContinuous == true )
 80062bc:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80062c4:	2300      	movs	r3, #0
 80062c6:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 80062c8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d004      	beq.n	80062da <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 80062d0:	4ab6      	ldr	r2, [pc, #728]	; (80065ac <RadioSetRxConfig+0x310>)
 80062d2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80062d6:	7013      	strb	r3, [r2, #0]
 80062d8:	e002      	b.n	80062e0 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 80062da:	4bb4      	ldr	r3, [pc, #720]	; (80065ac <RadioSetRxConfig+0x310>)
 80062dc:	22ff      	movs	r2, #255	; 0xff
 80062de:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 80062e0:	7bfb      	ldrb	r3, [r7, #15]
 80062e2:	2b04      	cmp	r3, #4
 80062e4:	d009      	beq.n	80062fa <RadioSetRxConfig+0x5e>
 80062e6:	2b04      	cmp	r3, #4
 80062e8:	f300 81da 	bgt.w	80066a0 <RadioSetRxConfig+0x404>
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 80bf 	beq.w	8006470 <RadioSetRxConfig+0x1d4>
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	f000 812c 	beq.w	8006550 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80062f8:	e1d2      	b.n	80066a0 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80062fa:	2001      	movs	r0, #1
 80062fc:	f001 ff7a 	bl	80081f4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006300:	4ba9      	ldr	r3, [pc, #676]	; (80065a8 <RadioSetRxConfig+0x30c>)
 8006302:	2200      	movs	r2, #0
 8006304:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006308:	4aa7      	ldr	r2, [pc, #668]	; (80065a8 <RadioSetRxConfig+0x30c>)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800630e:	4ba6      	ldr	r3, [pc, #664]	; (80065a8 <RadioSetRxConfig+0x30c>)
 8006310:	2209      	movs	r2, #9
 8006312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8006316:	4ba4      	ldr	r3, [pc, #656]	; (80065a8 <RadioSetRxConfig+0x30c>)
 8006318:	f44f 7248 	mov.w	r2, #800	; 0x320
 800631c:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800631e:	68b8      	ldr	r0, [r7, #8]
 8006320:	f002 fdb4 	bl	8008e8c <SUBGRF_GetFskBandwidthRegValue>
 8006324:	4603      	mov	r3, r0
 8006326:	461a      	mov	r2, r3
 8006328:	4b9f      	ldr	r3, [pc, #636]	; (80065a8 <RadioSetRxConfig+0x30c>)
 800632a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800632e:	4b9e      	ldr	r3, [pc, #632]	; (80065a8 <RadioSetRxConfig+0x30c>)
 8006330:	2200      	movs	r2, #0
 8006332:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006334:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	b29a      	uxth	r2, r3
 800633a:	4b9b      	ldr	r3, [pc, #620]	; (80065a8 <RadioSetRxConfig+0x30c>)
 800633c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800633e:	4b9a      	ldr	r3, [pc, #616]	; (80065a8 <RadioSetRxConfig+0x30c>)
 8006340:	2200      	movs	r2, #0
 8006342:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8006344:	4b98      	ldr	r3, [pc, #608]	; (80065a8 <RadioSetRxConfig+0x30c>)
 8006346:	2210      	movs	r2, #16
 8006348:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800634a:	4b97      	ldr	r3, [pc, #604]	; (80065a8 <RadioSetRxConfig+0x30c>)
 800634c:	2200      	movs	r2, #0
 800634e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8006350:	4b95      	ldr	r3, [pc, #596]	; (80065a8 <RadioSetRxConfig+0x30c>)
 8006352:	2200      	movs	r2, #0
 8006354:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8006356:	4b95      	ldr	r3, [pc, #596]	; (80065ac <RadioSetRxConfig+0x310>)
 8006358:	781a      	ldrb	r2, [r3, #0]
 800635a:	4b93      	ldr	r3, [pc, #588]	; (80065a8 <RadioSetRxConfig+0x30c>)
 800635c:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800635e:	4b92      	ldr	r3, [pc, #584]	; (80065a8 <RadioSetRxConfig+0x30c>)
 8006360:	2201      	movs	r2, #1
 8006362:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8006364:	4b90      	ldr	r3, [pc, #576]	; (80065a8 <RadioSetRxConfig+0x30c>)
 8006366:	2200      	movs	r2, #0
 8006368:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800636a:	2004      	movs	r0, #4
 800636c:	f7ff fec8 	bl	8006100 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006370:	488f      	ldr	r0, [pc, #572]	; (80065b0 <RadioSetRxConfig+0x314>)
 8006372:	f002 f96d 	bl	8008650 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006376:	488f      	ldr	r0, [pc, #572]	; (80065b4 <RadioSetRxConfig+0x318>)
 8006378:	f002 fa36 	bl	80087e8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800637c:	4a8e      	ldr	r2, [pc, #568]	; (80065b8 <RadioSetRxConfig+0x31c>)
 800637e:	f107 031c 	add.w	r3, r7, #28
 8006382:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006386:	e883 0003 	stmia.w	r3, {r0, r1}
 800638a:	f107 031c 	add.w	r3, r7, #28
 800638e:	4618      	mov	r0, r3
 8006390:	f001 fd69 	bl	8007e66 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8006394:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006398:	f001 fdb4 	bl	8007f04 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 800639c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80063a0:	f000 fe0b 	bl	8006fba <RadioRead>
 80063a4:	4603      	mov	r3, r0
 80063a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 80063aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063ae:	f023 0310 	bic.w	r3, r3, #16
 80063b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 80063b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063ba:	4619      	mov	r1, r3
 80063bc:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80063c0:	f000 fde9 	bl	8006f96 <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 80063c4:	2104      	movs	r1, #4
 80063c6:	f640 00b9 	movw	r0, #2233	; 0x8b9
 80063ca:	f000 fde4 	bl	8006f96 <RadioWrite>
            modReg= RadioRead(0x89b);
 80063ce:	f640 009b 	movw	r0, #2203	; 0x89b
 80063d2:	f000 fdf2 	bl	8006fba <RadioRead>
 80063d6:	4603      	mov	r3, r0
 80063d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80063dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063e0:	f023 031c 	bic.w	r3, r3, #28
 80063e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 80063e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063ec:	f043 0308 	orr.w	r3, r3, #8
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	4619      	mov	r1, r3
 80063f4:	f640 009b 	movw	r0, #2203	; 0x89b
 80063f8:	f000 fdcd 	bl	8006f96 <RadioWrite>
            modReg= RadioRead(0x6d1);
 80063fc:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8006400:	f000 fddb 	bl	8006fba <RadioRead>
 8006404:	4603      	mov	r3, r0
 8006406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800640a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800640e:	f023 0318 	bic.w	r3, r3, #24
 8006412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 8006416:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800641a:	f043 0318 	orr.w	r3, r3, #24
 800641e:	b2db      	uxtb	r3, r3
 8006420:	4619      	mov	r1, r3
 8006422:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8006426:	f000 fdb6 	bl	8006f96 <RadioWrite>
            modReg= RadioRead(0x6ac);
 800642a:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800642e:	f000 fdc4 	bl	8006fba <RadioRead>
 8006432:	4603      	mov	r3, r0
 8006434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8006438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800643c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006440:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 8006444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006448:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800644c:	b2db      	uxtb	r3, r3
 800644e:	4619      	mov	r1, r3
 8006450:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8006454:	f000 fd9f 	bl	8006f96 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8006458:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800645a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800645e:	fb02 f303 	mul.w	r3, r2, r3
 8006462:	461a      	mov	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	fbb2 f3f3 	udiv	r3, r2, r3
 800646a:	4a4f      	ldr	r2, [pc, #316]	; (80065a8 <RadioSetRxConfig+0x30c>)
 800646c:	6093      	str	r3, [r2, #8]
            break;
 800646e:	e118      	b.n	80066a2 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8006470:	2000      	movs	r0, #0
 8006472:	f001 febf 	bl	80081f4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006476:	4b4c      	ldr	r3, [pc, #304]	; (80065a8 <RadioSetRxConfig+0x30c>)
 8006478:	2200      	movs	r2, #0
 800647a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800647e:	4a4a      	ldr	r2, [pc, #296]	; (80065a8 <RadioSetRxConfig+0x30c>)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8006484:	4b48      	ldr	r3, [pc, #288]	; (80065a8 <RadioSetRxConfig+0x30c>)
 8006486:	220b      	movs	r2, #11
 8006488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800648c:	68b8      	ldr	r0, [r7, #8]
 800648e:	f002 fcfd 	bl	8008e8c <SUBGRF_GetFskBandwidthRegValue>
 8006492:	4603      	mov	r3, r0
 8006494:	461a      	mov	r2, r3
 8006496:	4b44      	ldr	r3, [pc, #272]	; (80065a8 <RadioSetRxConfig+0x30c>)
 8006498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800649c:	4b42      	ldr	r3, [pc, #264]	; (80065a8 <RadioSetRxConfig+0x30c>)
 800649e:	2200      	movs	r2, #0
 80064a0:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80064a2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80064a4:	00db      	lsls	r3, r3, #3
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	4b3f      	ldr	r3, [pc, #252]	; (80065a8 <RadioSetRxConfig+0x30c>)
 80064aa:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80064ac:	4b3e      	ldr	r3, [pc, #248]	; (80065a8 <RadioSetRxConfig+0x30c>)
 80064ae:	2204      	movs	r2, #4
 80064b0:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80064b2:	4b3d      	ldr	r3, [pc, #244]	; (80065a8 <RadioSetRxConfig+0x30c>)
 80064b4:	2218      	movs	r2, #24
 80064b6:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80064b8:	4b3b      	ldr	r3, [pc, #236]	; (80065a8 <RadioSetRxConfig+0x30c>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80064be:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80064c2:	f083 0301 	eor.w	r3, r3, #1
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	461a      	mov	r2, r3
 80064ca:	4b37      	ldr	r3, [pc, #220]	; (80065a8 <RadioSetRxConfig+0x30c>)
 80064cc:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80064ce:	4b37      	ldr	r3, [pc, #220]	; (80065ac <RadioSetRxConfig+0x310>)
 80064d0:	781a      	ldrb	r2, [r3, #0]
 80064d2:	4b35      	ldr	r3, [pc, #212]	; (80065a8 <RadioSetRxConfig+0x30c>)
 80064d4:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 80064d6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80064de:	4b32      	ldr	r3, [pc, #200]	; (80065a8 <RadioSetRxConfig+0x30c>)
 80064e0:	22f2      	movs	r2, #242	; 0xf2
 80064e2:	75da      	strb	r2, [r3, #23]
 80064e4:	e002      	b.n	80064ec <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80064e6:	4b30      	ldr	r3, [pc, #192]	; (80065a8 <RadioSetRxConfig+0x30c>)
 80064e8:	2201      	movs	r2, #1
 80064ea:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80064ec:	4b2e      	ldr	r3, [pc, #184]	; (80065a8 <RadioSetRxConfig+0x30c>)
 80064ee:	2201      	movs	r2, #1
 80064f0:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80064f2:	f000 fc6a 	bl	8006dca <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80064f6:	4b2c      	ldr	r3, [pc, #176]	; (80065a8 <RadioSetRxConfig+0x30c>)
 80064f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	bf14      	ite	ne
 8006500:	2301      	movne	r3, #1
 8006502:	2300      	moveq	r3, #0
 8006504:	b2db      	uxtb	r3, r3
 8006506:	4618      	mov	r0, r3
 8006508:	f7ff fdfa 	bl	8006100 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800650c:	4828      	ldr	r0, [pc, #160]	; (80065b0 <RadioSetRxConfig+0x314>)
 800650e:	f002 f89f 	bl	8008650 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006512:	4828      	ldr	r0, [pc, #160]	; (80065b4 <RadioSetRxConfig+0x318>)
 8006514:	f002 f968 	bl	80087e8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8006518:	4a28      	ldr	r2, [pc, #160]	; (80065bc <RadioSetRxConfig+0x320>)
 800651a:	f107 0314 	add.w	r3, r7, #20
 800651e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006522:	e883 0003 	stmia.w	r3, {r0, r1}
 8006526:	f107 0314 	add.w	r3, r7, #20
 800652a:	4618      	mov	r0, r3
 800652c:	f001 fc9b 	bl	8007e66 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8006530:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006534:	f001 fce6 	bl	8007f04 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8006538:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800653a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800653e:	fb02 f303 	mul.w	r3, r2, r3
 8006542:	461a      	mov	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	fbb2 f3f3 	udiv	r3, r2, r3
 800654a:	4a17      	ldr	r2, [pc, #92]	; (80065a8 <RadioSetRxConfig+0x30c>)
 800654c:	6093      	str	r3, [r2, #8]
            break;
 800654e:	e0a8      	b.n	80066a2 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8006550:	2000      	movs	r0, #0
 8006552:	f001 fe4f 	bl	80081f4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006556:	4b14      	ldr	r3, [pc, #80]	; (80065a8 <RadioSetRxConfig+0x30c>)
 8006558:	2201      	movs	r2, #1
 800655a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	b2da      	uxtb	r2, r3
 8006562:	4b11      	ldr	r3, [pc, #68]	; (80065a8 <RadioSetRxConfig+0x30c>)
 8006564:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8006568:	4a15      	ldr	r2, [pc, #84]	; (80065c0 <RadioSetRxConfig+0x324>)
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	4413      	add	r3, r2
 800656e:	781a      	ldrb	r2, [r3, #0]
 8006570:	4b0d      	ldr	r3, [pc, #52]	; (80065a8 <RadioSetRxConfig+0x30c>)
 8006572:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8006576:	4a0c      	ldr	r2, [pc, #48]	; (80065a8 <RadioSetRxConfig+0x30c>)
 8006578:	7bbb      	ldrb	r3, [r7, #14]
 800657a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d105      	bne.n	8006590 <RadioSetRxConfig+0x2f4>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b0b      	cmp	r3, #11
 8006588:	d008      	beq.n	800659c <RadioSetRxConfig+0x300>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b0c      	cmp	r3, #12
 800658e:	d005      	beq.n	800659c <RadioSetRxConfig+0x300>
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d116      	bne.n	80065c4 <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b0c      	cmp	r3, #12
 800659a:	d113      	bne.n	80065c4 <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800659c:	4b02      	ldr	r3, [pc, #8]	; (80065a8 <RadioSetRxConfig+0x30c>)
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80065a4:	e012      	b.n	80065cc <RadioSetRxConfig+0x330>
 80065a6:	bf00      	nop
 80065a8:	20000594 	.word	0x20000594
 80065ac:	2000000d 	.word	0x2000000d
 80065b0:	200005cc 	.word	0x200005cc
 80065b4:	200005a2 	.word	0x200005a2
 80065b8:	08009f64 	.word	0x08009f64
 80065bc:	08009f6c 	.word	0x08009f6c
 80065c0:	0800a100 	.word	0x0800a100
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80065c4:	4b39      	ldr	r3, [pc, #228]	; (80066ac <RadioSetRxConfig+0x410>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80065cc:	4b37      	ldr	r3, [pc, #220]	; (80066ac <RadioSetRxConfig+0x410>)
 80065ce:	2201      	movs	r2, #1
 80065d0:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80065d2:	4b36      	ldr	r3, [pc, #216]	; (80066ac <RadioSetRxConfig+0x410>)
 80065d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80065d8:	2b05      	cmp	r3, #5
 80065da:	d004      	beq.n	80065e6 <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80065dc:	4b33      	ldr	r3, [pc, #204]	; (80066ac <RadioSetRxConfig+0x410>)
 80065de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80065e2:	2b06      	cmp	r3, #6
 80065e4:	d10a      	bne.n	80065fc <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 80065e6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80065e8:	2b0b      	cmp	r3, #11
 80065ea:	d803      	bhi.n	80065f4 <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80065ec:	4b2f      	ldr	r3, [pc, #188]	; (80066ac <RadioSetRxConfig+0x410>)
 80065ee:	220c      	movs	r2, #12
 80065f0:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80065f2:	e006      	b.n	8006602 <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80065f4:	4a2d      	ldr	r2, [pc, #180]	; (80066ac <RadioSetRxConfig+0x410>)
 80065f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80065f8:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80065fa:	e002      	b.n	8006602 <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80065fc:	4a2b      	ldr	r2, [pc, #172]	; (80066ac <RadioSetRxConfig+0x410>)
 80065fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006600:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8006602:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8006606:	4b29      	ldr	r3, [pc, #164]	; (80066ac <RadioSetRxConfig+0x410>)
 8006608:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800660a:	4b29      	ldr	r3, [pc, #164]	; (80066b0 <RadioSetRxConfig+0x414>)
 800660c:	781a      	ldrb	r2, [r3, #0]
 800660e:	4b27      	ldr	r3, [pc, #156]	; (80066ac <RadioSetRxConfig+0x410>)
 8006610:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8006612:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8006616:	4b25      	ldr	r3, [pc, #148]	; (80066ac <RadioSetRxConfig+0x410>)
 8006618:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800661c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8006620:	4b22      	ldr	r3, [pc, #136]	; (80066ac <RadioSetRxConfig+0x410>)
 8006622:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8006626:	f000 fbd0 	bl	8006dca <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800662a:	4b20      	ldr	r3, [pc, #128]	; (80066ac <RadioSetRxConfig+0x410>)
 800662c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006630:	2b00      	cmp	r3, #0
 8006632:	bf14      	ite	ne
 8006634:	2301      	movne	r3, #1
 8006636:	2300      	moveq	r3, #0
 8006638:	b2db      	uxtb	r3, r3
 800663a:	4618      	mov	r0, r3
 800663c:	f7ff fd60 	bl	8006100 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006640:	481c      	ldr	r0, [pc, #112]	; (80066b4 <RadioSetRxConfig+0x418>)
 8006642:	f002 f805 	bl	8008650 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006646:	481c      	ldr	r0, [pc, #112]	; (80066b8 <RadioSetRxConfig+0x41c>)
 8006648:	f002 f8ce 	bl	80087e8 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800664c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800664e:	b2db      	uxtb	r3, r3
 8006650:	4618      	mov	r0, r3
 8006652:	f001 fdde 	bl	8008212 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8006656:	4b15      	ldr	r3, [pc, #84]	; (80066ac <RadioSetRxConfig+0x410>)
 8006658:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800665c:	2b01      	cmp	r3, #1
 800665e:	d10d      	bne.n	800667c <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8006660:	f240 7036 	movw	r0, #1846	; 0x736
 8006664:	f002 fa1c 	bl	8008aa0 <SUBGRF_ReadRegister>
 8006668:	4603      	mov	r3, r0
 800666a:	f023 0304 	bic.w	r3, r3, #4
 800666e:	b2db      	uxtb	r3, r3
 8006670:	4619      	mov	r1, r3
 8006672:	f240 7036 	movw	r0, #1846	; 0x736
 8006676:	f002 f9ff 	bl	8008a78 <SUBGRF_WriteRegister>
 800667a:	e00c      	b.n	8006696 <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800667c:	f240 7036 	movw	r0, #1846	; 0x736
 8006680:	f002 fa0e 	bl	8008aa0 <SUBGRF_ReadRegister>
 8006684:	4603      	mov	r3, r0
 8006686:	f043 0304 	orr.w	r3, r3, #4
 800668a:	b2db      	uxtb	r3, r3
 800668c:	4619      	mov	r1, r3
 800668e:	f240 7036 	movw	r0, #1846	; 0x736
 8006692:	f002 f9f1 	bl	8008a78 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8006696:	4b05      	ldr	r3, [pc, #20]	; (80066ac <RadioSetRxConfig+0x410>)
 8006698:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800669c:	609a      	str	r2, [r3, #8]
            break;
 800669e:	e000      	b.n	80066a2 <RadioSetRxConfig+0x406>
            break;
 80066a0:	bf00      	nop
    }
}
 80066a2:	bf00      	nop
 80066a4:	3728      	adds	r7, #40	; 0x28
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	20000594 	.word	0x20000594
 80066b0:	2000000d 	.word	0x2000000d
 80066b4:	200005cc 	.word	0x200005cc
 80066b8:	200005a2 	.word	0x200005a2

080066bc <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60ba      	str	r2, [r7, #8]
 80066c4:	607b      	str	r3, [r7, #4]
 80066c6:	4603      	mov	r3, r0
 80066c8:	73fb      	strb	r3, [r7, #15]
 80066ca:	460b      	mov	r3, r1
 80066cc:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80066ce:	f002 fcac 	bl	800902a <RFW_DeInit>
    switch( modem )
 80066d2:	7bfb      	ldrb	r3, [r7, #15]
 80066d4:	2b03      	cmp	r3, #3
 80066d6:	f000 80d7 	beq.w	8006888 <RadioSetTxConfig+0x1cc>
 80066da:	2b03      	cmp	r3, #3
 80066dc:	f300 80e6 	bgt.w	80068ac <RadioSetTxConfig+0x1f0>
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d002      	beq.n	80066ea <RadioSetTxConfig+0x2e>
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d061      	beq.n	80067ac <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 80066e8:	e0e0      	b.n	80068ac <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80066ea:	4b7c      	ldr	r3, [pc, #496]	; (80068dc <RadioSetTxConfig+0x220>)
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80066f2:	4a7a      	ldr	r2, [pc, #488]	; (80068dc <RadioSetTxConfig+0x220>)
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80066f8:	4b78      	ldr	r3, [pc, #480]	; (80068dc <RadioSetTxConfig+0x220>)
 80066fa:	220b      	movs	r2, #11
 80066fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f002 fbc3 	bl	8008e8c <SUBGRF_GetFskBandwidthRegValue>
 8006706:	4603      	mov	r3, r0
 8006708:	461a      	mov	r2, r3
 800670a:	4b74      	ldr	r3, [pc, #464]	; (80068dc <RadioSetTxConfig+0x220>)
 800670c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8006710:	4a72      	ldr	r2, [pc, #456]	; (80068dc <RadioSetTxConfig+0x220>)
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006716:	4b71      	ldr	r3, [pc, #452]	; (80068dc <RadioSetTxConfig+0x220>)
 8006718:	2200      	movs	r2, #0
 800671a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800671c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800671e:	00db      	lsls	r3, r3, #3
 8006720:	b29a      	uxth	r2, r3
 8006722:	4b6e      	ldr	r3, [pc, #440]	; (80068dc <RadioSetTxConfig+0x220>)
 8006724:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8006726:	4b6d      	ldr	r3, [pc, #436]	; (80068dc <RadioSetTxConfig+0x220>)
 8006728:	2204      	movs	r2, #4
 800672a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800672c:	4b6b      	ldr	r3, [pc, #428]	; (80068dc <RadioSetTxConfig+0x220>)
 800672e:	2218      	movs	r2, #24
 8006730:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8006732:	4b6a      	ldr	r3, [pc, #424]	; (80068dc <RadioSetTxConfig+0x220>)
 8006734:	2200      	movs	r2, #0
 8006736:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8006738:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800673c:	f083 0301 	eor.w	r3, r3, #1
 8006740:	b2db      	uxtb	r3, r3
 8006742:	461a      	mov	r2, r3
 8006744:	4b65      	ldr	r3, [pc, #404]	; (80068dc <RadioSetTxConfig+0x220>)
 8006746:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8006748:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800674c:	2b00      	cmp	r3, #0
 800674e:	d003      	beq.n	8006758 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8006750:	4b62      	ldr	r3, [pc, #392]	; (80068dc <RadioSetTxConfig+0x220>)
 8006752:	22f2      	movs	r2, #242	; 0xf2
 8006754:	75da      	strb	r2, [r3, #23]
 8006756:	e002      	b.n	800675e <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8006758:	4b60      	ldr	r3, [pc, #384]	; (80068dc <RadioSetTxConfig+0x220>)
 800675a:	2201      	movs	r2, #1
 800675c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800675e:	4b5f      	ldr	r3, [pc, #380]	; (80068dc <RadioSetTxConfig+0x220>)
 8006760:	2201      	movs	r2, #1
 8006762:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8006764:	f000 fb31 	bl	8006dca <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8006768:	4b5c      	ldr	r3, [pc, #368]	; (80068dc <RadioSetTxConfig+0x220>)
 800676a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800676e:	2b00      	cmp	r3, #0
 8006770:	bf14      	ite	ne
 8006772:	2301      	movne	r3, #1
 8006774:	2300      	moveq	r3, #0
 8006776:	b2db      	uxtb	r3, r3
 8006778:	4618      	mov	r0, r3
 800677a:	f7ff fcc1 	bl	8006100 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800677e:	4858      	ldr	r0, [pc, #352]	; (80068e0 <RadioSetTxConfig+0x224>)
 8006780:	f001 ff66 	bl	8008650 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006784:	4857      	ldr	r0, [pc, #348]	; (80068e4 <RadioSetTxConfig+0x228>)
 8006786:	f002 f82f 	bl	80087e8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800678a:	4a57      	ldr	r2, [pc, #348]	; (80068e8 <RadioSetTxConfig+0x22c>)
 800678c:	f107 0310 	add.w	r3, r7, #16
 8006790:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006794:	e883 0003 	stmia.w	r3, {r0, r1}
 8006798:	f107 0310 	add.w	r3, r7, #16
 800679c:	4618      	mov	r0, r3
 800679e:	f001 fb62 	bl	8007e66 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80067a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80067a6:	f001 fbad 	bl	8007f04 <SUBGRF_SetWhiteningSeed>
            break;
 80067aa:	e080      	b.n	80068ae <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80067ac:	4b4b      	ldr	r3, [pc, #300]	; (80068dc <RadioSetTxConfig+0x220>)
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80067b4:	6a3b      	ldr	r3, [r7, #32]
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	4b48      	ldr	r3, [pc, #288]	; (80068dc <RadioSetTxConfig+0x220>)
 80067ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80067be:	4a4b      	ldr	r2, [pc, #300]	; (80068ec <RadioSetTxConfig+0x230>)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4413      	add	r3, r2
 80067c4:	781a      	ldrb	r2, [r3, #0]
 80067c6:	4b45      	ldr	r3, [pc, #276]	; (80068dc <RadioSetTxConfig+0x220>)
 80067c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80067cc:	4a43      	ldr	r2, [pc, #268]	; (80068dc <RadioSetTxConfig+0x220>)
 80067ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80067d2:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d105      	bne.n	80067e8 <RadioSetTxConfig+0x12c>
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	2b0b      	cmp	r3, #11
 80067e0:	d008      	beq.n	80067f4 <RadioSetTxConfig+0x138>
 80067e2:	6a3b      	ldr	r3, [r7, #32]
 80067e4:	2b0c      	cmp	r3, #12
 80067e6:	d005      	beq.n	80067f4 <RadioSetTxConfig+0x138>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d107      	bne.n	80067fe <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80067ee:	6a3b      	ldr	r3, [r7, #32]
 80067f0:	2b0c      	cmp	r3, #12
 80067f2:	d104      	bne.n	80067fe <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80067f4:	4b39      	ldr	r3, [pc, #228]	; (80068dc <RadioSetTxConfig+0x220>)
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80067fc:	e003      	b.n	8006806 <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80067fe:	4b37      	ldr	r3, [pc, #220]	; (80068dc <RadioSetTxConfig+0x220>)
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006806:	4b35      	ldr	r3, [pc, #212]	; (80068dc <RadioSetTxConfig+0x220>)
 8006808:	2201      	movs	r2, #1
 800680a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800680c:	4b33      	ldr	r3, [pc, #204]	; (80068dc <RadioSetTxConfig+0x220>)
 800680e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006812:	2b05      	cmp	r3, #5
 8006814:	d004      	beq.n	8006820 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8006816:	4b31      	ldr	r3, [pc, #196]	; (80068dc <RadioSetTxConfig+0x220>)
 8006818:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800681c:	2b06      	cmp	r3, #6
 800681e:	d10a      	bne.n	8006836 <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 8006820:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006822:	2b0b      	cmp	r3, #11
 8006824:	d803      	bhi.n	800682e <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8006826:	4b2d      	ldr	r3, [pc, #180]	; (80068dc <RadioSetTxConfig+0x220>)
 8006828:	220c      	movs	r2, #12
 800682a:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800682c:	e006      	b.n	800683c <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800682e:	4a2b      	ldr	r2, [pc, #172]	; (80068dc <RadioSetTxConfig+0x220>)
 8006830:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006832:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8006834:	e002      	b.n	800683c <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8006836:	4a29      	ldr	r2, [pc, #164]	; (80068dc <RadioSetTxConfig+0x220>)
 8006838:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800683a:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800683c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8006840:	4b26      	ldr	r3, [pc, #152]	; (80068dc <RadioSetTxConfig+0x220>)
 8006842:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8006844:	4b2a      	ldr	r3, [pc, #168]	; (80068f0 <RadioSetTxConfig+0x234>)
 8006846:	781a      	ldrb	r2, [r3, #0]
 8006848:	4b24      	ldr	r3, [pc, #144]	; (80068dc <RadioSetTxConfig+0x220>)
 800684a:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800684c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8006850:	4b22      	ldr	r3, [pc, #136]	; (80068dc <RadioSetTxConfig+0x220>)
 8006852:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8006856:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800685a:	4b20      	ldr	r3, [pc, #128]	; (80068dc <RadioSetTxConfig+0x220>)
 800685c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8006860:	f000 fab3 	bl	8006dca <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8006864:	4b1d      	ldr	r3, [pc, #116]	; (80068dc <RadioSetTxConfig+0x220>)
 8006866:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800686a:	2b00      	cmp	r3, #0
 800686c:	bf14      	ite	ne
 800686e:	2301      	movne	r3, #1
 8006870:	2300      	moveq	r3, #0
 8006872:	b2db      	uxtb	r3, r3
 8006874:	4618      	mov	r0, r3
 8006876:	f7ff fc43 	bl	8006100 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800687a:	4819      	ldr	r0, [pc, #100]	; (80068e0 <RadioSetTxConfig+0x224>)
 800687c:	f001 fee8 	bl	8008650 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006880:	4818      	ldr	r0, [pc, #96]	; (80068e4 <RadioSetTxConfig+0x228>)
 8006882:	f001 ffb1 	bl	80087e8 <SUBGRF_SetPacketParams>
            break;
 8006886:	e012      	b.n	80068ae <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8006888:	2003      	movs	r0, #3
 800688a:	f7ff fc39 	bl	8006100 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800688e:	4b13      	ldr	r3, [pc, #76]	; (80068dc <RadioSetTxConfig+0x220>)
 8006890:	2202      	movs	r2, #2
 8006892:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8006896:	4a11      	ldr	r2, [pc, #68]	; (80068dc <RadioSetTxConfig+0x220>)
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800689c:	4b0f      	ldr	r3, [pc, #60]	; (80068dc <RadioSetTxConfig+0x220>)
 800689e:	2216      	movs	r2, #22
 80068a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80068a4:	480e      	ldr	r0, [pc, #56]	; (80068e0 <RadioSetTxConfig+0x224>)
 80068a6:	f001 fed3 	bl	8008650 <SUBGRF_SetModulationParams>
            break;
 80068aa:	e000      	b.n	80068ae <RadioSetTxConfig+0x1f2>
            break;
 80068ac:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80068ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f002 f9fc 	bl	8008cb0 <SUBGRF_SetRfTxPower>
 80068b8:	4603      	mov	r3, r0
 80068ba:	461a      	mov	r2, r3
 80068bc:	4b07      	ldr	r3, [pc, #28]	; (80068dc <RadioSetTxConfig+0x220>)
 80068be:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 80068c2:	4b06      	ldr	r3, [pc, #24]	; (80068dc <RadioSetTxConfig+0x220>)
 80068c4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80068c8:	4618      	mov	r0, r3
 80068ca:	f002 fbc2 	bl	8009052 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80068ce:	4a03      	ldr	r2, [pc, #12]	; (80068dc <RadioSetTxConfig+0x220>)
 80068d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068d2:	6053      	str	r3, [r2, #4]
}
 80068d4:	bf00      	nop
 80068d6:	3718      	adds	r7, #24
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	20000594 	.word	0x20000594
 80068e0:	200005cc 	.word	0x200005cc
 80068e4:	200005a2 	.word	0x200005a2
 80068e8:	08009f6c 	.word	0x08009f6c
 80068ec:	0800a100 	.word	0x0800a100
 80068f0:	2000000d 	.word	0x2000000d

080068f4 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
    return true;
 80068fc:	2301      	movs	r3, #1
}
 80068fe:	4618      	mov	r0, r3
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	bc80      	pop	{r7}
 8006906:	4770      	bx	lr

08006908 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	4603      	mov	r3, r0
 8006910:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8006912:	2300      	movs	r3, #0
 8006914:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8006916:	79fb      	ldrb	r3, [r7, #7]
 8006918:	2b0a      	cmp	r3, #10
 800691a:	d83e      	bhi.n	800699a <RadioGetLoRaBandwidthInHz+0x92>
 800691c:	a201      	add	r2, pc, #4	; (adr r2, 8006924 <RadioGetLoRaBandwidthInHz+0x1c>)
 800691e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006922:	bf00      	nop
 8006924:	08006951 	.word	0x08006951
 8006928:	08006961 	.word	0x08006961
 800692c:	08006971 	.word	0x08006971
 8006930:	08006981 	.word	0x08006981
 8006934:	08006989 	.word	0x08006989
 8006938:	0800698f 	.word	0x0800698f
 800693c:	08006995 	.word	0x08006995
 8006940:	0800699b 	.word	0x0800699b
 8006944:	08006959 	.word	0x08006959
 8006948:	08006969 	.word	0x08006969
 800694c:	08006979 	.word	0x08006979
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8006950:	f641 6384 	movw	r3, #7812	; 0x1e84
 8006954:	60fb      	str	r3, [r7, #12]
        break;
 8006956:	e020      	b.n	800699a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8006958:	f642 03b1 	movw	r3, #10417	; 0x28b1
 800695c:	60fb      	str	r3, [r7, #12]
        break;
 800695e:	e01c      	b.n	800699a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8006960:	f643 5309 	movw	r3, #15625	; 0x3d09
 8006964:	60fb      	str	r3, [r7, #12]
        break;
 8006966:	e018      	b.n	800699a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8006968:	f245 1361 	movw	r3, #20833	; 0x5161
 800696c:	60fb      	str	r3, [r7, #12]
        break;
 800696e:	e014      	b.n	800699a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8006970:	f647 2312 	movw	r3, #31250	; 0x7a12
 8006974:	60fb      	str	r3, [r7, #12]
        break;
 8006976:	e010      	b.n	800699a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8006978:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 800697c:	60fb      	str	r3, [r7, #12]
        break;
 800697e:	e00c      	b.n	800699a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8006980:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006984:	60fb      	str	r3, [r7, #12]
        break;
 8006986:	e008      	b.n	800699a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8006988:	4b07      	ldr	r3, [pc, #28]	; (80069a8 <RadioGetLoRaBandwidthInHz+0xa0>)
 800698a:	60fb      	str	r3, [r7, #12]
        break;
 800698c:	e005      	b.n	800699a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800698e:	4b07      	ldr	r3, [pc, #28]	; (80069ac <RadioGetLoRaBandwidthInHz+0xa4>)
 8006990:	60fb      	str	r3, [r7, #12]
        break;
 8006992:	e002      	b.n	800699a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8006994:	4b06      	ldr	r3, [pc, #24]	; (80069b0 <RadioGetLoRaBandwidthInHz+0xa8>)
 8006996:	60fb      	str	r3, [r7, #12]
        break;
 8006998:	bf00      	nop
    }

    return bandwidthInHz;
 800699a:	68fb      	ldr	r3, [r7, #12]
}
 800699c:	4618      	mov	r0, r3
 800699e:	3714      	adds	r7, #20
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bc80      	pop	{r7}
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	0001e848 	.word	0x0001e848
 80069ac:	0003d090 	.word	0x0003d090
 80069b0:	0007a120 	.word	0x0007a120

080069b4 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	4608      	mov	r0, r1
 80069be:	4611      	mov	r1, r2
 80069c0:	461a      	mov	r2, r3
 80069c2:	4603      	mov	r3, r0
 80069c4:	70fb      	strb	r3, [r7, #3]
 80069c6:	460b      	mov	r3, r1
 80069c8:	803b      	strh	r3, [r7, #0]
 80069ca:	4613      	mov	r3, r2
 80069cc:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 80069ce:	883b      	ldrh	r3, [r7, #0]
 80069d0:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80069d2:	78ba      	ldrb	r2, [r7, #2]
 80069d4:	f082 0201 	eor.w	r2, r2, #1
 80069d8:	b2d2      	uxtb	r2, r2
 80069da:	2a00      	cmp	r2, #0
 80069dc:	d001      	beq.n	80069e2 <RadioGetGfskTimeOnAirNumerator+0x2e>
 80069de:	2208      	movs	r2, #8
 80069e0:	e000      	b.n	80069e4 <RadioGetGfskTimeOnAirNumerator+0x30>
 80069e2:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80069e4:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80069e6:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80069ea:	7c3b      	ldrb	r3, [r7, #16]
 80069ec:	7d39      	ldrb	r1, [r7, #20]
 80069ee:	2900      	cmp	r1, #0
 80069f0:	d001      	beq.n	80069f6 <RadioGetGfskTimeOnAirNumerator+0x42>
 80069f2:	2102      	movs	r1, #2
 80069f4:	e000      	b.n	80069f8 <RadioGetGfskTimeOnAirNumerator+0x44>
 80069f6:	2100      	movs	r1, #0
 80069f8:	440b      	add	r3, r1
 80069fa:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80069fc:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	370c      	adds	r7, #12
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bc80      	pop	{r7}
 8006a06:	4770      	bx	lr

08006a08 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b08b      	sub	sp, #44	; 0x2c
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	4611      	mov	r1, r2
 8006a14:	461a      	mov	r2, r3
 8006a16:	460b      	mov	r3, r1
 8006a18:	71fb      	strb	r3, [r7, #7]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8006a1e:	79fb      	ldrb	r3, [r7, #7]
 8006a20:	3304      	adds	r3, #4
 8006a22:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8006a24:	2300      	movs	r3, #0
 8006a26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	2b05      	cmp	r3, #5
 8006a2e:	d002      	beq.n	8006a36 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	2b06      	cmp	r3, #6
 8006a34:	d104      	bne.n	8006a40 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8006a36:	88bb      	ldrh	r3, [r7, #4]
 8006a38:	2b0b      	cmp	r3, #11
 8006a3a:	d801      	bhi.n	8006a40 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8006a3c:	230c      	movs	r3, #12
 8006a3e:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d105      	bne.n	8006a52 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	2b0b      	cmp	r3, #11
 8006a4a:	d008      	beq.n	8006a5e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b0c      	cmp	r3, #12
 8006a50:	d005      	beq.n	8006a5e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d105      	bne.n	8006a64 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	2b0c      	cmp	r3, #12
 8006a5c:	d102      	bne.n	8006a64 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8006a64:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006a68:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8006a6a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006a6e:	2a00      	cmp	r2, #0
 8006a70:	d001      	beq.n	8006a76 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8006a72:	2210      	movs	r2, #16
 8006a74:	e000      	b.n	8006a78 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8006a76:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8006a78:	4413      	add	r3, r2
 8006a7a:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8006a80:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8006a82:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8006a86:	2a00      	cmp	r2, #0
 8006a88:	d001      	beq.n	8006a8e <RadioGetLoRaTimeOnAirNumerator+0x86>
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	e000      	b.n	8006a90 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8006a8e:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8006a90:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8006a92:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	2b06      	cmp	r3, #6
 8006a98:	d803      	bhi.n	8006aa2 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	623b      	str	r3, [r7, #32]
 8006aa0:	e00e      	b.n	8006ac0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	3308      	adds	r3, #8
 8006aa6:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8006aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d004      	beq.n	8006aba <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	3b02      	subs	r3, #2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	623b      	str	r3, [r7, #32]
 8006ab8:	e002      	b.n	8006ac0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	da01      	bge.n	8006aca <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8006aca:	69fa      	ldr	r2, [r7, #28]
 8006acc:	6a3b      	ldr	r3, [r7, #32]
 8006ace:	4413      	add	r3, r2
 8006ad0:	1e5a      	subs	r2, r3, #1
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	fb92 f3f3 	sdiv	r3, r2, r3
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	fb02 f203 	mul.w	r2, r2, r3
 8006ade:	88bb      	ldrh	r3, [r7, #4]
 8006ae0:	4413      	add	r3, r2
    int32_t intermediate =
 8006ae2:	330c      	adds	r3, #12
 8006ae4:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	2b06      	cmp	r3, #6
 8006aea:	d802      	bhi.n	8006af2 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	3302      	adds	r3, #2
 8006af0:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	1c5a      	adds	r2, r3, #1
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	3b02      	subs	r3, #2
 8006afc:	fa02 f303 	lsl.w	r3, r2, r3
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	372c      	adds	r7, #44	; 0x2c
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bc80      	pop	{r7}
 8006b08:	4770      	bx	lr
	...

08006b0c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b08a      	sub	sp, #40	; 0x28
 8006b10:	af04      	add	r7, sp, #16
 8006b12:	60b9      	str	r1, [r7, #8]
 8006b14:	607a      	str	r2, [r7, #4]
 8006b16:	461a      	mov	r2, r3
 8006b18:	4603      	mov	r3, r0
 8006b1a:	73fb      	strb	r3, [r7, #15]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8006b20:	2300      	movs	r3, #0
 8006b22:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8006b24:	2301      	movs	r3, #1
 8006b26:	613b      	str	r3, [r7, #16]

    switch( modem )
 8006b28:	7bfb      	ldrb	r3, [r7, #15]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d002      	beq.n	8006b34 <RadioTimeOnAir+0x28>
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d017      	beq.n	8006b62 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8006b32:	e035      	b.n	8006ba0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8006b34:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8006b38:	8c3a      	ldrh	r2, [r7, #32]
 8006b3a:	7bb9      	ldrb	r1, [r7, #14]
 8006b3c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b40:	9301      	str	r3, [sp, #4]
 8006b42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b46:	9300      	str	r3, [sp, #0]
 8006b48:	4603      	mov	r3, r0
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7ff ff32 	bl	80069b4 <RadioGetGfskTimeOnAirNumerator>
 8006b50:	4603      	mov	r3, r0
 8006b52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b56:	fb02 f303 	mul.w	r3, r2, r3
 8006b5a:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	613b      	str	r3, [r7, #16]
        break;
 8006b60:	e01e      	b.n	8006ba0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8006b62:	8c39      	ldrh	r1, [r7, #32]
 8006b64:	7bba      	ldrb	r2, [r7, #14]
 8006b66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b6a:	9302      	str	r3, [sp, #8]
 8006b6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b70:	9301      	str	r3, [sp, #4]
 8006b72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006b76:	9300      	str	r3, [sp, #0]
 8006b78:	460b      	mov	r3, r1
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	68b8      	ldr	r0, [r7, #8]
 8006b7e:	f7ff ff43 	bl	8006a08 <RadioGetLoRaTimeOnAirNumerator>
 8006b82:	4603      	mov	r3, r0
 8006b84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b88:	fb02 f303 	mul.w	r3, r2, r3
 8006b8c:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8006b8e:	4a0a      	ldr	r2, [pc, #40]	; (8006bb8 <RadioTimeOnAir+0xac>)
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	4413      	add	r3, r2
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7ff feb6 	bl	8006908 <RadioGetLoRaBandwidthInHz>
 8006b9c:	6138      	str	r0, [r7, #16]
        break;
 8006b9e:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	1e5a      	subs	r2, r3, #1
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3718      	adds	r7, #24
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	0800a100 	.word	0x0800a100

08006bbc <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8006bc8:	2300      	movs	r3, #0
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f240 2101 	movw	r1, #513	; 0x201
 8006bd0:	f240 2001 	movw	r0, #513	; 0x201
 8006bd4:	f001 fc12 	bl	80083fc <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 8006bd8:	4b6e      	ldr	r3, [pc, #440]	; (8006d94 <RadioSend+0x1d8>)
 8006bda:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006bde:	2101      	movs	r1, #1
 8006be0:	4618      	mov	r0, r3
 8006be2:	f002 f83d 	bl	8008c60 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 8006be6:	4b6b      	ldr	r3, [pc, #428]	; (8006d94 <RadioSend+0x1d8>)
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d112      	bne.n	8006c14 <RadioSend+0x58>
 8006bee:	4b69      	ldr	r3, [pc, #420]	; (8006d94 <RadioSend+0x1d8>)
 8006bf0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bf4:	2b06      	cmp	r3, #6
 8006bf6:	d10d      	bne.n	8006c14 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8006bf8:	f640 0089 	movw	r0, #2185	; 0x889
 8006bfc:	f001 ff50 	bl	8008aa0 <SUBGRF_ReadRegister>
 8006c00:	4603      	mov	r3, r0
 8006c02:	f023 0304 	bic.w	r3, r3, #4
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	4619      	mov	r1, r3
 8006c0a:	f640 0089 	movw	r0, #2185	; 0x889
 8006c0e:	f001 ff33 	bl	8008a78 <SUBGRF_WriteRegister>
 8006c12:	e00c      	b.n	8006c2e <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8006c14:	f640 0089 	movw	r0, #2185	; 0x889
 8006c18:	f001 ff42 	bl	8008aa0 <SUBGRF_ReadRegister>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	f043 0304 	orr.w	r3, r3, #4
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	4619      	mov	r1, r3
 8006c26:	f640 0089 	movw	r0, #2185	; 0x889
 8006c2a:	f001 ff25 	bl	8008a78 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 8006c2e:	4b59      	ldr	r3, [pc, #356]	; (8006d94 <RadioSend+0x1d8>)
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	2b03      	cmp	r3, #3
 8006c34:	f200 809f 	bhi.w	8006d76 <RadioSend+0x1ba>
 8006c38:	a201      	add	r2, pc, #4	; (adr r2, 8006c40 <RadioSend+0x84>)
 8006c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3e:	bf00      	nop
 8006c40:	08006c6b 	.word	0x08006c6b
 8006c44:	08006c51 	.word	0x08006c51
 8006c48:	08006cbf 	.word	0x08006cbf
 8006c4c:	08006cdf 	.word	0x08006cdf
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8006c50:	4a50      	ldr	r2, [pc, #320]	; (8006d94 <RadioSend+0x1d8>)
 8006c52:	78fb      	ldrb	r3, [r7, #3]
 8006c54:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006c56:	4850      	ldr	r0, [pc, #320]	; (8006d98 <RadioSend+0x1dc>)
 8006c58:	f001 fdc6 	bl	80087e8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8006c5c:	78fb      	ldrb	r3, [r7, #3]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	4619      	mov	r1, r3
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f001 f8ec 	bl	8007e40 <SUBGRF_SendPayload>
            break;
 8006c68:	e086      	b.n	8006d78 <RadioSend+0x1bc>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8006c6a:	f002 f9e4 	bl	8009036 <RFW_Is_Init>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d117      	bne.n	8006ca4 <RadioSend+0xe8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8006c74:	f107 020d 	add.w	r2, r7, #13
 8006c78:	78fb      	ldrb	r3, [r7, #3]
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f002 f9f2 	bl	8009066 <RFW_TransmitInit>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f040 8081 	bne.w	8006d8c <RadioSend+0x1d0>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8006c8a:	7b7a      	ldrb	r2, [r7, #13]
 8006c8c:	4b41      	ldr	r3, [pc, #260]	; (8006d94 <RadioSend+0x1d8>)
 8006c8e:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006c90:	4841      	ldr	r0, [pc, #260]	; (8006d98 <RadioSend+0x1dc>)
 8006c92:	f001 fda9 	bl	80087e8 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8006c96:	7b7b      	ldrb	r3, [r7, #13]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f001 f8cf 	bl	8007e40 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8006ca2:	e069      	b.n	8006d78 <RadioSend+0x1bc>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8006ca4:	4a3b      	ldr	r2, [pc, #236]	; (8006d94 <RadioSend+0x1d8>)
 8006ca6:	78fb      	ldrb	r3, [r7, #3]
 8006ca8:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006caa:	483b      	ldr	r0, [pc, #236]	; (8006d98 <RadioSend+0x1dc>)
 8006cac:	f001 fd9c 	bl	80087e8 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f001 f8c2 	bl	8007e40 <SUBGRF_SendPayload>
            break;
 8006cbc:	e05c      	b.n	8006d78 <RadioSend+0x1bc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8006cbe:	4b35      	ldr	r3, [pc, #212]	; (8006d94 <RadioSend+0x1d8>)
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8006cc4:	4a33      	ldr	r2, [pc, #204]	; (8006d94 <RadioSend+0x1d8>)
 8006cc6:	78fb      	ldrb	r3, [r7, #3]
 8006cc8:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006cca:	4833      	ldr	r0, [pc, #204]	; (8006d98 <RadioSend+0x1dc>)
 8006ccc:	f001 fd8c 	bl	80087e8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8006cd0:	78fb      	ldrb	r3, [r7, #3]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f001 f8b2 	bl	8007e40 <SUBGRF_SendPayload>
            break;
 8006cdc:	e04c      	b.n	8006d78 <RadioSend+0x1bc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8006cde:	78fb      	ldrb	r3, [r7, #3]
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	6879      	ldr	r1, [r7, #4]
 8006ce4:	482d      	ldr	r0, [pc, #180]	; (8006d9c <RadioSend+0x1e0>)
 8006ce6:	f000 fc30 	bl	800754a <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8006cea:	4b2a      	ldr	r3, [pc, #168]	; (8006d94 <RadioSend+0x1d8>)
 8006cec:	2202      	movs	r2, #2
 8006cee:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8006cf0:	78fb      	ldrb	r3, [r7, #3]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	4b27      	ldr	r3, [pc, #156]	; (8006d94 <RadioSend+0x1d8>)
 8006cf8:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006cfa:	4827      	ldr	r0, [pc, #156]	; (8006d98 <RadioSend+0x1dc>)
 8006cfc:	f001 fd74 	bl	80087e8 <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 8006d00:	2100      	movs	r1, #0
 8006d02:	20f1      	movs	r0, #241	; 0xf1
 8006d04:	f000 f947 	bl	8006f96 <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 8006d08:	2100      	movs	r1, #0
 8006d0a:	20f0      	movs	r0, #240	; 0xf0
 8006d0c:	f000 f943 	bl	8006f96 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8006d10:	4b20      	ldr	r3, [pc, #128]	; (8006d94 <RadioSend+0x1d8>)
 8006d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d14:	2b64      	cmp	r3, #100	; 0x64
 8006d16:	d108      	bne.n	8006d2a <RadioSend+0x16e>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 8006d18:	2170      	movs	r1, #112	; 0x70
 8006d1a:	20f3      	movs	r0, #243	; 0xf3
 8006d1c:	f000 f93b 	bl	8006f96 <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 8006d20:	211d      	movs	r1, #29
 8006d22:	20f2      	movs	r0, #242	; 0xf2
 8006d24:	f000 f937 	bl	8006f96 <RadioWrite>
 8006d28:	e007      	b.n	8006d3a <RadioSend+0x17e>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 8006d2a:	21e1      	movs	r1, #225	; 0xe1
 8006d2c:	20f3      	movs	r0, #243	; 0xf3
 8006d2e:	f000 f932 	bl	8006f96 <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 8006d32:	2104      	movs	r1, #4
 8006d34:	20f2      	movs	r0, #242	; 0xf2
 8006d36:	f000 f92e 	bl	8006f96 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8006d3a:	78fb      	ldrb	r3, [r7, #3]
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	00db      	lsls	r3, r3, #3
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	3302      	adds	r3, #2
 8006d44:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8006d46:	89fb      	ldrh	r3, [r7, #14]
 8006d48:	0a1b      	lsrs	r3, r3, #8
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	4619      	mov	r1, r3
 8006d50:	20f4      	movs	r0, #244	; 0xf4
 8006d52:	f000 f920 	bl	8006f96 <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 8006d56:	89fb      	ldrh	r3, [r7, #14]
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	20f5      	movs	r0, #245	; 0xf5
 8006d5e:	f000 f91a 	bl	8006f96 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8006d62:	78fb      	ldrb	r3, [r7, #3]
 8006d64:	3301      	adds	r3, #1
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	480b      	ldr	r0, [pc, #44]	; (8006d9c <RadioSend+0x1e0>)
 8006d70:	f001 f866 	bl	8007e40 <SUBGRF_SendPayload>
            break;
 8006d74:	e000      	b.n	8006d78 <RadioSend+0x1bc>
        }
        default:
            break;
 8006d76:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8006d78:	4b06      	ldr	r3, [pc, #24]	; (8006d94 <RadioSend+0x1d8>)
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	4808      	ldr	r0, [pc, #32]	; (8006da0 <RadioSend+0x1e4>)
 8006d80:	f002 fb66 	bl	8009450 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8006d84:	4806      	ldr	r0, [pc, #24]	; (8006da0 <RadioSend+0x1e4>)
 8006d86:	f002 fa85 	bl	8009294 <UTIL_TIMER_Start>
 8006d8a:	e000      	b.n	8006d8e <RadioSend+0x1d2>
                return;
 8006d8c:	bf00      	nop
}
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	20000594 	.word	0x20000594
 8006d98:	200005a2 	.word	0x200005a2
 8006d9c:	200001a0 	.word	0x200001a0
 8006da0:	200005ec 	.word	0x200005ec

08006da4 <RadioSleep>:

static void RadioSleep( void )
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8006daa:	2300      	movs	r3, #0
 8006dac:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8006dae:	793b      	ldrb	r3, [r7, #4]
 8006db0:	f043 0304 	orr.w	r3, r3, #4
 8006db4:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8006db6:	7938      	ldrb	r0, [r7, #4]
 8006db8:	f001 f91e 	bl	8007ff8 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8006dbc:	2002      	movs	r0, #2
 8006dbe:	f7f9 feb7 	bl	8000b30 <HAL_Delay>
}
 8006dc2:	bf00      	nop
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <RadioStandby>:

static void RadioStandby( void )
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8006dce:	2000      	movs	r0, #0
 8006dd0:	f001 f944 	bl	800805c <SUBGRF_SetStandby>
}
 8006dd4:	bf00      	nop
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 8006de0:	f002 f929 	bl	8009036 <RFW_Is_Init>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d102      	bne.n	8006df0 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 8006dea:	f002 f94c 	bl	8009086 <RFW_ReceiveInit>
 8006dee:	e007      	b.n	8006e00 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8006df0:	2300      	movs	r3, #0
 8006df2:	2200      	movs	r2, #0
 8006df4:	f240 2162 	movw	r1, #610	; 0x262
 8006df8:	f240 2062 	movw	r0, #610	; 0x262
 8006dfc:	f001 fafe 	bl	80083fc <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d006      	beq.n	8006e14 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8006e06:	6879      	ldr	r1, [r7, #4]
 8006e08:	480f      	ldr	r0, [pc, #60]	; (8006e48 <RadioRx+0x70>)
 8006e0a:	f002 fb21 	bl	8009450 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8006e0e:	480e      	ldr	r0, [pc, #56]	; (8006e48 <RadioRx+0x70>)
 8006e10:	f002 fa40 	bl	8009294 <UTIL_TIMER_Start>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8006e14:	4b0d      	ldr	r3, [pc, #52]	; (8006e4c <RadioRx+0x74>)
 8006e16:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f001 ff1f 	bl	8008c60 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8006e22:	4b0a      	ldr	r3, [pc, #40]	; (8006e4c <RadioRx+0x74>)
 8006e24:	785b      	ldrb	r3, [r3, #1]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d004      	beq.n	8006e34 <RadioRx+0x5c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8006e2a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006e2e:	f001 f951 	bl	80080d4 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8006e32:	e005      	b.n	8006e40 <RadioRx+0x68>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8006e34:	4b05      	ldr	r3, [pc, #20]	; (8006e4c <RadioRx+0x74>)
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	019b      	lsls	r3, r3, #6
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f001 f94a 	bl	80080d4 <SUBGRF_SetRx>
}
 8006e40:	bf00      	nop
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	20000604 	.word	0x20000604
 8006e4c:	20000594 	.word	0x20000594

08006e50 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 8006e58:	f002 f8ed 	bl	8009036 <RFW_Is_Init>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d102      	bne.n	8006e68 <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 8006e62:	f002 f910 	bl	8009086 <RFW_ReceiveInit>
 8006e66:	e007      	b.n	8006e78 <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8006e68:	2300      	movs	r3, #0
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f240 2162 	movw	r1, #610	; 0x262
 8006e70:	f240 2062 	movw	r0, #610	; 0x262
 8006e74:	f001 fac2 	bl	80083fc <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d006      	beq.n	8006e8c <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8006e7e:	6879      	ldr	r1, [r7, #4]
 8006e80:	480f      	ldr	r0, [pc, #60]	; (8006ec0 <RadioRxBoosted+0x70>)
 8006e82:	f002 fae5 	bl	8009450 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8006e86:	480e      	ldr	r0, [pc, #56]	; (8006ec0 <RadioRxBoosted+0x70>)
 8006e88:	f002 fa04 	bl	8009294 <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8006e8c:	4b0d      	ldr	r3, [pc, #52]	; (8006ec4 <RadioRxBoosted+0x74>)
 8006e8e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006e92:	2100      	movs	r1, #0
 8006e94:	4618      	mov	r0, r3
 8006e96:	f001 fee3 	bl	8008c60 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8006e9a:	4b0a      	ldr	r3, [pc, #40]	; (8006ec4 <RadioRxBoosted+0x74>)
 8006e9c:	785b      	ldrb	r3, [r3, #1]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d004      	beq.n	8006eac <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8006ea2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006ea6:	f001 f935 	bl	8008114 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8006eaa:	e005      	b.n	8006eb8 <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8006eac:	4b05      	ldr	r3, [pc, #20]	; (8006ec4 <RadioRxBoosted+0x74>)
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	019b      	lsls	r3, r3, #6
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f001 f92e 	bl	8008114 <SUBGRF_SetRxBoosted>
}
 8006eb8:	bf00      	nop
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	20000604 	.word	0x20000604
 8006ec4:	20000594 	.word	0x20000594

08006ec8 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8006ed2:	4b07      	ldr	r3, [pc, #28]	; (8006ef0 <RadioSetRxDutyCycle+0x28>)
 8006ed4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006ed8:	2100      	movs	r1, #0
 8006eda:	4618      	mov	r0, r3
 8006edc:	f001 fec0 	bl	8008c60 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8006ee0:	6839      	ldr	r1, [r7, #0]
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f001 f93a 	bl	800815c <SUBGRF_SetRxDutyCycle>
}
 8006ee8:	bf00      	nop
 8006eea:	3708      	adds	r7, #8
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	20000594 	.word	0x20000594

08006ef4 <RadioStartCad>:

static void RadioStartCad( void )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8006ef8:	4b09      	ldr	r3, [pc, #36]	; (8006f20 <RadioStartCad+0x2c>)
 8006efa:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006efe:	2100      	movs	r1, #0
 8006f00:	4618      	mov	r0, r3
 8006f02:	f001 fead 	bl	8008c60 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8006f06:	2300      	movs	r3, #0
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8006f0e:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8006f12:	f001 fa73 	bl	80083fc <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8006f16:	f001 f94d 	bl	80081b4 <SUBGRF_SetCad>
}
 8006f1a:	bf00      	nop
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	20000594 	.word	0x20000594

08006f24 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	70fb      	strb	r3, [r7, #3]
 8006f30:	4613      	mov	r3, r2
 8006f32:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8006f34:	883b      	ldrh	r3, [r7, #0]
 8006f36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006f3a:	fb02 f303 	mul.w	r3, r2, r3
 8006f3e:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f001 fab7 	bl	80084b4 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8006f46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f001 feb0 	bl	8008cb0 <SUBGRF_SetRfTxPower>
 8006f50:	4603      	mov	r3, r0
 8006f52:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 8006f54:	7afb      	ldrb	r3, [r7, #11]
 8006f56:	2101      	movs	r1, #1
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f001 fe81 	bl	8008c60 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8006f5e:	f001 f937 	bl	80081d0 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8006f62:	68f9      	ldr	r1, [r7, #12]
 8006f64:	4804      	ldr	r0, [pc, #16]	; (8006f78 <RadioSetTxContinuousWave+0x54>)
 8006f66:	f002 fa73 	bl	8009450 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8006f6a:	4803      	ldr	r0, [pc, #12]	; (8006f78 <RadioSetTxContinuousWave+0x54>)
 8006f6c:	f002 f992 	bl	8009294 <UTIL_TIMER_Start>
}
 8006f70:	bf00      	nop
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	200005ec 	.word	0x200005ec

08006f7c <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	4603      	mov	r3, r0
 8006f84:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8006f86:	f001 fce4 	bl	8008952 <SUBGRF_GetRssiInst>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	b21b      	sxth	r3, r3
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b082      	sub	sp, #8
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	460a      	mov	r2, r1
 8006fa0:	80fb      	strh	r3, [r7, #6]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 8006fa6:	797a      	ldrb	r2, [r7, #5]
 8006fa8:	88fb      	ldrh	r3, [r7, #6]
 8006faa:	4611      	mov	r1, r2
 8006fac:	4618      	mov	r0, r3
 8006fae:	f001 fd63 	bl	8008a78 <SUBGRF_WriteRegister>
}
 8006fb2:	bf00      	nop
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b082      	sub	sp, #8
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 8006fc4:	88fb      	ldrh	r3, [r7, #6]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f001 fd6a 	bl	8008aa0 <SUBGRF_ReadRegister>
 8006fcc:	4603      	mov	r3, r0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b082      	sub	sp, #8
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	4603      	mov	r3, r0
 8006fde:	6039      	str	r1, [r7, #0]
 8006fe0:	80fb      	strh	r3, [r7, #6]
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8006fe6:	797b      	ldrb	r3, [r7, #5]
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	88fb      	ldrh	r3, [r7, #6]
 8006fec:	6839      	ldr	r1, [r7, #0]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f001 fd6a 	bl	8008ac8 <SUBGRF_WriteRegisters>
}
 8006ff4:	bf00      	nop
 8006ff6:	3708      	adds	r7, #8
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	4603      	mov	r3, r0
 8007004:	6039      	str	r1, [r7, #0]
 8007006:	80fb      	strh	r3, [r7, #6]
 8007008:	4613      	mov	r3, r2
 800700a:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 800700c:	797b      	ldrb	r3, [r7, #5]
 800700e:	b29a      	uxth	r2, r3
 8007010:	88fb      	ldrh	r3, [r7, #6]
 8007012:	6839      	ldr	r1, [r7, #0]
 8007014:	4618      	mov	r0, r3
 8007016:	f001 fd79 	bl	8008b0c <SUBGRF_ReadRegisters>
}
 800701a:	bf00      	nop
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
	...

08007024 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	4603      	mov	r3, r0
 800702c:	460a      	mov	r2, r1
 800702e:	71fb      	strb	r3, [r7, #7]
 8007030:	4613      	mov	r3, r2
 8007032:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8007034:	79fb      	ldrb	r3, [r7, #7]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d10a      	bne.n	8007050 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800703a:	4a0e      	ldr	r2, [pc, #56]	; (8007074 <RadioSetMaxPayloadLength+0x50>)
 800703c:	79bb      	ldrb	r3, [r7, #6]
 800703e:	7013      	strb	r3, [r2, #0]
 8007040:	4b0c      	ldr	r3, [pc, #48]	; (8007074 <RadioSetMaxPayloadLength+0x50>)
 8007042:	781a      	ldrb	r2, [r3, #0]
 8007044:	4b0c      	ldr	r3, [pc, #48]	; (8007078 <RadioSetMaxPayloadLength+0x54>)
 8007046:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007048:	480c      	ldr	r0, [pc, #48]	; (800707c <RadioSetMaxPayloadLength+0x58>)
 800704a:	f001 fbcd 	bl	80087e8 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800704e:	e00d      	b.n	800706c <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8007050:	4b09      	ldr	r3, [pc, #36]	; (8007078 <RadioSetMaxPayloadLength+0x54>)
 8007052:	7d5b      	ldrb	r3, [r3, #21]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d109      	bne.n	800706c <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8007058:	4a06      	ldr	r2, [pc, #24]	; (8007074 <RadioSetMaxPayloadLength+0x50>)
 800705a:	79bb      	ldrb	r3, [r7, #6]
 800705c:	7013      	strb	r3, [r2, #0]
 800705e:	4b05      	ldr	r3, [pc, #20]	; (8007074 <RadioSetMaxPayloadLength+0x50>)
 8007060:	781a      	ldrb	r2, [r3, #0]
 8007062:	4b05      	ldr	r3, [pc, #20]	; (8007078 <RadioSetMaxPayloadLength+0x54>)
 8007064:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007066:	4805      	ldr	r0, [pc, #20]	; (800707c <RadioSetMaxPayloadLength+0x58>)
 8007068:	f001 fbbe 	bl	80087e8 <SUBGRF_SetPacketParams>
}
 800706c:	bf00      	nop
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	2000000d 	.word	0x2000000d
 8007078:	20000594 	.word	0x20000594
 800707c:	200005a2 	.word	0x200005a2

08007080 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
 8007086:	4603      	mov	r3, r0
 8007088:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800708a:	4a13      	ldr	r2, [pc, #76]	; (80070d8 <RadioSetPublicNetwork+0x58>)
 800708c:	79fb      	ldrb	r3, [r7, #7]
 800708e:	7313      	strb	r3, [r2, #12]
 8007090:	4b11      	ldr	r3, [pc, #68]	; (80070d8 <RadioSetPublicNetwork+0x58>)
 8007092:	7b1a      	ldrb	r2, [r3, #12]
 8007094:	4b10      	ldr	r3, [pc, #64]	; (80070d8 <RadioSetPublicNetwork+0x58>)
 8007096:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8007098:	2001      	movs	r0, #1
 800709a:	f7ff f831 	bl	8006100 <RadioSetModem>
    if( enable == true )
 800709e:	79fb      	ldrb	r3, [r7, #7]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00a      	beq.n	80070ba <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80070a4:	2134      	movs	r1, #52	; 0x34
 80070a6:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80070aa:	f001 fce5 	bl	8008a78 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80070ae:	2144      	movs	r1, #68	; 0x44
 80070b0:	f240 7041 	movw	r0, #1857	; 0x741
 80070b4:	f001 fce0 	bl	8008a78 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80070b8:	e009      	b.n	80070ce <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80070ba:	2114      	movs	r1, #20
 80070bc:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80070c0:	f001 fcda 	bl	8008a78 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80070c4:	2124      	movs	r1, #36	; 0x24
 80070c6:	f240 7041 	movw	r0, #1857	; 0x741
 80070ca:	f001 fcd5 	bl	8008a78 <SUBGRF_WriteRegister>
}
 80070ce:	bf00      	nop
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	20000594 	.word	0x20000594

080070dc <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80070e0:	f001 fe1a 	bl	8008d18 <SUBGRF_GetRadioWakeUpTime>
 80070e4:	4603      	mov	r3, r0
 80070e6:	3303      	adds	r3, #3
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	bd80      	pop	{r7, pc}

080070ec <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 80070f4:	f000 f80e 	bl	8007114 <RadioOnTxTimeoutProcess>
}
 80070f8:	bf00      	nop
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8007108:	f000 f818 	bl	800713c <RadioOnRxTimeoutProcess>
}
 800710c:	bf00      	nop
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8007114:	b580      	push	{r7, lr}
 8007116:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8007118:	4b07      	ldr	r3, [pc, #28]	; (8007138 <RadioOnTxTimeoutProcess+0x24>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d008      	beq.n	8007132 <RadioOnTxTimeoutProcess+0x1e>
 8007120:	4b05      	ldr	r3, [pc, #20]	; (8007138 <RadioOnTxTimeoutProcess+0x24>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d003      	beq.n	8007132 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 800712a:	4b03      	ldr	r3, [pc, #12]	; (8007138 <RadioOnTxTimeoutProcess+0x24>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	4798      	blx	r3
    }
}
 8007132:	bf00      	nop
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	200002a0 	.word	0x200002a0

0800713c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800713c:	b580      	push	{r7, lr}
 800713e:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8007140:	4b07      	ldr	r3, [pc, #28]	; (8007160 <RadioOnRxTimeoutProcess+0x24>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d008      	beq.n	800715a <RadioOnRxTimeoutProcess+0x1e>
 8007148:	4b05      	ldr	r3, [pc, #20]	; (8007160 <RadioOnRxTimeoutProcess+0x24>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d003      	beq.n	800715a <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8007152:	4b03      	ldr	r3, [pc, #12]	; (8007160 <RadioOnRxTimeoutProcess+0x24>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	4798      	blx	r3
    }
}
 800715a:	bf00      	nop
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	200002a0 	.word	0x200002a0

08007164 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	4603      	mov	r3, r0
 800716c:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800716e:	4a05      	ldr	r2, [pc, #20]	; (8007184 <RadioOnDioIrq+0x20>)
 8007170:	88fb      	ldrh	r3, [r7, #6]
 8007172:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8007176:	f000 f807 	bl	8007188 <RadioIrqProcess>
}
 800717a:	bf00      	nop
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	20000594 	.word	0x20000594

08007188 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8007188:	b590      	push	{r4, r7, lr}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800718e:	2300      	movs	r3, #0
 8007190:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8007192:	2300      	movs	r3, #0
 8007194:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 8007196:	4bb4      	ldr	r3, [pc, #720]	; (8007468 <RadioIrqProcess+0x2e0>)
 8007198:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800719c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071a0:	f000 810c 	beq.w	80073bc <RadioIrqProcess+0x234>
 80071a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071a8:	f300 8184 	bgt.w	80074b4 <RadioIrqProcess+0x32c>
 80071ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071b0:	f000 80f0 	beq.w	8007394 <RadioIrqProcess+0x20c>
 80071b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071b8:	f300 817c 	bgt.w	80074b4 <RadioIrqProcess+0x32c>
 80071bc:	2b80      	cmp	r3, #128	; 0x80
 80071be:	f000 80d5 	beq.w	800736c <RadioIrqProcess+0x1e4>
 80071c2:	2b80      	cmp	r3, #128	; 0x80
 80071c4:	f300 8176 	bgt.w	80074b4 <RadioIrqProcess+0x32c>
 80071c8:	2b20      	cmp	r3, #32
 80071ca:	dc49      	bgt.n	8007260 <RadioIrqProcess+0xd8>
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f340 8171 	ble.w	80074b4 <RadioIrqProcess+0x32c>
 80071d2:	3b01      	subs	r3, #1
 80071d4:	2b1f      	cmp	r3, #31
 80071d6:	f200 816d 	bhi.w	80074b4 <RadioIrqProcess+0x32c>
 80071da:	a201      	add	r2, pc, #4	; (adr r2, 80071e0 <RadioIrqProcess+0x58>)
 80071dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e0:	08007269 	.word	0x08007269
 80071e4:	080072a3 	.word	0x080072a3
 80071e8:	080074b5 	.word	0x080074b5
 80071ec:	080074b5 	.word	0x080074b5
 80071f0:	080074b5 	.word	0x080074b5
 80071f4:	080074b5 	.word	0x080074b5
 80071f8:	080074b5 	.word	0x080074b5
 80071fc:	08007421 	.word	0x08007421
 8007200:	080074b5 	.word	0x080074b5
 8007204:	080074b5 	.word	0x080074b5
 8007208:	080074b5 	.word	0x080074b5
 800720c:	080074b5 	.word	0x080074b5
 8007210:	080074b5 	.word	0x080074b5
 8007214:	080074b5 	.word	0x080074b5
 8007218:	080074b5 	.word	0x080074b5
 800721c:	080074b5 	.word	0x080074b5
 8007220:	080074b5 	.word	0x080074b5
 8007224:	080074b5 	.word	0x080074b5
 8007228:	080074b5 	.word	0x080074b5
 800722c:	080074b5 	.word	0x080074b5
 8007230:	080074b5 	.word	0x080074b5
 8007234:	080074b5 	.word	0x080074b5
 8007238:	080074b5 	.word	0x080074b5
 800723c:	080074b5 	.word	0x080074b5
 8007240:	080074b5 	.word	0x080074b5
 8007244:	080074b5 	.word	0x080074b5
 8007248:	080074b5 	.word	0x080074b5
 800724c:	080074b5 	.word	0x080074b5
 8007250:	080074b5 	.word	0x080074b5
 8007254:	080074b5 	.word	0x080074b5
 8007258:	080074b5 	.word	0x080074b5
 800725c:	08007431 	.word	0x08007431
 8007260:	2b40      	cmp	r3, #64	; 0x40
 8007262:	f000 810f 	beq.w	8007484 <RadioIrqProcess+0x2fc>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8007266:	e125      	b.n	80074b4 <RadioIrqProcess+0x32c>
        TimerStop( &TxTimeoutTimer );
 8007268:	4880      	ldr	r0, [pc, #512]	; (800746c <RadioIrqProcess+0x2e4>)
 800726a:	f002 f881 	bl	8009370 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800726e:	2000      	movs	r0, #0
 8007270:	f000 fef4 	bl	800805c <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 8007274:	f001 fee6 	bl	8009044 <RFW_Is_LongPacketModeEnabled>
 8007278:	4603      	mov	r3, r0
 800727a:	2b01      	cmp	r3, #1
 800727c:	d101      	bne.n	8007282 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 800727e:	f001 ff0a 	bl	8009096 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8007282:	4b7b      	ldr	r3, [pc, #492]	; (8007470 <RadioIrqProcess+0x2e8>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	f000 8116 	beq.w	80074b8 <RadioIrqProcess+0x330>
 800728c:	4b78      	ldr	r3, [pc, #480]	; (8007470 <RadioIrqProcess+0x2e8>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 8110 	beq.w	80074b8 <RadioIrqProcess+0x330>
            RadioEvents->TxDone( );
 8007298:	4b75      	ldr	r3, [pc, #468]	; (8007470 <RadioIrqProcess+0x2e8>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4798      	blx	r3
        break;
 80072a0:	e10a      	b.n	80074b8 <RadioIrqProcess+0x330>
        TimerStop( &RxTimeoutTimer );
 80072a2:	4874      	ldr	r0, [pc, #464]	; (8007474 <RadioIrqProcess+0x2ec>)
 80072a4:	f002 f864 	bl	8009370 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80072a8:	4b6f      	ldr	r3, [pc, #444]	; (8007468 <RadioIrqProcess+0x2e0>)
 80072aa:	785b      	ldrb	r3, [r3, #1]
 80072ac:	f083 0301 	eor.w	r3, r3, #1
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d014      	beq.n	80072e0 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 80072b6:	2000      	movs	r0, #0
 80072b8:	f000 fed0 	bl	800805c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 80072bc:	2100      	movs	r1, #0
 80072be:	f640 1002 	movw	r0, #2306	; 0x902
 80072c2:	f001 fbd9 	bl	8008a78 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 80072c6:	f640 1044 	movw	r0, #2372	; 0x944
 80072ca:	f001 fbe9 	bl	8008aa0 <SUBGRF_ReadRegister>
 80072ce:	4603      	mov	r3, r0
 80072d0:	f043 0302 	orr.w	r3, r3, #2
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	4619      	mov	r1, r3
 80072d8:	f640 1044 	movw	r0, #2372	; 0x944
 80072dc:	f001 fbcc 	bl	8008a78 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 80072e0:	1dfb      	adds	r3, r7, #7
 80072e2:	22ff      	movs	r2, #255	; 0xff
 80072e4:	4619      	mov	r1, r3
 80072e6:	4864      	ldr	r0, [pc, #400]	; (8007478 <RadioIrqProcess+0x2f0>)
 80072e8:	f000 fd88 	bl	8007dfc <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 80072ec:	4863      	ldr	r0, [pc, #396]	; (800747c <RadioIrqProcess+0x2f4>)
 80072ee:	f001 fb71 	bl	80089d4 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80072f2:	4b5f      	ldr	r3, [pc, #380]	; (8007470 <RadioIrqProcess+0x2e8>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d036      	beq.n	8007368 <RadioIrqProcess+0x1e0>
 80072fa:	4b5d      	ldr	r3, [pc, #372]	; (8007470 <RadioIrqProcess+0x2e8>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d031      	beq.n	8007368 <RadioIrqProcess+0x1e0>
            switch ( SubgRf.PacketStatus.packetType )
 8007304:	4b58      	ldr	r3, [pc, #352]	; (8007468 <RadioIrqProcess+0x2e0>)
 8007306:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800730a:	2b01      	cmp	r3, #1
 800730c:	d10e      	bne.n	800732c <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 800730e:	4b58      	ldr	r3, [pc, #352]	; (8007470 <RadioIrqProcess+0x2e8>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	689c      	ldr	r4, [r3, #8]
 8007314:	79fb      	ldrb	r3, [r7, #7]
 8007316:	b299      	uxth	r1, r3
 8007318:	4b53      	ldr	r3, [pc, #332]	; (8007468 <RadioIrqProcess+0x2e0>)
 800731a:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800731e:	b21a      	sxth	r2, r3
 8007320:	4b51      	ldr	r3, [pc, #324]	; (8007468 <RadioIrqProcess+0x2e0>)
 8007322:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8007326:	4854      	ldr	r0, [pc, #336]	; (8007478 <RadioIrqProcess+0x2f0>)
 8007328:	47a0      	blx	r4
                break;
 800732a:	e01e      	b.n	800736a <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800732c:	4b4e      	ldr	r3, [pc, #312]	; (8007468 <RadioIrqProcess+0x2e0>)
 800732e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007330:	463a      	mov	r2, r7
 8007332:	4611      	mov	r1, r2
 8007334:	4618      	mov	r0, r3
 8007336:	f001 fdd1 	bl	8008edc <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 800733a:	4b4d      	ldr	r3, [pc, #308]	; (8007470 <RadioIrqProcess+0x2e8>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	689c      	ldr	r4, [r3, #8]
 8007340:	79fb      	ldrb	r3, [r7, #7]
 8007342:	b299      	uxth	r1, r3
 8007344:	4b48      	ldr	r3, [pc, #288]	; (8007468 <RadioIrqProcess+0x2e0>)
 8007346:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800734a:	b218      	sxth	r0, r3
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007352:	4a4b      	ldr	r2, [pc, #300]	; (8007480 <RadioIrqProcess+0x2f8>)
 8007354:	fb82 c203 	smull	ip, r2, r2, r3
 8007358:	1192      	asrs	r2, r2, #6
 800735a:	17db      	asrs	r3, r3, #31
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	b25b      	sxtb	r3, r3
 8007360:	4602      	mov	r2, r0
 8007362:	4845      	ldr	r0, [pc, #276]	; (8007478 <RadioIrqProcess+0x2f0>)
 8007364:	47a0      	blx	r4
                break;
 8007366:	e000      	b.n	800736a <RadioIrqProcess+0x1e2>
        }
 8007368:	bf00      	nop
        break;
 800736a:	e0b2      	b.n	80074d2 <RadioIrqProcess+0x34a>
        SUBGRF_SetStandby( STDBY_RC );
 800736c:	2000      	movs	r0, #0
 800736e:	f000 fe75 	bl	800805c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8007372:	4b3f      	ldr	r3, [pc, #252]	; (8007470 <RadioIrqProcess+0x2e8>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	f000 80a0 	beq.w	80074bc <RadioIrqProcess+0x334>
 800737c:	4b3c      	ldr	r3, [pc, #240]	; (8007470 <RadioIrqProcess+0x2e8>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 809a 	beq.w	80074bc <RadioIrqProcess+0x334>
            RadioEvents->CadDone( false );
 8007388:	4b39      	ldr	r3, [pc, #228]	; (8007470 <RadioIrqProcess+0x2e8>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	2000      	movs	r0, #0
 8007390:	4798      	blx	r3
        break;
 8007392:	e093      	b.n	80074bc <RadioIrqProcess+0x334>
        SUBGRF_SetStandby( STDBY_RC );
 8007394:	2000      	movs	r0, #0
 8007396:	f000 fe61 	bl	800805c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800739a:	4b35      	ldr	r3, [pc, #212]	; (8007470 <RadioIrqProcess+0x2e8>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f000 808e 	beq.w	80074c0 <RadioIrqProcess+0x338>
 80073a4:	4b32      	ldr	r3, [pc, #200]	; (8007470 <RadioIrqProcess+0x2e8>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f000 8088 	beq.w	80074c0 <RadioIrqProcess+0x338>
            RadioEvents->CadDone( true );
 80073b0:	4b2f      	ldr	r3, [pc, #188]	; (8007470 <RadioIrqProcess+0x2e8>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	2001      	movs	r0, #1
 80073b8:	4798      	blx	r3
        break;
 80073ba:	e081      	b.n	80074c0 <RadioIrqProcess+0x338>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80073bc:	f000 fd04 	bl	8007dc8 <SUBGRF_GetOperatingMode>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b04      	cmp	r3, #4
 80073c4:	d113      	bne.n	80073ee <RadioIrqProcess+0x266>
            TimerStop( &TxTimeoutTimer );
 80073c6:	4829      	ldr	r0, [pc, #164]	; (800746c <RadioIrqProcess+0x2e4>)
 80073c8:	f001 ffd2 	bl	8009370 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80073cc:	2000      	movs	r0, #0
 80073ce:	f000 fe45 	bl	800805c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80073d2:	4b27      	ldr	r3, [pc, #156]	; (8007470 <RadioIrqProcess+0x2e8>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d074      	beq.n	80074c4 <RadioIrqProcess+0x33c>
 80073da:	4b25      	ldr	r3, [pc, #148]	; (8007470 <RadioIrqProcess+0x2e8>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d06f      	beq.n	80074c4 <RadioIrqProcess+0x33c>
                RadioEvents->TxTimeout( );
 80073e4:	4b22      	ldr	r3, [pc, #136]	; (8007470 <RadioIrqProcess+0x2e8>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	4798      	blx	r3
        break;
 80073ec:	e06a      	b.n	80074c4 <RadioIrqProcess+0x33c>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80073ee:	f000 fceb 	bl	8007dc8 <SUBGRF_GetOperatingMode>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b05      	cmp	r3, #5
 80073f6:	d165      	bne.n	80074c4 <RadioIrqProcess+0x33c>
            TimerStop( &RxTimeoutTimer );
 80073f8:	481e      	ldr	r0, [pc, #120]	; (8007474 <RadioIrqProcess+0x2ec>)
 80073fa:	f001 ffb9 	bl	8009370 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80073fe:	2000      	movs	r0, #0
 8007400:	f000 fe2c 	bl	800805c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8007404:	4b1a      	ldr	r3, [pc, #104]	; (8007470 <RadioIrqProcess+0x2e8>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d05b      	beq.n	80074c4 <RadioIrqProcess+0x33c>
 800740c:	4b18      	ldr	r3, [pc, #96]	; (8007470 <RadioIrqProcess+0x2e8>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d056      	beq.n	80074c4 <RadioIrqProcess+0x33c>
                RadioEvents->RxTimeout( );
 8007416:	4b16      	ldr	r3, [pc, #88]	; (8007470 <RadioIrqProcess+0x2e8>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	4798      	blx	r3
        break;
 800741e:	e051      	b.n	80074c4 <RadioIrqProcess+0x33c>
        if ( 1UL == RFW_Is_Init( ) )
 8007420:	f001 fe09 	bl	8009036 <RFW_Is_Init>
 8007424:	4603      	mov	r3, r0
 8007426:	2b01      	cmp	r3, #1
 8007428:	d14e      	bne.n	80074c8 <RadioIrqProcess+0x340>
            RFW_ReceivePayload( );
 800742a:	f001 fe3a 	bl	80090a2 <RFW_ReceivePayload>
        break;
 800742e:	e04b      	b.n	80074c8 <RadioIrqProcess+0x340>
        TimerStop( &RxTimeoutTimer );
 8007430:	4810      	ldr	r0, [pc, #64]	; (8007474 <RadioIrqProcess+0x2ec>)
 8007432:	f001 ff9d 	bl	8009370 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8007436:	4b0c      	ldr	r3, [pc, #48]	; (8007468 <RadioIrqProcess+0x2e0>)
 8007438:	785b      	ldrb	r3, [r3, #1]
 800743a:	f083 0301 	eor.w	r3, r3, #1
 800743e:	b2db      	uxtb	r3, r3
 8007440:	2b00      	cmp	r3, #0
 8007442:	d002      	beq.n	800744a <RadioIrqProcess+0x2c2>
            SUBGRF_SetStandby( STDBY_RC );
 8007444:	2000      	movs	r0, #0
 8007446:	f000 fe09 	bl	800805c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800744a:	4b09      	ldr	r3, [pc, #36]	; (8007470 <RadioIrqProcess+0x2e8>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d03c      	beq.n	80074cc <RadioIrqProcess+0x344>
 8007452:	4b07      	ldr	r3, [pc, #28]	; (8007470 <RadioIrqProcess+0x2e8>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d037      	beq.n	80074cc <RadioIrqProcess+0x344>
            RadioEvents->RxTimeout( );
 800745c:	4b04      	ldr	r3, [pc, #16]	; (8007470 <RadioIrqProcess+0x2e8>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	4798      	blx	r3
        break;
 8007464:	e032      	b.n	80074cc <RadioIrqProcess+0x344>
 8007466:	bf00      	nop
 8007468:	20000594 	.word	0x20000594
 800746c:	200005ec 	.word	0x200005ec
 8007470:	200002a0 	.word	0x200002a0
 8007474:	20000604 	.word	0x20000604
 8007478:	200001a0 	.word	0x200001a0
 800747c:	200005b8 	.word	0x200005b8
 8007480:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxContinuous == false )
 8007484:	4b15      	ldr	r3, [pc, #84]	; (80074dc <RadioIrqProcess+0x354>)
 8007486:	785b      	ldrb	r3, [r3, #1]
 8007488:	f083 0301 	eor.w	r3, r3, #1
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d002      	beq.n	8007498 <RadioIrqProcess+0x310>
            SUBGRF_SetStandby( STDBY_RC );
 8007492:	2000      	movs	r0, #0
 8007494:	f000 fde2 	bl	800805c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8007498:	4b11      	ldr	r3, [pc, #68]	; (80074e0 <RadioIrqProcess+0x358>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d017      	beq.n	80074d0 <RadioIrqProcess+0x348>
 80074a0:	4b0f      	ldr	r3, [pc, #60]	; (80074e0 <RadioIrqProcess+0x358>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d012      	beq.n	80074d0 <RadioIrqProcess+0x348>
            RadioEvents->RxError( );
 80074aa:	4b0d      	ldr	r3, [pc, #52]	; (80074e0 <RadioIrqProcess+0x358>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	4798      	blx	r3
        break;
 80074b2:	e00d      	b.n	80074d0 <RadioIrqProcess+0x348>
        break;
 80074b4:	bf00      	nop
 80074b6:	e00c      	b.n	80074d2 <RadioIrqProcess+0x34a>
        break;
 80074b8:	bf00      	nop
 80074ba:	e00a      	b.n	80074d2 <RadioIrqProcess+0x34a>
        break;
 80074bc:	bf00      	nop
 80074be:	e008      	b.n	80074d2 <RadioIrqProcess+0x34a>
        break;
 80074c0:	bf00      	nop
 80074c2:	e006      	b.n	80074d2 <RadioIrqProcess+0x34a>
        break;
 80074c4:	bf00      	nop
 80074c6:	e004      	b.n	80074d2 <RadioIrqProcess+0x34a>
        break;
 80074c8:	bf00      	nop
 80074ca:	e002      	b.n	80074d2 <RadioIrqProcess+0x34a>
        break;
 80074cc:	bf00      	nop
 80074ce:	e000      	b.n	80074d2 <RadioIrqProcess+0x34a>
        break;
 80074d0:	bf00      	nop
  }
}
 80074d2:	bf00      	nop
 80074d4:	370c      	adds	r7, #12
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd90      	pop	{r4, r7, pc}
 80074da:	bf00      	nop
 80074dc:	20000594 	.word	0x20000594
 80074e0:	200002a0 	.word	0x200002a0

080074e4 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80074e8:	4b09      	ldr	r3, [pc, #36]	; (8007510 <RadioTxPrbs+0x2c>)
 80074ea:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80074ee:	2101      	movs	r1, #1
 80074f0:	4618      	mov	r0, r3
 80074f2:	f001 fbb5 	bl	8008c60 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 80074f6:	4b07      	ldr	r3, [pc, #28]	; (8007514 <RadioTxPrbs+0x30>)
 80074f8:	212d      	movs	r1, #45	; 0x2d
 80074fa:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80074fe:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8007500:	f000 fe6f 	bl	80081e2 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8007504:	4804      	ldr	r0, [pc, #16]	; (8007518 <RadioTxPrbs+0x34>)
 8007506:	f000 fdc5 	bl	8008094 <SUBGRF_SetTx>
}
 800750a:	bf00      	nop
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	20000594 	.word	0x20000594
 8007514:	08006f97 	.word	0x08006f97
 8007518:	000fffff 	.word	0x000fffff

0800751c <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	4603      	mov	r3, r0
 8007524:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8007526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800752a:	4618      	mov	r0, r3
 800752c:	f001 fbc0 	bl	8008cb0 <SUBGRF_SetRfTxPower>
 8007530:	4603      	mov	r3, r0
 8007532:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8007534:	7bfb      	ldrb	r3, [r7, #15]
 8007536:	2101      	movs	r1, #1
 8007538:	4618      	mov	r0, r3
 800753a:	f001 fb91 	bl	8008c60 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800753e:	f000 fe47 	bl	80081d0 <SUBGRF_SetTxContinuousWave>
}
 8007542:	bf00      	nop
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800754a:	b480      	push	{r7}
 800754c:	b089      	sub	sp, #36	; 0x24
 800754e:	af00      	add	r7, sp, #0
 8007550:	60f8      	str	r0, [r7, #12]
 8007552:	60b9      	str	r1, [r7, #8]
 8007554:	4613      	mov	r3, r2
 8007556:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8007558:	2300      	movs	r3, #0
 800755a:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 800755c:	2300      	movs	r3, #0
 800755e:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 8007560:	2300      	movs	r3, #0
 8007562:	61bb      	str	r3, [r7, #24]
 8007564:	e011      	b.n	800758a <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	4413      	add	r3, r2
 800756c:	781a      	ldrb	r2, [r3, #0]
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	68b9      	ldr	r1, [r7, #8]
 8007572:	440b      	add	r3, r1
 8007574:	43d2      	mvns	r2, r2
 8007576:	b2d2      	uxtb	r2, r2
 8007578:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	4413      	add	r3, r2
 8007580:	2200      	movs	r2, #0
 8007582:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	3301      	adds	r3, #1
 8007588:	61bb      	str	r3, [r7, #24]
 800758a:	79fb      	ldrb	r3, [r7, #7]
 800758c:	69ba      	ldr	r2, [r7, #24]
 800758e:	429a      	cmp	r2, r3
 8007590:	dbe9      	blt.n	8007566 <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 8007592:	2300      	movs	r3, #0
 8007594:	61bb      	str	r3, [r7, #24]
 8007596:	e049      	b.n	800762c <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	425a      	negs	r2, r3
 800759c:	f003 0307 	and.w	r3, r3, #7
 80075a0:	f002 0207 	and.w	r2, r2, #7
 80075a4:	bf58      	it	pl
 80075a6:	4253      	negpl	r3, r2
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	f1c3 0307 	rsb	r3, r3, #7
 80075ae:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	da00      	bge.n	80075b8 <payload_integration+0x6e>
 80075b6:	3307      	adds	r3, #7
 80075b8:	10db      	asrs	r3, r3, #3
 80075ba:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	3301      	adds	r3, #1
 80075c0:	425a      	negs	r2, r3
 80075c2:	f003 0307 	and.w	r3, r3, #7
 80075c6:	f002 0207 	and.w	r2, r2, #7
 80075ca:	bf58      	it	pl
 80075cc:	4253      	negpl	r3, r2
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	f1c3 0307 	rsb	r3, r3, #7
 80075d4:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	3301      	adds	r3, #1
 80075da:	2b00      	cmp	r3, #0
 80075dc:	da00      	bge.n	80075e0 <payload_integration+0x96>
 80075de:	3307      	adds	r3, #7
 80075e0:	10db      	asrs	r3, r3, #3
 80075e2:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80075e4:	7dbb      	ldrb	r3, [r7, #22]
 80075e6:	68ba      	ldr	r2, [r7, #8]
 80075e8:	4413      	add	r3, r2
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	461a      	mov	r2, r3
 80075ee:	7dfb      	ldrb	r3, [r7, #23]
 80075f0:	fa42 f303 	asr.w	r3, r2, r3
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	f003 0301 	and.w	r3, r3, #1
 80075fa:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 80075fc:	7ffa      	ldrb	r2, [r7, #31]
 80075fe:	7cfb      	ldrb	r3, [r7, #19]
 8007600:	4053      	eors	r3, r2
 8007602:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8007604:	7d3b      	ldrb	r3, [r7, #20]
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	4413      	add	r3, r2
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	b25a      	sxtb	r2, r3
 800760e:	7ff9      	ldrb	r1, [r7, #31]
 8007610:	7d7b      	ldrb	r3, [r7, #21]
 8007612:	fa01 f303 	lsl.w	r3, r1, r3
 8007616:	b25b      	sxtb	r3, r3
 8007618:	4313      	orrs	r3, r2
 800761a:	b259      	sxtb	r1, r3
 800761c:	7d3b      	ldrb	r3, [r7, #20]
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	4413      	add	r3, r2
 8007622:	b2ca      	uxtb	r2, r1
 8007624:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	3301      	adds	r3, #1
 800762a:	61bb      	str	r3, [r7, #24]
 800762c:	79fb      	ldrb	r3, [r7, #7]
 800762e:	00db      	lsls	r3, r3, #3
 8007630:	69ba      	ldr	r2, [r7, #24]
 8007632:	429a      	cmp	r2, r3
 8007634:	dbb0      	blt.n	8007598 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8007636:	7ffb      	ldrb	r3, [r7, #31]
 8007638:	01db      	lsls	r3, r3, #7
 800763a:	b25a      	sxtb	r2, r3
 800763c:	7ffb      	ldrb	r3, [r7, #31]
 800763e:	019b      	lsls	r3, r3, #6
 8007640:	b25b      	sxtb	r3, r3
 8007642:	4313      	orrs	r3, r2
 8007644:	b25b      	sxtb	r3, r3
 8007646:	7ffa      	ldrb	r2, [r7, #31]
 8007648:	2a00      	cmp	r2, #0
 800764a:	d101      	bne.n	8007650 <payload_integration+0x106>
 800764c:	2220      	movs	r2, #32
 800764e:	e000      	b.n	8007652 <payload_integration+0x108>
 8007650:	2200      	movs	r2, #0
 8007652:	4313      	orrs	r3, r2
 8007654:	b259      	sxtb	r1, r3
 8007656:	79fb      	ldrb	r3, [r7, #7]
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	4413      	add	r3, r2
 800765c:	b2ca      	uxtb	r2, r1
 800765e:	701a      	strb	r2, [r3, #0]
}
 8007660:	bf00      	nop
 8007662:	3724      	adds	r7, #36	; 0x24
 8007664:	46bd      	mov	sp, r7
 8007666:	bc80      	pop	{r7}
 8007668:	4770      	bx	lr
	...

0800766c <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b08c      	sub	sp, #48	; 0x30
 8007670:	af00      	add	r7, sp, #0
 8007672:	60b9      	str	r1, [r7, #8]
 8007674:	607a      	str	r2, [r7, #4]
 8007676:	603b      	str	r3, [r7, #0]
 8007678:	4603      	mov	r3, r0
 800767a:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800767c:	2300      	movs	r3, #0
 800767e:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 8007680:	2300      	movs	r3, #0
 8007682:	61fb      	str	r3, [r7, #28]
 8007684:	2300      	movs	r3, #0
 8007686:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8007688:	f001 fccf 	bl	800902a <RFW_DeInit>

    if( rxContinuous != 0 )
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d001      	beq.n	8007696 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8007692:	2300      	movs	r3, #0
 8007694:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	bf14      	ite	ne
 800769c:	2301      	movne	r3, #1
 800769e:	2300      	moveq	r3, #0
 80076a0:	b2da      	uxtb	r2, r3
 80076a2:	4ba9      	ldr	r3, [pc, #676]	; (8007948 <RadioSetRxGenericConfig+0x2dc>)
 80076a4:	705a      	strb	r2, [r3, #1]

    switch( modem )
 80076a6:	7bfb      	ldrb	r3, [r7, #15]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d003      	beq.n	80076b4 <RadioSetRxGenericConfig+0x48>
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	f000 80e8 	beq.w	8007882 <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 80076b2:	e1a0      	b.n	80079f6 <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d003      	beq.n	80076c4 <RadioSetRxGenericConfig+0x58>
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d102      	bne.n	80076ca <RadioSetRxGenericConfig+0x5e>
            return -1;
 80076c4:	f04f 33ff 	mov.w	r3, #4294967295
 80076c8:	e196      	b.n	80079f8 <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	7d5b      	ldrb	r3, [r3, #21]
 80076ce:	2b08      	cmp	r3, #8
 80076d0:	d902      	bls.n	80076d8 <RadioSetRxGenericConfig+0x6c>
            return -1;
 80076d2:	f04f 33ff 	mov.w	r3, #4294967295
 80076d6:	e18f      	b.n	80079f8 <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80076d8:	2300      	movs	r3, #0
 80076da:	62bb      	str	r3, [r7, #40]	; 0x28
 80076dc:	e00d      	b.n	80076fa <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	699a      	ldr	r2, [r3, #24]
 80076e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e4:	4413      	add	r3, r2
 80076e6:	7819      	ldrb	r1, [r3, #0]
 80076e8:	f107 021c 	add.w	r2, r7, #28
 80076ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ee:	4413      	add	r3, r2
 80076f0:	460a      	mov	r2, r1
 80076f2:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80076f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f6:	3301      	adds	r3, #1
 80076f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	7d5b      	ldrb	r3, [r3, #21]
 80076fe:	461a      	mov	r2, r3
 8007700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007702:	4293      	cmp	r3, r2
 8007704:	dbeb      	blt.n	80076de <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	bf14      	ite	ne
 800770e:	2301      	movne	r3, #1
 8007710:	2300      	moveq	r3, #0
 8007712:	b2db      	uxtb	r3, r3
 8007714:	4618      	mov	r0, r3
 8007716:	f000 fd6d 	bl	80081f4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800771a:	4b8b      	ldr	r3, [pc, #556]	; (8007948 <RadioSetRxGenericConfig+0x2dc>)
 800771c:	2200      	movs	r2, #0
 800771e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	4a88      	ldr	r2, [pc, #544]	; (8007948 <RadioSetRxGenericConfig+0x2dc>)
 8007728:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	791a      	ldrb	r2, [r3, #4]
 800772e:	4b86      	ldr	r3, [pc, #536]	; (8007948 <RadioSetRxGenericConfig+0x2dc>)
 8007730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	4618      	mov	r0, r3
 800773a:	f001 fba7 	bl	8008e8c <SUBGRF_GetFskBandwidthRegValue>
 800773e:	4603      	mov	r3, r0
 8007740:	461a      	mov	r2, r3
 8007742:	4b81      	ldr	r3, [pc, #516]	; (8007948 <RadioSetRxGenericConfig+0x2dc>)
 8007744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007748:	4b7f      	ldr	r3, [pc, #508]	; (8007948 <RadioSetRxGenericConfig+0x2dc>)
 800774a:	2200      	movs	r2, #0
 800774c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	b29b      	uxth	r3, r3
 8007754:	00db      	lsls	r3, r3, #3
 8007756:	b29a      	uxth	r2, r3
 8007758:	4b7b      	ldr	r3, [pc, #492]	; (8007948 <RadioSetRxGenericConfig+0x2dc>)
 800775a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	7d1a      	ldrb	r2, [r3, #20]
 8007760:	4b79      	ldr	r3, [pc, #484]	; (8007948 <RadioSetRxGenericConfig+0x2dc>)
 8007762:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	7d5b      	ldrb	r3, [r3, #21]
 8007768:	00db      	lsls	r3, r3, #3
 800776a:	b2da      	uxtb	r2, r3
 800776c:	4b76      	ldr	r3, [pc, #472]	; (8007948 <RadioSetRxGenericConfig+0x2dc>)
 800776e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8007776:	4b74      	ldr	r3, [pc, #464]	; (8007948 <RadioSetRxGenericConfig+0x2dc>)
 8007778:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007780:	2b00      	cmp	r3, #0
 8007782:	d105      	bne.n	8007790 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	69db      	ldr	r3, [r3, #28]
 8007788:	b2da      	uxtb	r2, r3
 800778a:	4b6f      	ldr	r3, [pc, #444]	; (8007948 <RadioSetRxGenericConfig+0x2dc>)
 800778c:	759a      	strb	r2, [r3, #22]
 800778e:	e00b      	b.n	80077a8 <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007796:	2b02      	cmp	r3, #2
 8007798:	d103      	bne.n	80077a2 <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800779a:	4b6b      	ldr	r3, [pc, #428]	; (8007948 <RadioSetRxGenericConfig+0x2dc>)
 800779c:	22ff      	movs	r2, #255	; 0xff
 800779e:	759a      	strb	r2, [r3, #22]
 80077a0:	e002      	b.n	80077a8 <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80077a2:	4b69      	ldr	r3, [pc, #420]	; (8007948 <RadioSetRxGenericConfig+0x2dc>)
 80077a4:	22ff      	movs	r2, #255	; 0xff
 80077a6:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d004      	beq.n	80077bc <RadioSetRxGenericConfig+0x150>
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d12d      	bne.n	8007818 <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80077c2:	2bf1      	cmp	r3, #241	; 0xf1
 80077c4:	d00c      	beq.n	80077e0 <RadioSetRxGenericConfig+0x174>
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80077cc:	2bf2      	cmp	r3, #242	; 0xf2
 80077ce:	d007      	beq.n	80077e0 <RadioSetRxGenericConfig+0x174>
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d002      	beq.n	80077e0 <RadioSetRxGenericConfig+0x174>
            return -1;
 80077da:	f04f 33ff 	mov.w	r3, #4294967295
 80077de:	e10b      	b.n	80079f8 <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 80077e0:	2300      	movs	r3, #0
 80077e2:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80077e8:	4b58      	ldr	r3, [pc, #352]	; (800794c <RadioSetRxGenericConfig+0x2e0>)
 80077ea:	6819      	ldr	r1, [r3, #0]
 80077ec:	f107 0310 	add.w	r3, r7, #16
 80077f0:	4a57      	ldr	r2, [pc, #348]	; (8007950 <RadioSetRxGenericConfig+0x2e4>)
 80077f2:	4618      	mov	r0, r3
 80077f4:	f001 fc0c 	bl	8009010 <RFW_Init>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d002      	beq.n	8007804 <RadioSetRxGenericConfig+0x198>
            return -1;
 80077fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007802:	e0f9      	b.n	80079f8 <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8007804:	4b50      	ldr	r3, [pc, #320]	; (8007948 <RadioSetRxGenericConfig+0x2dc>)
 8007806:	2200      	movs	r2, #0
 8007808:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800780a:	4b4f      	ldr	r3, [pc, #316]	; (8007948 <RadioSetRxGenericConfig+0x2dc>)
 800780c:	2201      	movs	r2, #1
 800780e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8007810:	4b4d      	ldr	r3, [pc, #308]	; (8007948 <RadioSetRxGenericConfig+0x2dc>)
 8007812:	2200      	movs	r2, #0
 8007814:	755a      	strb	r2, [r3, #21]
        {
 8007816:	e00e      	b.n	8007836 <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800781e:	4b4a      	ldr	r3, [pc, #296]	; (8007948 <RadioSetRxGenericConfig+0x2dc>)
 8007820:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8007828:	4b47      	ldr	r3, [pc, #284]	; (8007948 <RadioSetRxGenericConfig+0x2dc>)
 800782a:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8007832:	4b45      	ldr	r3, [pc, #276]	; (8007948 <RadioSetRxGenericConfig+0x2dc>)
 8007834:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8007836:	f7ff fac8 	bl	8006dca <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800783a:	2000      	movs	r0, #0
 800783c:	f7fe fc60 	bl	8006100 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007840:	4844      	ldr	r0, [pc, #272]	; (8007954 <RadioSetRxGenericConfig+0x2e8>)
 8007842:	f000 ff05 	bl	8008650 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007846:	4844      	ldr	r0, [pc, #272]	; (8007958 <RadioSetRxGenericConfig+0x2ec>)
 8007848:	f000 ffce 	bl	80087e8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800784c:	f107 031c 	add.w	r3, r7, #28
 8007850:	4618      	mov	r0, r3
 8007852:	f000 fb08 	bl	8007e66 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	8c1b      	ldrh	r3, [r3, #32]
 800785a:	4618      	mov	r0, r3
 800785c:	f000 fb52 	bl	8007f04 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007864:	4618      	mov	r0, r3
 8007866:	f000 fb2d 	bl	8007ec4 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007870:	fb02 f203 	mul.w	r2, r2, r3
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	fbb2 f3f3 	udiv	r3, r2, r3
 800787c:	4a32      	ldr	r2, [pc, #200]	; (8007948 <RadioSetRxGenericConfig+0x2dc>)
 800787e:	6093      	str	r3, [r2, #8]
        break;
 8007880:	e0b9      	b.n	80079f6 <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8007886:	2b00      	cmp	r3, #0
 8007888:	d102      	bne.n	8007890 <RadioSetRxGenericConfig+0x224>
            return -1;
 800788a:	f04f 33ff 	mov.w	r3, #4294967295
 800788e:	e0b3      	b.n	80079f8 <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007896:	2b01      	cmp	r3, #1
 8007898:	d104      	bne.n	80078a4 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	69db      	ldr	r3, [r3, #28]
 800789e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80078a2:	e002      	b.n	80078aa <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 80078a4:	23ff      	movs	r3, #255	; 0xff
 80078a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	bf14      	ite	ne
 80078b2:	2301      	movne	r3, #1
 80078b4:	2300      	moveq	r3, #0
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	4618      	mov	r0, r3
 80078ba:	f000 fc9b 	bl	80081f4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	4618      	mov	r0, r3
 80078c4:	f000 fca5 	bl	8008212 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80078c8:	4b1f      	ldr	r3, [pc, #124]	; (8007948 <RadioSetRxGenericConfig+0x2dc>)
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80078d6:	4b1c      	ldr	r3, [pc, #112]	; (8007948 <RadioSetRxGenericConfig+0x2dc>)
 80078d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80078e2:	4b19      	ldr	r3, [pc, #100]	; (8007948 <RadioSetRxGenericConfig+0x2dc>)
 80078e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80078ee:	4b16      	ldr	r3, [pc, #88]	; (8007948 <RadioSetRxGenericConfig+0x2dc>)
 80078f0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d010      	beq.n	8007920 <RadioSetRxGenericConfig+0x2b4>
 80078fe:	2b02      	cmp	r3, #2
 8007900:	dc2c      	bgt.n	800795c <RadioSetRxGenericConfig+0x2f0>
 8007902:	2b00      	cmp	r3, #0
 8007904:	d002      	beq.n	800790c <RadioSetRxGenericConfig+0x2a0>
 8007906:	2b01      	cmp	r3, #1
 8007908:	d005      	beq.n	8007916 <RadioSetRxGenericConfig+0x2aa>
            break;
 800790a:	e027      	b.n	800795c <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800790c:	4b0e      	ldr	r3, [pc, #56]	; (8007948 <RadioSetRxGenericConfig+0x2dc>)
 800790e:	2200      	movs	r2, #0
 8007910:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8007914:	e023      	b.n	800795e <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8007916:	4b0c      	ldr	r3, [pc, #48]	; (8007948 <RadioSetRxGenericConfig+0x2dc>)
 8007918:	2201      	movs	r2, #1
 800791a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800791e:	e01e      	b.n	800795e <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007926:	2b0b      	cmp	r3, #11
 8007928:	d004      	beq.n	8007934 <RadioSetRxGenericConfig+0x2c8>
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007930:	2b0c      	cmp	r3, #12
 8007932:	d104      	bne.n	800793e <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8007934:	4b04      	ldr	r3, [pc, #16]	; (8007948 <RadioSetRxGenericConfig+0x2dc>)
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800793c:	e00f      	b.n	800795e <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800793e:	4b02      	ldr	r3, [pc, #8]	; (8007948 <RadioSetRxGenericConfig+0x2dc>)
 8007940:	2200      	movs	r2, #0
 8007942:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8007946:	e00a      	b.n	800795e <RadioSetRxGenericConfig+0x2f2>
 8007948:	20000594 	.word	0x20000594
 800794c:	200002a0 	.word	0x200002a0
 8007950:	20000604 	.word	0x20000604
 8007954:	200005cc 	.word	0x200005cc
 8007958:	200005a2 	.word	0x200005a2
            break;
 800795c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800795e:	4b28      	ldr	r3, [pc, #160]	; (8007a00 <RadioSetRxGenericConfig+0x394>)
 8007960:	2201      	movs	r2, #1
 8007962:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8007968:	4b25      	ldr	r3, [pc, #148]	; (8007a00 <RadioSetRxGenericConfig+0x394>)
 800796a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8007972:	4b23      	ldr	r3, [pc, #140]	; (8007a00 <RadioSetRxGenericConfig+0x394>)
 8007974:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8007976:	4a22      	ldr	r2, [pc, #136]	; (8007a00 <RadioSetRxGenericConfig+0x394>)
 8007978:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800797c:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8007984:	4b1e      	ldr	r3, [pc, #120]	; (8007a00 <RadioSetRxGenericConfig+0x394>)
 8007986:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8007990:	4b1b      	ldr	r3, [pc, #108]	; (8007a00 <RadioSetRxGenericConfig+0x394>)
 8007992:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8007996:	f7ff fa18 	bl	8006dca <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800799a:	2001      	movs	r0, #1
 800799c:	f7fe fbb0 	bl	8006100 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80079a0:	4818      	ldr	r0, [pc, #96]	; (8007a04 <RadioSetRxGenericConfig+0x398>)
 80079a2:	f000 fe55 	bl	8008650 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80079a6:	4818      	ldr	r0, [pc, #96]	; (8007a08 <RadioSetRxGenericConfig+0x39c>)
 80079a8:	f000 ff1e 	bl	80087e8 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80079ac:	4b14      	ldr	r3, [pc, #80]	; (8007a00 <RadioSetRxGenericConfig+0x394>)
 80079ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d10d      	bne.n	80079d2 <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 80079b6:	f240 7036 	movw	r0, #1846	; 0x736
 80079ba:	f001 f871 	bl	8008aa0 <SUBGRF_ReadRegister>
 80079be:	4603      	mov	r3, r0
 80079c0:	f023 0304 	bic.w	r3, r3, #4
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	4619      	mov	r1, r3
 80079c8:	f240 7036 	movw	r0, #1846	; 0x736
 80079cc:	f001 f854 	bl	8008a78 <SUBGRF_WriteRegister>
 80079d0:	e00c      	b.n	80079ec <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 80079d2:	f240 7036 	movw	r0, #1846	; 0x736
 80079d6:	f001 f863 	bl	8008aa0 <SUBGRF_ReadRegister>
 80079da:	4603      	mov	r3, r0
 80079dc:	f043 0304 	orr.w	r3, r3, #4
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	4619      	mov	r1, r3
 80079e4:	f240 7036 	movw	r0, #1846	; 0x736
 80079e8:	f001 f846 	bl	8008a78 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 80079ec:	4b04      	ldr	r3, [pc, #16]	; (8007a00 <RadioSetRxGenericConfig+0x394>)
 80079ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80079f2:	609a      	str	r2, [r3, #8]
        break;
 80079f4:	bf00      	nop
    }
    return status;
 80079f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3730      	adds	r7, #48	; 0x30
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	20000594 	.word	0x20000594
 8007a04:	200005cc 	.word	0x200005cc
 8007a08:	200005a2 	.word	0x200005a2

08007a0c <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b08a      	sub	sp, #40	; 0x28
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60b9      	str	r1, [r7, #8]
 8007a14:	607b      	str	r3, [r7, #4]
 8007a16:	4603      	mov	r3, r0
 8007a18:	73fb      	strb	r3, [r7, #15]
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 8007a1e:	2300      	movs	r3, #0
 8007a20:	61fb      	str	r3, [r7, #28]
 8007a22:	2300      	movs	r3, #0
 8007a24:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8007a26:	f001 fb00 	bl	800902a <RFW_DeInit>
    switch( modem )
 8007a2a:	7bfb      	ldrb	r3, [r7, #15]
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	f000 8144 	beq.w	8007cba <RadioSetTxGenericConfig+0x2ae>
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	f300 8160 	bgt.w	8007cf8 <RadioSetTxGenericConfig+0x2ec>
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d003      	beq.n	8007a44 <RadioSetTxGenericConfig+0x38>
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	f000 80b7 	beq.w	8007bb0 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 8007a42:	e159      	b.n	8007cf8 <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d003      	beq.n	8007a54 <RadioSetTxGenericConfig+0x48>
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d102      	bne.n	8007a5a <RadioSetTxGenericConfig+0x4e>
            return -1;
 8007a54:	f04f 33ff 	mov.w	r3, #4294967295
 8007a58:	e163      	b.n	8007d22 <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	7d1b      	ldrb	r3, [r3, #20]
 8007a5e:	2b08      	cmp	r3, #8
 8007a60:	d902      	bls.n	8007a68 <RadioSetTxGenericConfig+0x5c>
            return -1;
 8007a62:	f04f 33ff 	mov.w	r3, #4294967295
 8007a66:	e15c      	b.n	8007d22 <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8007a68:	2300      	movs	r3, #0
 8007a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8007a6c:	e00d      	b.n	8007a8a <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	699a      	ldr	r2, [r3, #24]
 8007a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a74:	4413      	add	r3, r2
 8007a76:	7819      	ldrb	r1, [r3, #0]
 8007a78:	f107 021c 	add.w	r2, r7, #28
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	4413      	add	r3, r2
 8007a80:	460a      	mov	r2, r1
 8007a82:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8007a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a86:	3301      	adds	r3, #1
 8007a88:	627b      	str	r3, [r7, #36]	; 0x24
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	7d1b      	ldrb	r3, [r3, #20]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a92:	4293      	cmp	r3, r2
 8007a94:	dbeb      	blt.n	8007a6e <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007a96:	4ba5      	ldr	r3, [pc, #660]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	4aa2      	ldr	r2, [pc, #648]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007aa4:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	781a      	ldrb	r2, [r3, #0]
 8007aaa:	4ba0      	ldr	r3, [pc, #640]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f001 f9e9 	bl	8008e8c <SUBGRF_GetFskBandwidthRegValue>
 8007aba:	4603      	mov	r3, r0
 8007abc:	461a      	mov	r2, r3
 8007abe:	4b9b      	ldr	r3, [pc, #620]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	4a98      	ldr	r2, [pc, #608]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007aca:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007acc:	4b97      	ldr	r3, [pc, #604]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007ace:	2200      	movs	r2, #0
 8007ad0:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	00db      	lsls	r3, r3, #3
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	4b93      	ldr	r3, [pc, #588]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007ade:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8007ae0:	4b92      	ldr	r3, [pc, #584]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007ae2:	2204      	movs	r2, #4
 8007ae4:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	7d1b      	ldrb	r3, [r3, #20]
 8007aea:	00db      	lsls	r3, r3, #3
 8007aec:	b2da      	uxtb	r2, r3
 8007aee:	4b8f      	ldr	r3, [pc, #572]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007af0:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8007af2:	4b8e      	ldr	r3, [pc, #568]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007af4:	2200      	movs	r2, #0
 8007af6:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d003      	beq.n	8007b0a <RadioSetTxGenericConfig+0xfe>
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	7f9b      	ldrb	r3, [r3, #30]
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d12a      	bne.n	8007b60 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	7fdb      	ldrb	r3, [r3, #31]
 8007b0e:	2bf1      	cmp	r3, #241	; 0xf1
 8007b10:	d00a      	beq.n	8007b28 <RadioSetTxGenericConfig+0x11c>
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	7fdb      	ldrb	r3, [r3, #31]
 8007b16:	2bf2      	cmp	r3, #242	; 0xf2
 8007b18:	d006      	beq.n	8007b28 <RadioSetTxGenericConfig+0x11c>
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	7fdb      	ldrb	r3, [r3, #31]
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d002      	beq.n	8007b28 <RadioSetTxGenericConfig+0x11c>
                return -1;
 8007b22:	f04f 33ff 	mov.w	r3, #4294967295
 8007b26:	e0fc      	b.n	8007d22 <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8007b30:	4b7f      	ldr	r3, [pc, #508]	; (8007d30 <RadioSetTxGenericConfig+0x324>)
 8007b32:	6819      	ldr	r1, [r3, #0]
 8007b34:	f107 0310 	add.w	r3, r7, #16
 8007b38:	4a7e      	ldr	r2, [pc, #504]	; (8007d34 <RadioSetTxGenericConfig+0x328>)
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f001 fa68 	bl	8009010 <RFW_Init>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d002      	beq.n	8007b4c <RadioSetTxGenericConfig+0x140>
              return -1;
 8007b46:	f04f 33ff 	mov.w	r3, #4294967295
 8007b4a:	e0ea      	b.n	8007d22 <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8007b4c:	4b77      	ldr	r3, [pc, #476]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007b4e:	2200      	movs	r2, #0
 8007b50:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8007b52:	4b76      	ldr	r3, [pc, #472]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007b54:	2201      	movs	r2, #1
 8007b56:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8007b58:	4b74      	ldr	r3, [pc, #464]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	755a      	strb	r2, [r3, #21]
        {
 8007b5e:	e00c      	b.n	8007b7a <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	7fda      	ldrb	r2, [r3, #31]
 8007b64:	4b71      	ldr	r3, [pc, #452]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007b66:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8007b6e:	4b6f      	ldr	r3, [pc, #444]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007b70:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	7f9a      	ldrb	r2, [r3, #30]
 8007b76:	4b6d      	ldr	r3, [pc, #436]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007b78:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8007b7a:	f7ff f926 	bl	8006dca <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8007b7e:	2000      	movs	r0, #0
 8007b80:	f7fe fabe 	bl	8006100 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007b84:	486c      	ldr	r0, [pc, #432]	; (8007d38 <RadioSetTxGenericConfig+0x32c>)
 8007b86:	f000 fd63 	bl	8008650 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007b8a:	486c      	ldr	r0, [pc, #432]	; (8007d3c <RadioSetTxGenericConfig+0x330>)
 8007b8c:	f000 fe2c 	bl	80087e8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8007b90:	f107 031c 	add.w	r3, r7, #28
 8007b94:	4618      	mov	r0, r3
 8007b96:	f000 f966 	bl	8007e66 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	8b9b      	ldrh	r3, [r3, #28]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f000 f9b0 	bl	8007f04 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	8c1b      	ldrh	r3, [r3, #32]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f000 f98b 	bl	8007ec4 <SUBGRF_SetCrcPolynomial>
        break;
 8007bae:	e0a4      	b.n	8007cfa <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007bb0:	4b5e      	ldr	r3, [pc, #376]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8007bbe:	4b5b      	ldr	r3, [pc, #364]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007bc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8007bca:	4b58      	ldr	r3, [pc, #352]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007bcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8007bd6:	4b55      	ldr	r3, [pc, #340]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007bd8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d010      	beq.n	8007c08 <RadioSetTxGenericConfig+0x1fc>
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	dc22      	bgt.n	8007c30 <RadioSetTxGenericConfig+0x224>
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d002      	beq.n	8007bf4 <RadioSetTxGenericConfig+0x1e8>
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d005      	beq.n	8007bfe <RadioSetTxGenericConfig+0x1f2>
            break;
 8007bf2:	e01d      	b.n	8007c30 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8007bf4:	4b4d      	ldr	r3, [pc, #308]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8007bfc:	e019      	b.n	8007c32 <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8007bfe:	4b4b      	ldr	r3, [pc, #300]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8007c06:	e014      	b.n	8007c32 <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c0e:	2b0b      	cmp	r3, #11
 8007c10:	d004      	beq.n	8007c1c <RadioSetTxGenericConfig+0x210>
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c18:	2b0c      	cmp	r3, #12
 8007c1a:	d104      	bne.n	8007c26 <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8007c1c:	4b43      	ldr	r3, [pc, #268]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8007c24:	e005      	b.n	8007c32 <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8007c26:	4b41      	ldr	r3, [pc, #260]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8007c2e:	e000      	b.n	8007c32 <RadioSetTxGenericConfig+0x226>
            break;
 8007c30:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007c32:	4b3e      	ldr	r3, [pc, #248]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007c34:	2201      	movs	r2, #1
 8007c36:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c3c:	4b3b      	ldr	r3, [pc, #236]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007c3e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8007c46:	4b39      	ldr	r3, [pc, #228]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007c48:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007c50:	4b36      	ldr	r3, [pc, #216]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007c52:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8007c5c:	4b33      	ldr	r3, [pc, #204]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007c5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8007c62:	f7ff f8b2 	bl	8006dca <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8007c66:	2001      	movs	r0, #1
 8007c68:	f7fe fa4a 	bl	8006100 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007c6c:	4832      	ldr	r0, [pc, #200]	; (8007d38 <RadioSetTxGenericConfig+0x32c>)
 8007c6e:	f000 fcef 	bl	8008650 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007c72:	4832      	ldr	r0, [pc, #200]	; (8007d3c <RadioSetTxGenericConfig+0x330>)
 8007c74:	f000 fdb8 	bl	80087e8 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8007c78:	4b2c      	ldr	r3, [pc, #176]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007c7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c7e:	2b06      	cmp	r3, #6
 8007c80:	d10d      	bne.n	8007c9e <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8007c82:	f640 0089 	movw	r0, #2185	; 0x889
 8007c86:	f000 ff0b 	bl	8008aa0 <SUBGRF_ReadRegister>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	f023 0304 	bic.w	r3, r3, #4
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	4619      	mov	r1, r3
 8007c94:	f640 0089 	movw	r0, #2185	; 0x889
 8007c98:	f000 feee 	bl	8008a78 <SUBGRF_WriteRegister>
        break;
 8007c9c:	e02d      	b.n	8007cfa <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8007c9e:	f640 0089 	movw	r0, #2185	; 0x889
 8007ca2:	f000 fefd 	bl	8008aa0 <SUBGRF_ReadRegister>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	f043 0304 	orr.w	r3, r3, #4
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	4619      	mov	r1, r3
 8007cb0:	f640 0089 	movw	r0, #2185	; 0x889
 8007cb4:	f000 fee0 	bl	8008a78 <SUBGRF_WriteRegister>
        break;
 8007cb8:	e01f      	b.n	8007cfa <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d004      	beq.n	8007ccc <RadioSetTxGenericConfig+0x2c0>
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007cca:	d902      	bls.n	8007cd2 <RadioSetTxGenericConfig+0x2c6>
            return -1;
 8007ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8007cd0:	e027      	b.n	8007d22 <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 8007cd2:	2002      	movs	r0, #2
 8007cd4:	f7fe fa14 	bl	8006100 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8007cd8:	4b14      	ldr	r3, [pc, #80]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007cda:	2202      	movs	r2, #2
 8007cdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ce4:	4a11      	ldr	r2, [pc, #68]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007ce6:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8007ce8:	4b10      	ldr	r3, [pc, #64]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007cea:	2216      	movs	r2, #22
 8007cec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007cf0:	4811      	ldr	r0, [pc, #68]	; (8007d38 <RadioSetTxGenericConfig+0x32c>)
 8007cf2:	f000 fcad 	bl	8008650 <SUBGRF_SetModulationParams>
        break;
 8007cf6:	e000      	b.n	8007cfa <RadioSetTxGenericConfig+0x2ee>
        break;
 8007cf8:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8007cfa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 ffd6 	bl	8008cb0 <SUBGRF_SetRfTxPower>
 8007d04:	4603      	mov	r3, r0
 8007d06:	461a      	mov	r2, r3
 8007d08:	4b08      	ldr	r3, [pc, #32]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007d0a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8007d0e:	4b07      	ldr	r3, [pc, #28]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007d10:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007d14:	4618      	mov	r0, r3
 8007d16:	f001 f99c 	bl	8009052 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8007d1a:	4a04      	ldr	r2, [pc, #16]	; (8007d2c <RadioSetTxGenericConfig+0x320>)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6053      	str	r3, [r2, #4]
    return 0;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3728      	adds	r7, #40	; 0x28
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	20000594 	.word	0x20000594
 8007d30:	200002a0 	.word	0x200002a0
 8007d34:	200005ec 	.word	0x200005ec
 8007d38:	200005cc 	.word	0x200005cc
 8007d3c:	200005a2 	.word	0x200005a2

08007d40 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d002      	beq.n	8007d54 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8007d4e:	4a1b      	ldr	r2, [pc, #108]	; (8007dbc <SUBGRF_Init+0x7c>)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8007d54:	f7f8 feba 	bl	8000acc <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8007d58:	2002      	movs	r0, #2
 8007d5a:	f001 f875 	bl	8008e48 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8007d5e:	4b18      	ldr	r3, [pc, #96]	; (8007dc0 <SUBGRF_Init+0x80>)
 8007d60:	2200      	movs	r2, #0
 8007d62:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8007d64:	2000      	movs	r0, #0
 8007d66:	f000 f979 	bl	800805c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8007d6a:	f001 fa2c 	bl	80091c6 <RBI_IsTCXO>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d10f      	bne.n	8007d94 <SUBGRF_Init+0x54>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8007d74:	f44f 7120 	mov.w	r1, #640	; 0x280
 8007d78:	2001      	movs	r0, #1
 8007d7a:	f000 fb79 	bl	8008470 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8007d7e:	2100      	movs	r1, #0
 8007d80:	f640 1011 	movw	r0, #2321	; 0x911
 8007d84:	f000 fe78 	bl	8008a78 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8007d88:	237f      	movs	r3, #127	; 0x7f
 8007d8a:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8007d8c:	7b38      	ldrb	r0, [r7, #12]
 8007d8e:	f000 fa86 	bl	800829e <SUBGRF_Calibrate>
 8007d92:	e009      	b.n	8007da8 <SUBGRF_Init+0x68>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8007d94:	2120      	movs	r1, #32
 8007d96:	f640 1011 	movw	r0, #2321	; 0x911
 8007d9a:	f000 fe6d 	bl	8008a78 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8007d9e:	2120      	movs	r1, #32
 8007da0:	f640 1012 	movw	r0, #2322	; 0x912
 8007da4:	f000 fe68 	bl	8008a78 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8007da8:	f001 f9ea 	bl	8009180 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8007dac:	4b05      	ldr	r3, [pc, #20]	; (8007dc4 <SUBGRF_Init+0x84>)
 8007dae:	2201      	movs	r2, #1
 8007db0:	701a      	strb	r2, [r3, #0]
}
 8007db2:	bf00      	nop
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	200002b0 	.word	0x200002b0
 8007dc0:	200002ac 	.word	0x200002ac
 8007dc4:	200002a4 	.word	0x200002a4

08007dc8 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8007dc8:	b480      	push	{r7}
 8007dca:	af00      	add	r7, sp, #0
    return OperatingMode;
 8007dcc:	4b02      	ldr	r3, [pc, #8]	; (8007dd8 <SUBGRF_GetOperatingMode+0x10>)
 8007dce:	781b      	ldrb	r3, [r3, #0]
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bc80      	pop	{r7}
 8007dd6:	4770      	bx	lr
 8007dd8:	200002a4 	.word	0x200002a4

08007ddc <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	460b      	mov	r3, r1
 8007de6:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8007de8:	78fb      	ldrb	r3, [r7, #3]
 8007dea:	461a      	mov	r2, r3
 8007dec:	6879      	ldr	r1, [r7, #4]
 8007dee:	2000      	movs	r0, #0
 8007df0:	f000 feae 	bl	8008b50 <SUBGRF_WriteBuffer>
}
 8007df4:	bf00      	nop
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	4613      	mov	r3, r2
 8007e08:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8007e0e:	f107 0317 	add.w	r3, r7, #23
 8007e12:	4619      	mov	r1, r3
 8007e14:	68b8      	ldr	r0, [r7, #8]
 8007e16:	f000 fdb1 	bl	800897c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	79fa      	ldrb	r2, [r7, #7]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d201      	bcs.n	8007e28 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8007e24:	2301      	movs	r3, #1
 8007e26:	e007      	b.n	8007e38 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8007e28:	7df8      	ldrb	r0, [r7, #23]
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	68f9      	ldr	r1, [r7, #12]
 8007e32:	f000 feaf 	bl	8008b94 <SUBGRF_ReadBuffer>

    return 0;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3718      	adds	r7, #24
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	607a      	str	r2, [r7, #4]
 8007e4c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8007e4e:	7afb      	ldrb	r3, [r7, #11]
 8007e50:	4619      	mov	r1, r3
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f7ff ffc2 	bl	8007ddc <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 f91b 	bl	8008094 <SUBGRF_SetTx>
}
 8007e5e:	bf00      	nop
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b082      	sub	sp, #8
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8007e6e:	2208      	movs	r2, #8
 8007e70:	6879      	ldr	r1, [r7, #4]
 8007e72:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8007e76:	f000 fe27 	bl	8008ac8 <SUBGRF_WriteRegisters>
    return 0;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3708      	adds	r7, #8
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8007e8e:	88fb      	ldrh	r3, [r7, #6]
 8007e90:	0a1b      	lsrs	r3, r3, #8
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8007e98:	88fb      	ldrh	r3, [r7, #6]
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8007e9e:	f000 fb67 	bl	8008570 <SUBGRF_GetPacketType>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d108      	bne.n	8007eba <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8007ea8:	f107 030c 	add.w	r3, r7, #12
 8007eac:	2202      	movs	r2, #2
 8007eae:	4619      	mov	r1, r3
 8007eb0:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8007eb4:	f000 fe08 	bl	8008ac8 <SUBGRF_WriteRegisters>
            break;
 8007eb8:	e000      	b.n	8007ebc <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8007eba:	bf00      	nop
    }
}
 8007ebc:	bf00      	nop
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	4603      	mov	r3, r0
 8007ecc:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8007ece:	88fb      	ldrh	r3, [r7, #6]
 8007ed0:	0a1b      	lsrs	r3, r3, #8
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8007ed8:	88fb      	ldrh	r3, [r7, #6]
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8007ede:	f000 fb47 	bl	8008570 <SUBGRF_GetPacketType>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d108      	bne.n	8007efa <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8007ee8:	f107 030c 	add.w	r3, r7, #12
 8007eec:	2202      	movs	r2, #2
 8007eee:	4619      	mov	r1, r3
 8007ef0:	f240 60be 	movw	r0, #1726	; 0x6be
 8007ef4:	f000 fde8 	bl	8008ac8 <SUBGRF_WriteRegisters>
            break;
 8007ef8:	e000      	b.n	8007efc <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8007efa:	bf00      	nop
    }
}
 8007efc:	bf00      	nop
 8007efe:	3710      	adds	r7, #16
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8007f12:	f000 fb2d 	bl	8008570 <SUBGRF_GetPacketType>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d121      	bne.n	8007f60 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8007f1c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8007f20:	f000 fdbe 	bl	8008aa0 <SUBGRF_ReadRegister>
 8007f24:	4603      	mov	r3, r0
 8007f26:	f023 0301 	bic.w	r3, r3, #1
 8007f2a:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8007f2c:	88fb      	ldrh	r3, [r7, #6]
 8007f2e:	0a1b      	lsrs	r3, r3, #8
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	b25b      	sxtb	r3, r3
 8007f34:	f003 0301 	and.w	r3, r3, #1
 8007f38:	b25a      	sxtb	r2, r3
 8007f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	b25b      	sxtb	r3, r3
 8007f42:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8007f44:	7bfb      	ldrb	r3, [r7, #15]
 8007f46:	4619      	mov	r1, r3
 8007f48:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8007f4c:	f000 fd94 	bl	8008a78 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8007f50:	88fb      	ldrh	r3, [r7, #6]
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	4619      	mov	r1, r3
 8007f56:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8007f5a:	f000 fd8d 	bl	8008a78 <SUBGRF_WriteRegister>
            break;
 8007f5e:	e000      	b.n	8007f62 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8007f60:	bf00      	nop
    }
}
 8007f62:	bf00      	nop
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b082      	sub	sp, #8
 8007f6e:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8007f70:	2300      	movs	r3, #0
 8007f72:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8007f74:	2300      	movs	r3, #0
 8007f76:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8007f7c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8007f80:	f000 fd8e 	bl	8008aa0 <SUBGRF_ReadRegister>
 8007f84:	4603      	mov	r3, r0
 8007f86:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8007f88:	79fb      	ldrb	r3, [r7, #7]
 8007f8a:	f023 0301 	bic.w	r3, r3, #1
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	4619      	mov	r1, r3
 8007f92:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8007f96:	f000 fd6f 	bl	8008a78 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8007f9a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8007f9e:	f000 fd7f 	bl	8008aa0 <SUBGRF_ReadRegister>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8007fa6:	79bb      	ldrb	r3, [r7, #6]
 8007fa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	4619      	mov	r1, r3
 8007fb0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8007fb4:	f000 fd60 	bl	8008a78 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8007fb8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007fbc:	f000 f88a 	bl	80080d4 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8007fc0:	463b      	mov	r3, r7
 8007fc2:	2204      	movs	r2, #4
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	f640 0019 	movw	r0, #2073	; 0x819
 8007fca:	f000 fd9f 	bl	8008b0c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8007fce:	2000      	movs	r0, #0
 8007fd0:	f000 f844 	bl	800805c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8007fd4:	79fb      	ldrb	r3, [r7, #7]
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8007fdc:	f000 fd4c 	bl	8008a78 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8007fe0:	79bb      	ldrb	r3, [r7, #6]
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8007fe8:	f000 fd46 	bl	8008a78 <SUBGRF_WriteRegister>

    return number;
 8007fec:	683b      	ldr	r3, [r7, #0]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
	...

08007ff8 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8008000:	2000      	movs	r0, #0
 8008002:	f001 f8c8 	bl	8009196 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8008006:	2002      	movs	r0, #2
 8008008:	f000 ff1e 	bl	8008e48 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800800c:	793b      	ldrb	r3, [r7, #4]
 800800e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008012:	b2db      	uxtb	r3, r3
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8008018:	793b      	ldrb	r3, [r7, #4]
 800801a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800801e:	b2db      	uxtb	r3, r3
 8008020:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8008022:	b25b      	sxtb	r3, r3
 8008024:	4313      	orrs	r3, r2
 8008026:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8008028:	793b      	ldrb	r3, [r7, #4]
 800802a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800802e:	b2db      	uxtb	r3, r3
 8008030:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8008032:	4313      	orrs	r3, r2
 8008034:	b25b      	sxtb	r3, r3
 8008036:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8008038:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800803a:	f107 030f 	add.w	r3, r7, #15
 800803e:	2201      	movs	r2, #1
 8008040:	4619      	mov	r1, r3
 8008042:	2084      	movs	r0, #132	; 0x84
 8008044:	f000 fdc8 	bl	8008bd8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8008048:	4b03      	ldr	r3, [pc, #12]	; (8008058 <SUBGRF_SetSleep+0x60>)
 800804a:	2200      	movs	r2, #0
 800804c:	701a      	strb	r2, [r3, #0]
}
 800804e:	bf00      	nop
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	200002a4 	.word	0x200002a4

0800805c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	4603      	mov	r3, r0
 8008064:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8008066:	1dfb      	adds	r3, r7, #7
 8008068:	2201      	movs	r2, #1
 800806a:	4619      	mov	r1, r3
 800806c:	2080      	movs	r0, #128	; 0x80
 800806e:	f000 fdb3 	bl	8008bd8 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8008072:	79fb      	ldrb	r3, [r7, #7]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d103      	bne.n	8008080 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8008078:	4b05      	ldr	r3, [pc, #20]	; (8008090 <SUBGRF_SetStandby+0x34>)
 800807a:	2201      	movs	r2, #1
 800807c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800807e:	e002      	b.n	8008086 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8008080:	4b03      	ldr	r3, [pc, #12]	; (8008090 <SUBGRF_SetStandby+0x34>)
 8008082:	2202      	movs	r2, #2
 8008084:	701a      	strb	r2, [r3, #0]
}
 8008086:	bf00      	nop
 8008088:	3708      	adds	r7, #8
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	200002a4 	.word	0x200002a4

08008094 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800809c:	4b0c      	ldr	r3, [pc, #48]	; (80080d0 <SUBGRF_SetTx+0x3c>)
 800809e:	2204      	movs	r2, #4
 80080a0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	0c1b      	lsrs	r3, r3, #16
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	0a1b      	lsrs	r3, r3, #8
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80080b8:	f107 030c 	add.w	r3, r7, #12
 80080bc:	2203      	movs	r2, #3
 80080be:	4619      	mov	r1, r3
 80080c0:	2083      	movs	r0, #131	; 0x83
 80080c2:	f000 fd89 	bl	8008bd8 <SUBGRF_WriteCommand>
}
 80080c6:	bf00      	nop
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	200002a4 	.word	0x200002a4

080080d4 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80080dc:	4b0c      	ldr	r3, [pc, #48]	; (8008110 <SUBGRF_SetRx+0x3c>)
 80080de:	2205      	movs	r2, #5
 80080e0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	0c1b      	lsrs	r3, r3, #16
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	0a1b      	lsrs	r3, r3, #8
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80080f8:	f107 030c 	add.w	r3, r7, #12
 80080fc:	2203      	movs	r2, #3
 80080fe:	4619      	mov	r1, r3
 8008100:	2082      	movs	r0, #130	; 0x82
 8008102:	f000 fd69 	bl	8008bd8 <SUBGRF_WriteCommand>
}
 8008106:	bf00      	nop
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	200002a4 	.word	0x200002a4

08008114 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800811c:	4b0e      	ldr	r3, [pc, #56]	; (8008158 <SUBGRF_SetRxBoosted+0x44>)
 800811e:	2205      	movs	r2, #5
 8008120:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8008122:	2197      	movs	r1, #151	; 0x97
 8008124:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8008128:	f000 fca6 	bl	8008a78 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	0c1b      	lsrs	r3, r3, #16
 8008130:	b2db      	uxtb	r3, r3
 8008132:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	0a1b      	lsrs	r3, r3, #8
 8008138:	b2db      	uxtb	r3, r3
 800813a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	b2db      	uxtb	r3, r3
 8008140:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8008142:	f107 030c 	add.w	r3, r7, #12
 8008146:	2203      	movs	r2, #3
 8008148:	4619      	mov	r1, r3
 800814a:	2082      	movs	r0, #130	; 0x82
 800814c:	f000 fd44 	bl	8008bd8 <SUBGRF_WriteCommand>
}
 8008150:	bf00      	nop
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	200002a4 	.word	0x200002a4

0800815c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	0c1b      	lsrs	r3, r3, #16
 800816a:	b2db      	uxtb	r3, r3
 800816c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	0a1b      	lsrs	r3, r3, #8
 8008172:	b2db      	uxtb	r3, r3
 8008174:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	b2db      	uxtb	r3, r3
 800817a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	0c1b      	lsrs	r3, r3, #16
 8008180:	b2db      	uxtb	r3, r3
 8008182:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	0a1b      	lsrs	r3, r3, #8
 8008188:	b2db      	uxtb	r3, r3
 800818a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	b2db      	uxtb	r3, r3
 8008190:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8008192:	f107 0308 	add.w	r3, r7, #8
 8008196:	2206      	movs	r2, #6
 8008198:	4619      	mov	r1, r3
 800819a:	2094      	movs	r0, #148	; 0x94
 800819c:	f000 fd1c 	bl	8008bd8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80081a0:	4b03      	ldr	r3, [pc, #12]	; (80081b0 <SUBGRF_SetRxDutyCycle+0x54>)
 80081a2:	2206      	movs	r2, #6
 80081a4:	701a      	strb	r2, [r3, #0]
}
 80081a6:	bf00      	nop
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	200002a4 	.word	0x200002a4

080081b4 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80081b8:	2200      	movs	r2, #0
 80081ba:	2100      	movs	r1, #0
 80081bc:	20c5      	movs	r0, #197	; 0xc5
 80081be:	f000 fd0b 	bl	8008bd8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80081c2:	4b02      	ldr	r3, [pc, #8]	; (80081cc <SUBGRF_SetCad+0x18>)
 80081c4:	2207      	movs	r2, #7
 80081c6:	701a      	strb	r2, [r3, #0]
}
 80081c8:	bf00      	nop
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	200002a4 	.word	0x200002a4

080081d0 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80081d4:	2200      	movs	r2, #0
 80081d6:	2100      	movs	r1, #0
 80081d8:	20d1      	movs	r0, #209	; 0xd1
 80081da:	f000 fcfd 	bl	8008bd8 <SUBGRF_WriteCommand>
}
 80081de:	bf00      	nop
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 80081e6:	2200      	movs	r2, #0
 80081e8:	2100      	movs	r1, #0
 80081ea:	20d2      	movs	r0, #210	; 0xd2
 80081ec:	f000 fcf4 	bl	8008bd8 <SUBGRF_WriteCommand>
}
 80081f0:	bf00      	nop
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	4603      	mov	r3, r0
 80081fc:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80081fe:	1dfb      	adds	r3, r7, #7
 8008200:	2201      	movs	r2, #1
 8008202:	4619      	mov	r1, r3
 8008204:	209f      	movs	r0, #159	; 0x9f
 8008206:	f000 fce7 	bl	8008bd8 <SUBGRF_WriteCommand>
}
 800820a:	bf00      	nop
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b084      	sub	sp, #16
 8008216:	af00      	add	r7, sp, #0
 8008218:	4603      	mov	r3, r0
 800821a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800821c:	1dfb      	adds	r3, r7, #7
 800821e:	2201      	movs	r2, #1
 8008220:	4619      	mov	r1, r3
 8008222:	20a0      	movs	r0, #160	; 0xa0
 8008224:	f000 fcd8 	bl	8008bd8 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8008228:	79fb      	ldrb	r3, [r7, #7]
 800822a:	2b3f      	cmp	r3, #63	; 0x3f
 800822c:	d91c      	bls.n	8008268 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800822e:	79fb      	ldrb	r3, [r7, #7]
 8008230:	085b      	lsrs	r3, r3, #1
 8008232:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8008234:	2300      	movs	r3, #0
 8008236:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8008238:	2300      	movs	r3, #0
 800823a:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800823c:	e005      	b.n	800824a <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800823e:	7bfb      	ldrb	r3, [r7, #15]
 8008240:	089b      	lsrs	r3, r3, #2
 8008242:	73fb      	strb	r3, [r7, #15]
            exp++;
 8008244:	7bbb      	ldrb	r3, [r7, #14]
 8008246:	3301      	adds	r3, #1
 8008248:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800824a:	7bfb      	ldrb	r3, [r7, #15]
 800824c:	2b1f      	cmp	r3, #31
 800824e:	d8f6      	bhi.n	800823e <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8008250:	7bfb      	ldrb	r3, [r7, #15]
 8008252:	00db      	lsls	r3, r3, #3
 8008254:	b2da      	uxtb	r2, r3
 8008256:	7bbb      	ldrb	r3, [r7, #14]
 8008258:	4413      	add	r3, r2
 800825a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800825c:	7b7b      	ldrb	r3, [r7, #13]
 800825e:	4619      	mov	r1, r3
 8008260:	f240 7006 	movw	r0, #1798	; 0x706
 8008264:	f000 fc08 	bl	8008a78 <SUBGRF_WriteRegister>
    }
}
 8008268:	bf00      	nop
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8008276:	f000 ffb1 	bl	80091dc <RBI_IsDCDC>
 800827a:	4603      	mov	r3, r0
 800827c:	2b01      	cmp	r3, #1
 800827e:	d102      	bne.n	8008286 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8008280:	2301      	movs	r3, #1
 8008282:	71fb      	strb	r3, [r7, #7]
 8008284:	e001      	b.n	800828a <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8008286:	2300      	movs	r3, #0
 8008288:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800828a:	1dfb      	adds	r3, r7, #7
 800828c:	2201      	movs	r2, #1
 800828e:	4619      	mov	r1, r3
 8008290:	2096      	movs	r0, #150	; 0x96
 8008292:	f000 fca1 	bl	8008bd8 <SUBGRF_WriteCommand>
}
 8008296:	bf00      	nop
 8008298:	3708      	adds	r7, #8
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b084      	sub	sp, #16
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80082a6:	793b      	ldrb	r3, [r7, #4]
 80082a8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	019b      	lsls	r3, r3, #6
 80082b0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80082b2:	793b      	ldrb	r3, [r7, #4]
 80082b4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80082bc:	b25b      	sxtb	r3, r3
 80082be:	4313      	orrs	r3, r2
 80082c0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80082c2:	793b      	ldrb	r3, [r7, #4]
 80082c4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80082cc:	b25b      	sxtb	r3, r3
 80082ce:	4313      	orrs	r3, r2
 80082d0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80082d2:	793b      	ldrb	r3, [r7, #4]
 80082d4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80082dc:	b25b      	sxtb	r3, r3
 80082de:	4313      	orrs	r3, r2
 80082e0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80082e2:	793b      	ldrb	r3, [r7, #4]
 80082e4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80082ec:	b25b      	sxtb	r3, r3
 80082ee:	4313      	orrs	r3, r2
 80082f0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80082f2:	793b      	ldrb	r3, [r7, #4]
 80082f4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80082fc:	b25b      	sxtb	r3, r3
 80082fe:	4313      	orrs	r3, r2
 8008300:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8008302:	793b      	ldrb	r3, [r7, #4]
 8008304:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008308:	b2db      	uxtb	r3, r3
 800830a:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800830c:	4313      	orrs	r3, r2
 800830e:	b25b      	sxtb	r3, r3
 8008310:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8008312:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8008314:	f107 030f 	add.w	r3, r7, #15
 8008318:	2201      	movs	r2, #1
 800831a:	4619      	mov	r1, r3
 800831c:	2089      	movs	r0, #137	; 0x89
 800831e:	f000 fc5b 	bl	8008bd8 <SUBGRF_WriteCommand>
}
 8008322:	bf00      	nop
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
	...

0800832c <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a1b      	ldr	r2, [pc, #108]	; (80083a4 <SUBGRF_CalibrateImage+0x78>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d904      	bls.n	8008346 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800833c:	23e1      	movs	r3, #225	; 0xe1
 800833e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8008340:	23e9      	movs	r3, #233	; 0xe9
 8008342:	737b      	strb	r3, [r7, #13]
 8008344:	e022      	b.n	800838c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a17      	ldr	r2, [pc, #92]	; (80083a8 <SUBGRF_CalibrateImage+0x7c>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d904      	bls.n	8008358 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800834e:	23d7      	movs	r3, #215	; 0xd7
 8008350:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8008352:	23db      	movs	r3, #219	; 0xdb
 8008354:	737b      	strb	r3, [r7, #13]
 8008356:	e019      	b.n	800838c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a14      	ldr	r2, [pc, #80]	; (80083ac <SUBGRF_CalibrateImage+0x80>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d904      	bls.n	800836a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8008360:	23c1      	movs	r3, #193	; 0xc1
 8008362:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8008364:	23c5      	movs	r3, #197	; 0xc5
 8008366:	737b      	strb	r3, [r7, #13]
 8008368:	e010      	b.n	800838c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a10      	ldr	r2, [pc, #64]	; (80083b0 <SUBGRF_CalibrateImage+0x84>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d904      	bls.n	800837c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8008372:	2375      	movs	r3, #117	; 0x75
 8008374:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8008376:	2381      	movs	r3, #129	; 0x81
 8008378:	737b      	strb	r3, [r7, #13]
 800837a:	e007      	b.n	800838c <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a0d      	ldr	r2, [pc, #52]	; (80083b4 <SUBGRF_CalibrateImage+0x88>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d903      	bls.n	800838c <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 8008384:	236b      	movs	r3, #107	; 0x6b
 8008386:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8008388:	236f      	movs	r3, #111	; 0x6f
 800838a:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800838c:	f107 030c 	add.w	r3, r7, #12
 8008390:	2202      	movs	r2, #2
 8008392:	4619      	mov	r1, r3
 8008394:	2098      	movs	r0, #152	; 0x98
 8008396:	f000 fc1f 	bl	8008bd8 <SUBGRF_WriteCommand>
}
 800839a:	bf00      	nop
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	35a4e900 	.word	0x35a4e900
 80083a8:	32a9f880 	.word	0x32a9f880
 80083ac:	2de54480 	.word	0x2de54480
 80083b0:	1b6b0b00 	.word	0x1b6b0b00
 80083b4:	1954fc40 	.word	0x1954fc40

080083b8 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80083b8:	b590      	push	{r4, r7, lr}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	4604      	mov	r4, r0
 80083c0:	4608      	mov	r0, r1
 80083c2:	4611      	mov	r1, r2
 80083c4:	461a      	mov	r2, r3
 80083c6:	4623      	mov	r3, r4
 80083c8:	71fb      	strb	r3, [r7, #7]
 80083ca:	4603      	mov	r3, r0
 80083cc:	71bb      	strb	r3, [r7, #6]
 80083ce:	460b      	mov	r3, r1
 80083d0:	717b      	strb	r3, [r7, #5]
 80083d2:	4613      	mov	r3, r2
 80083d4:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 80083d6:	79fb      	ldrb	r3, [r7, #7]
 80083d8:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 80083da:	79bb      	ldrb	r3, [r7, #6]
 80083dc:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 80083de:	797b      	ldrb	r3, [r7, #5]
 80083e0:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 80083e2:	793b      	ldrb	r3, [r7, #4]
 80083e4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80083e6:	f107 030c 	add.w	r3, r7, #12
 80083ea:	2204      	movs	r2, #4
 80083ec:	4619      	mov	r1, r3
 80083ee:	2095      	movs	r0, #149	; 0x95
 80083f0:	f000 fbf2 	bl	8008bd8 <SUBGRF_WriteCommand>
}
 80083f4:	bf00      	nop
 80083f6:	3714      	adds	r7, #20
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd90      	pop	{r4, r7, pc}

080083fc <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 80083fc:	b590      	push	{r4, r7, lr}
 80083fe:	b085      	sub	sp, #20
 8008400:	af00      	add	r7, sp, #0
 8008402:	4604      	mov	r4, r0
 8008404:	4608      	mov	r0, r1
 8008406:	4611      	mov	r1, r2
 8008408:	461a      	mov	r2, r3
 800840a:	4623      	mov	r3, r4
 800840c:	80fb      	strh	r3, [r7, #6]
 800840e:	4603      	mov	r3, r0
 8008410:	80bb      	strh	r3, [r7, #4]
 8008412:	460b      	mov	r3, r1
 8008414:	807b      	strh	r3, [r7, #2]
 8008416:	4613      	mov	r3, r2
 8008418:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800841a:	88fb      	ldrh	r3, [r7, #6]
 800841c:	0a1b      	lsrs	r3, r3, #8
 800841e:	b29b      	uxth	r3, r3
 8008420:	b2db      	uxtb	r3, r3
 8008422:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8008424:	88fb      	ldrh	r3, [r7, #6]
 8008426:	b2db      	uxtb	r3, r3
 8008428:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800842a:	88bb      	ldrh	r3, [r7, #4]
 800842c:	0a1b      	lsrs	r3, r3, #8
 800842e:	b29b      	uxth	r3, r3
 8008430:	b2db      	uxtb	r3, r3
 8008432:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8008434:	88bb      	ldrh	r3, [r7, #4]
 8008436:	b2db      	uxtb	r3, r3
 8008438:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800843a:	887b      	ldrh	r3, [r7, #2]
 800843c:	0a1b      	lsrs	r3, r3, #8
 800843e:	b29b      	uxth	r3, r3
 8008440:	b2db      	uxtb	r3, r3
 8008442:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8008444:	887b      	ldrh	r3, [r7, #2]
 8008446:	b2db      	uxtb	r3, r3
 8008448:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800844a:	883b      	ldrh	r3, [r7, #0]
 800844c:	0a1b      	lsrs	r3, r3, #8
 800844e:	b29b      	uxth	r3, r3
 8008450:	b2db      	uxtb	r3, r3
 8008452:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8008454:	883b      	ldrh	r3, [r7, #0]
 8008456:	b2db      	uxtb	r3, r3
 8008458:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800845a:	f107 0308 	add.w	r3, r7, #8
 800845e:	2208      	movs	r2, #8
 8008460:	4619      	mov	r1, r3
 8008462:	2008      	movs	r0, #8
 8008464:	f000 fbb8 	bl	8008bd8 <SUBGRF_WriteCommand>
}
 8008468:	bf00      	nop
 800846a:	3714      	adds	r7, #20
 800846c:	46bd      	mov	sp, r7
 800846e:	bd90      	pop	{r4, r7, pc}

08008470 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	4603      	mov	r3, r0
 8008478:	6039      	str	r1, [r7, #0]
 800847a:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800847c:	79fb      	ldrb	r3, [r7, #7]
 800847e:	f003 0307 	and.w	r3, r3, #7
 8008482:	b2db      	uxtb	r3, r3
 8008484:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	0c1b      	lsrs	r3, r3, #16
 800848a:	b2db      	uxtb	r3, r3
 800848c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	0a1b      	lsrs	r3, r3, #8
 8008492:	b2db      	uxtb	r3, r3
 8008494:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	b2db      	uxtb	r3, r3
 800849a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800849c:	f107 030c 	add.w	r3, r7, #12
 80084a0:	2204      	movs	r2, #4
 80084a2:	4619      	mov	r1, r3
 80084a4:	2097      	movs	r0, #151	; 0x97
 80084a6:	f000 fb97 	bl	8008bd8 <SUBGRF_WriteCommand>
}
 80084aa:	bf00      	nop
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
	...

080084b4 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80084b4:	b5b0      	push	{r4, r5, r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 80084bc:	2300      	movs	r3, #0
 80084be:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 80084c0:	4b1b      	ldr	r3, [pc, #108]	; (8008530 <SUBGRF_SetRfFrequency+0x7c>)
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	f083 0301 	eor.w	r3, r3, #1
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d005      	beq.n	80084da <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f7ff ff2c 	bl	800832c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80084d4:	4b16      	ldr	r3, [pc, #88]	; (8008530 <SUBGRF_SetRfFrequency+0x7c>)
 80084d6:	2201      	movs	r2, #1
 80084d8:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	461a      	mov	r2, r3
 80084de:	f04f 0300 	mov.w	r3, #0
 80084e2:	09d5      	lsrs	r5, r2, #7
 80084e4:	0654      	lsls	r4, r2, #25
 80084e6:	4a13      	ldr	r2, [pc, #76]	; (8008534 <SUBGRF_SetRfFrequency+0x80>)
 80084e8:	f04f 0300 	mov.w	r3, #0
 80084ec:	4620      	mov	r0, r4
 80084ee:	4629      	mov	r1, r5
 80084f0:	f7f7 fe96 	bl	8000220 <__aeabi_uldivmod>
 80084f4:	4602      	mov	r2, r0
 80084f6:	460b      	mov	r3, r1
 80084f8:	4613      	mov	r3, r2
 80084fa:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	0e1b      	lsrs	r3, r3, #24
 8008500:	b2db      	uxtb	r3, r3
 8008502:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	0c1b      	lsrs	r3, r3, #16
 8008508:	b2db      	uxtb	r3, r3
 800850a:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	0a1b      	lsrs	r3, r3, #8
 8008510:	b2db      	uxtb	r3, r3
 8008512:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	b2db      	uxtb	r3, r3
 8008518:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800851a:	f107 0308 	add.w	r3, r7, #8
 800851e:	2204      	movs	r2, #4
 8008520:	4619      	mov	r1, r3
 8008522:	2086      	movs	r0, #134	; 0x86
 8008524:	f000 fb58 	bl	8008bd8 <SUBGRF_WriteCommand>
}
 8008528:	bf00      	nop
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bdb0      	pop	{r4, r5, r7, pc}
 8008530:	200002ac 	.word	0x200002ac
 8008534:	01e84800 	.word	0x01e84800

08008538 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	4603      	mov	r3, r0
 8008540:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8008542:	79fa      	ldrb	r2, [r7, #7]
 8008544:	4b09      	ldr	r3, [pc, #36]	; (800856c <SUBGRF_SetPacketType+0x34>)
 8008546:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8008548:	79fb      	ldrb	r3, [r7, #7]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d104      	bne.n	8008558 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800854e:	2100      	movs	r1, #0
 8008550:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8008554:	f000 fa90 	bl	8008a78 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8008558:	1dfb      	adds	r3, r7, #7
 800855a:	2201      	movs	r2, #1
 800855c:	4619      	mov	r1, r3
 800855e:	208a      	movs	r0, #138	; 0x8a
 8008560:	f000 fb3a 	bl	8008bd8 <SUBGRF_WriteCommand>
}
 8008564:	bf00      	nop
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	200002a5 	.word	0x200002a5

08008570 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8008570:	b480      	push	{r7}
 8008572:	af00      	add	r7, sp, #0
    return PacketType;
 8008574:	4b02      	ldr	r3, [pc, #8]	; (8008580 <SUBGRF_GetPacketType+0x10>)
 8008576:	781b      	ldrb	r3, [r3, #0]
}
 8008578:	4618      	mov	r0, r3
 800857a:	46bd      	mov	sp, r7
 800857c:	bc80      	pop	{r7}
 800857e:	4770      	bx	lr
 8008580:	200002a5 	.word	0x200002a5

08008584 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	4603      	mov	r3, r0
 800858c:	71fb      	strb	r3, [r7, #7]
 800858e:	460b      	mov	r3, r1
 8008590:	71bb      	strb	r3, [r7, #6]
 8008592:	4613      	mov	r3, r2
 8008594:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 8008596:	79fb      	ldrb	r3, [r7, #7]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d124      	bne.n	80085e6 <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 800859c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80085a0:	2b0f      	cmp	r3, #15
 80085a2:	d106      	bne.n	80085b2 <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 80085a4:	2301      	movs	r3, #1
 80085a6:	2201      	movs	r2, #1
 80085a8:	2100      	movs	r1, #0
 80085aa:	2006      	movs	r0, #6
 80085ac:	f7ff ff04 	bl	80083b8 <SUBGRF_SetPaConfig>
 80085b0:	e005      	b.n	80085be <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 80085b2:	2301      	movs	r3, #1
 80085b4:	2201      	movs	r2, #1
 80085b6:	2100      	movs	r1, #0
 80085b8:	2004      	movs	r0, #4
 80085ba:	f7ff fefd 	bl	80083b8 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 80085be:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80085c2:	2b0d      	cmp	r3, #13
 80085c4:	dd02      	ble.n	80085cc <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 80085c6:	230e      	movs	r3, #14
 80085c8:	71bb      	strb	r3, [r7, #6]
 80085ca:	e006      	b.n	80085da <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 80085cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80085d0:	f113 0f11 	cmn.w	r3, #17
 80085d4:	da01      	bge.n	80085da <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 80085d6:	23ef      	movs	r3, #239	; 0xef
 80085d8:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 80085da:	2118      	movs	r1, #24
 80085dc:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80085e0:	f000 fa4a 	bl	8008a78 <SUBGRF_WriteRegister>
 80085e4:	e025      	b.n	8008632 <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 80085e6:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80085ea:	f000 fa59 	bl	8008aa0 <SUBGRF_ReadRegister>
 80085ee:	4603      	mov	r3, r0
 80085f0:	f043 031e 	orr.w	r3, r3, #30
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	4619      	mov	r1, r3
 80085f8:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80085fc:	f000 fa3c 	bl	8008a78 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8008600:	2301      	movs	r3, #1
 8008602:	2200      	movs	r2, #0
 8008604:	2107      	movs	r1, #7
 8008606:	2004      	movs	r0, #4
 8008608:	f7ff fed6 	bl	80083b8 <SUBGRF_SetPaConfig>
        if( power > 22 )
 800860c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008610:	2b16      	cmp	r3, #22
 8008612:	dd02      	ble.n	800861a <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 8008614:	2316      	movs	r3, #22
 8008616:	71bb      	strb	r3, [r7, #6]
 8008618:	e006      	b.n	8008628 <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 800861a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800861e:	f113 0f09 	cmn.w	r3, #9
 8008622:	da01      	bge.n	8008628 <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 8008624:	23f7      	movs	r3, #247	; 0xf7
 8008626:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8008628:	2138      	movs	r1, #56	; 0x38
 800862a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800862e:	f000 fa23 	bl	8008a78 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8008632:	79bb      	ldrb	r3, [r7, #6]
 8008634:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 8008636:	797b      	ldrb	r3, [r7, #5]
 8008638:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 800863a:	f107 030c 	add.w	r3, r7, #12
 800863e:	2202      	movs	r2, #2
 8008640:	4619      	mov	r1, r3
 8008642:	208e      	movs	r0, #142	; 0x8e
 8008644:	f000 fac8 	bl	8008bd8 <SUBGRF_WriteCommand>
}
 8008648:	bf00      	nop
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8008650:	b5b0      	push	{r4, r5, r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8008658:	2300      	movs	r3, #0
 800865a:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800865c:	4a5e      	ldr	r2, [pc, #376]	; (80087d8 <SUBGRF_SetModulationParams+0x188>)
 800865e:	f107 0308 	add.w	r3, r7, #8
 8008662:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008666:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	781a      	ldrb	r2, [r3, #0]
 800866e:	4b5b      	ldr	r3, [pc, #364]	; (80087dc <SUBGRF_SetModulationParams+0x18c>)
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	429a      	cmp	r2, r3
 8008674:	d004      	beq.n	8008680 <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	4618      	mov	r0, r3
 800867c:	f7ff ff5c 	bl	8008538 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	2b03      	cmp	r3, #3
 8008686:	f200 80a2 	bhi.w	80087ce <SUBGRF_SetModulationParams+0x17e>
 800868a:	a201      	add	r2, pc, #4	; (adr r2, 8008690 <SUBGRF_SetModulationParams+0x40>)
 800868c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008690:	080086a1 	.word	0x080086a1
 8008694:	0800875d 	.word	0x0800875d
 8008698:	0800871f 	.word	0x0800871f
 800869c:	0800878b 	.word	0x0800878b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80086a0:	2308      	movs	r3, #8
 80086a2:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	4a4d      	ldr	r2, [pc, #308]	; (80087e0 <SUBGRF_SetModulationParams+0x190>)
 80086aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ae:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	0c1b      	lsrs	r3, r3, #16
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	0a1b      	lsrs	r3, r3, #8
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	7b1b      	ldrb	r3, [r3, #12]
 80086ca:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	7b5b      	ldrb	r3, [r3, #13]
 80086d0:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	461a      	mov	r2, r3
 80086d8:	f04f 0300 	mov.w	r3, #0
 80086dc:	09d5      	lsrs	r5, r2, #7
 80086de:	0654      	lsls	r4, r2, #25
 80086e0:	4a40      	ldr	r2, [pc, #256]	; (80087e4 <SUBGRF_SetModulationParams+0x194>)
 80086e2:	f04f 0300 	mov.w	r3, #0
 80086e6:	4620      	mov	r0, r4
 80086e8:	4629      	mov	r1, r5
 80086ea:	f7f7 fd99 	bl	8000220 <__aeabi_uldivmod>
 80086ee:	4602      	mov	r2, r0
 80086f0:	460b      	mov	r3, r1
 80086f2:	4613      	mov	r3, r2
 80086f4:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	0c1b      	lsrs	r3, r3, #16
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	0a1b      	lsrs	r3, r3, #8
 8008702:	b2db      	uxtb	r3, r3
 8008704:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	b2db      	uxtb	r3, r3
 800870a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800870c:	7cfb      	ldrb	r3, [r7, #19]
 800870e:	b29a      	uxth	r2, r3
 8008710:	f107 0308 	add.w	r3, r7, #8
 8008714:	4619      	mov	r1, r3
 8008716:	208b      	movs	r0, #139	; 0x8b
 8008718:	f000 fa5e 	bl	8008bd8 <SUBGRF_WriteCommand>
        break;
 800871c:	e058      	b.n	80087d0 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 800871e:	2304      	movs	r3, #4
 8008720:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	691b      	ldr	r3, [r3, #16]
 8008726:	4a2e      	ldr	r2, [pc, #184]	; (80087e0 <SUBGRF_SetModulationParams+0x190>)
 8008728:	fbb2 f3f3 	udiv	r3, r2, r3
 800872c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	0c1b      	lsrs	r3, r3, #16
 8008732:	b2db      	uxtb	r3, r3
 8008734:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	0a1b      	lsrs	r3, r3, #8
 800873a:	b2db      	uxtb	r3, r3
 800873c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	b2db      	uxtb	r3, r3
 8008742:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	7d1b      	ldrb	r3, [r3, #20]
 8008748:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800874a:	7cfb      	ldrb	r3, [r7, #19]
 800874c:	b29a      	uxth	r2, r3
 800874e:	f107 0308 	add.w	r3, r7, #8
 8008752:	4619      	mov	r1, r3
 8008754:	208b      	movs	r0, #139	; 0x8b
 8008756:	f000 fa3f 	bl	8008bd8 <SUBGRF_WriteCommand>
        break;
 800875a:	e039      	b.n	80087d0 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 800875c:	2304      	movs	r3, #4
 800875e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	7e1b      	ldrb	r3, [r3, #24]
 8008764:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	7e5b      	ldrb	r3, [r3, #25]
 800876a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	7e9b      	ldrb	r3, [r3, #26]
 8008770:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	7edb      	ldrb	r3, [r3, #27]
 8008776:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8008778:	7cfb      	ldrb	r3, [r7, #19]
 800877a:	b29a      	uxth	r2, r3
 800877c:	f107 0308 	add.w	r3, r7, #8
 8008780:	4619      	mov	r1, r3
 8008782:	208b      	movs	r0, #139	; 0x8b
 8008784:	f000 fa28 	bl	8008bd8 <SUBGRF_WriteCommand>

        break;
 8008788:	e022      	b.n	80087d0 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 800878a:	2305      	movs	r3, #5
 800878c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	4a13      	ldr	r2, [pc, #76]	; (80087e0 <SUBGRF_SetModulationParams+0x190>)
 8008794:	fbb2 f3f3 	udiv	r3, r2, r3
 8008798:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	0c1b      	lsrs	r3, r3, #16
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	0a1b      	lsrs	r3, r3, #8
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	7b1b      	ldrb	r3, [r3, #12]
 80087b4:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	7b5b      	ldrb	r3, [r3, #13]
 80087ba:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80087bc:	7cfb      	ldrb	r3, [r7, #19]
 80087be:	b29a      	uxth	r2, r3
 80087c0:	f107 0308 	add.w	r3, r7, #8
 80087c4:	4619      	mov	r1, r3
 80087c6:	208b      	movs	r0, #139	; 0x8b
 80087c8:	f000 fa06 	bl	8008bd8 <SUBGRF_WriteCommand>
        break;
 80087cc:	e000      	b.n	80087d0 <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 80087ce:	bf00      	nop
    }
}
 80087d0:	bf00      	nop
 80087d2:	3718      	adds	r7, #24
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bdb0      	pop	{r4, r5, r7, pc}
 80087d8:	08009f74 	.word	0x08009f74
 80087dc:	200002a5 	.word	0x200002a5
 80087e0:	3d090000 	.word	0x3d090000
 80087e4:	01e84800 	.word	0x01e84800

080087e8 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b086      	sub	sp, #24
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 80087f0:	2300      	movs	r3, #0
 80087f2:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80087f4:	4a48      	ldr	r2, [pc, #288]	; (8008918 <SUBGRF_SetPacketParams+0x130>)
 80087f6:	f107 030c 	add.w	r3, r7, #12
 80087fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80087fc:	c303      	stmia	r3!, {r0, r1}
 80087fe:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	781a      	ldrb	r2, [r3, #0]
 8008804:	4b45      	ldr	r3, [pc, #276]	; (800891c <SUBGRF_SetPacketParams+0x134>)
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	429a      	cmp	r2, r3
 800880a:	d004      	beq.n	8008816 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	4618      	mov	r0, r3
 8008812:	f7ff fe91 	bl	8008538 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	2b03      	cmp	r3, #3
 800881c:	d878      	bhi.n	8008910 <SUBGRF_SetPacketParams+0x128>
 800881e:	a201      	add	r2, pc, #4	; (adr r2, 8008824 <SUBGRF_SetPacketParams+0x3c>)
 8008820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008824:	08008835 	.word	0x08008835
 8008828:	080088c5 	.word	0x080088c5
 800882c:	080088b9 	.word	0x080088b9
 8008830:	08008835 	.word	0x08008835
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	7a5b      	ldrb	r3, [r3, #9]
 8008838:	2bf1      	cmp	r3, #241	; 0xf1
 800883a:	d10a      	bne.n	8008852 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800883c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008840:	f7ff fb20 	bl	8007e84 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8008844:	f248 0005 	movw	r0, #32773	; 0x8005
 8008848:	f7ff fb3c 	bl	8007ec4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800884c:	2302      	movs	r3, #2
 800884e:	75bb      	strb	r3, [r7, #22]
 8008850:	e011      	b.n	8008876 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	7a5b      	ldrb	r3, [r3, #9]
 8008856:	2bf2      	cmp	r3, #242	; 0xf2
 8008858:	d10a      	bne.n	8008870 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800885a:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800885e:	f7ff fb11 	bl	8007e84 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8008862:	f241 0021 	movw	r0, #4129	; 0x1021
 8008866:	f7ff fb2d 	bl	8007ec4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800886a:	2306      	movs	r3, #6
 800886c:	75bb      	strb	r3, [r7, #22]
 800886e:	e002      	b.n	8008876 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	7a5b      	ldrb	r3, [r3, #9]
 8008874:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8008876:	2309      	movs	r3, #9
 8008878:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	885b      	ldrh	r3, [r3, #2]
 800887e:	0a1b      	lsrs	r3, r3, #8
 8008880:	b29b      	uxth	r3, r3
 8008882:	b2db      	uxtb	r3, r3
 8008884:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	885b      	ldrh	r3, [r3, #2]
 800888a:	b2db      	uxtb	r3, r3
 800888c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	791b      	ldrb	r3, [r3, #4]
 8008892:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	795b      	ldrb	r3, [r3, #5]
 8008898:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	799b      	ldrb	r3, [r3, #6]
 800889e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	79db      	ldrb	r3, [r3, #7]
 80088a4:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	7a1b      	ldrb	r3, [r3, #8]
 80088aa:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 80088ac:	7dbb      	ldrb	r3, [r7, #22]
 80088ae:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	7a9b      	ldrb	r3, [r3, #10]
 80088b4:	753b      	strb	r3, [r7, #20]
        break;
 80088b6:	e022      	b.n	80088fe <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 80088b8:	2301      	movs	r3, #1
 80088ba:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	7b1b      	ldrb	r3, [r3, #12]
 80088c0:	733b      	strb	r3, [r7, #12]
        break;
 80088c2:	e01c      	b.n	80088fe <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 80088c4:	2306      	movs	r3, #6
 80088c6:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	89db      	ldrh	r3, [r3, #14]
 80088cc:	0a1b      	lsrs	r3, r3, #8
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	89db      	ldrh	r3, [r3, #14]
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	7c1a      	ldrb	r2, [r3, #16]
 80088e0:	4b0f      	ldr	r3, [pc, #60]	; (8008920 <SUBGRF_SetPacketParams+0x138>)
 80088e2:	4611      	mov	r1, r2
 80088e4:	7019      	strb	r1, [r3, #0]
 80088e6:	4613      	mov	r3, r2
 80088e8:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	7c5b      	ldrb	r3, [r3, #17]
 80088ee:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	7c9b      	ldrb	r3, [r3, #18]
 80088f4:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	7cdb      	ldrb	r3, [r3, #19]
 80088fa:	747b      	strb	r3, [r7, #17]
        break;
 80088fc:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80088fe:	7dfb      	ldrb	r3, [r7, #23]
 8008900:	b29a      	uxth	r2, r3
 8008902:	f107 030c 	add.w	r3, r7, #12
 8008906:	4619      	mov	r1, r3
 8008908:	208c      	movs	r0, #140	; 0x8c
 800890a:	f000 f965 	bl	8008bd8 <SUBGRF_WriteCommand>
 800890e:	e000      	b.n	8008912 <SUBGRF_SetPacketParams+0x12a>
        return;
 8008910:	bf00      	nop
}
 8008912:	3718      	adds	r7, #24
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	08009f7c 	.word	0x08009f7c
 800891c:	200002a5 	.word	0x200002a5
 8008920:	200002a6 	.word	0x200002a6

08008924 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	4603      	mov	r3, r0
 800892c:	460a      	mov	r2, r1
 800892e:	71fb      	strb	r3, [r7, #7]
 8008930:	4613      	mov	r3, r2
 8008932:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8008934:	79fb      	ldrb	r3, [r7, #7]
 8008936:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8008938:	79bb      	ldrb	r3, [r7, #6]
 800893a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800893c:	f107 030c 	add.w	r3, r7, #12
 8008940:	2202      	movs	r2, #2
 8008942:	4619      	mov	r1, r3
 8008944:	208f      	movs	r0, #143	; 0x8f
 8008946:	f000 f947 	bl	8008bd8 <SUBGRF_WriteCommand>
}
 800894a:	bf00      	nop
 800894c:	3710      	adds	r7, #16
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8008952:	b580      	push	{r7, lr}
 8008954:	b082      	sub	sp, #8
 8008956:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8008958:	2300      	movs	r3, #0
 800895a:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800895c:	1d3b      	adds	r3, r7, #4
 800895e:	2201      	movs	r2, #1
 8008960:	4619      	mov	r1, r3
 8008962:	2015      	movs	r0, #21
 8008964:	f000 f95a 	bl	8008c1c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8008968:	793b      	ldrb	r3, [r7, #4]
 800896a:	425b      	negs	r3, r3
 800896c:	105b      	asrs	r3, r3, #1
 800896e:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8008970:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3708      	adds	r7, #8
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8008986:	f107 030c 	add.w	r3, r7, #12
 800898a:	2202      	movs	r2, #2
 800898c:	4619      	mov	r1, r3
 800898e:	2013      	movs	r0, #19
 8008990:	f000 f944 	bl	8008c1c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8008994:	f7ff fdec 	bl	8008570 <SUBGRF_GetPacketType>
 8008998:	4603      	mov	r3, r0
 800899a:	2b01      	cmp	r3, #1
 800899c:	d10d      	bne.n	80089ba <SUBGRF_GetRxBufferStatus+0x3e>
 800899e:	4b0c      	ldr	r3, [pc, #48]	; (80089d0 <SUBGRF_GetRxBufferStatus+0x54>)
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d108      	bne.n	80089ba <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80089a8:	f240 7002 	movw	r0, #1794	; 0x702
 80089ac:	f000 f878 	bl	8008aa0 <SUBGRF_ReadRegister>
 80089b0:	4603      	mov	r3, r0
 80089b2:	461a      	mov	r2, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	701a      	strb	r2, [r3, #0]
 80089b8:	e002      	b.n	80089c0 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 80089ba:	7b3a      	ldrb	r2, [r7, #12]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 80089c0:	7b7a      	ldrb	r2, [r7, #13]
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	701a      	strb	r2, [r3, #0]
}
 80089c6:	bf00      	nop
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	200002a6 	.word	0x200002a6

080089d4 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80089dc:	f107 030c 	add.w	r3, r7, #12
 80089e0:	2203      	movs	r2, #3
 80089e2:	4619      	mov	r1, r3
 80089e4:	2014      	movs	r0, #20
 80089e6:	f000 f919 	bl	8008c1c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 80089ea:	f7ff fdc1 	bl	8008570 <SUBGRF_GetPacketType>
 80089ee:	4603      	mov	r3, r0
 80089f0:	461a      	mov	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d002      	beq.n	8008a04 <SUBGRF_GetPacketStatus+0x30>
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d013      	beq.n	8008a2a <SUBGRF_GetPacketStatus+0x56>
 8008a02:	e02a      	b.n	8008a5a <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8008a04:	7b3a      	ldrb	r2, [r7, #12]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8008a0a:	7b7b      	ldrb	r3, [r7, #13]
 8008a0c:	425b      	negs	r3, r3
 8008a0e:	105b      	asrs	r3, r3, #1
 8008a10:	b25a      	sxtb	r2, r3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8008a16:	7bbb      	ldrb	r3, [r7, #14]
 8008a18:	425b      	negs	r3, r3
 8008a1a:	105b      	asrs	r3, r3, #1
 8008a1c:	b25a      	sxtb	r2, r3
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	609a      	str	r2, [r3, #8]
            break;
 8008a28:	e020      	b.n	8008a6c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8008a2a:	7b3b      	ldrb	r3, [r7, #12]
 8008a2c:	425b      	negs	r3, r3
 8008a2e:	105b      	asrs	r3, r3, #1
 8008a30:	b25a      	sxtb	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8008a36:	7b7b      	ldrb	r3, [r7, #13]
 8008a38:	b25b      	sxtb	r3, r3
 8008a3a:	3302      	adds	r3, #2
 8008a3c:	109b      	asrs	r3, r3, #2
 8008a3e:	b25a      	sxtb	r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8008a44:	7bbb      	ldrb	r3, [r7, #14]
 8008a46:	425b      	negs	r3, r3
 8008a48:	105b      	asrs	r3, r3, #1
 8008a4a:	b25a      	sxtb	r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8008a50:	4b08      	ldr	r3, [pc, #32]	; (8008a74 <SUBGRF_GetPacketStatus+0xa0>)
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	611a      	str	r2, [r3, #16]
            break;
 8008a58:	e008      	b.n	8008a6c <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8008a5a:	2214      	movs	r2, #20
 8008a5c:	2100      	movs	r1, #0
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fbc7 	bl	80091f2 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	220f      	movs	r2, #15
 8008a68:	701a      	strb	r2, [r3, #0]
            break;
 8008a6a:	bf00      	nop
    }
}
 8008a6c:	bf00      	nop
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	200002a8 	.word	0x200002a8

08008a78 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	4603      	mov	r3, r0
 8008a80:	460a      	mov	r2, r1
 8008a82:	80fb      	strh	r3, [r7, #6]
 8008a84:	4613      	mov	r3, r2
 8008a86:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8008a88:	1d7a      	adds	r2, r7, #5
 8008a8a:	88f9      	ldrh	r1, [r7, #6]
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	4803      	ldr	r0, [pc, #12]	; (8008a9c <SUBGRF_WriteRegister+0x24>)
 8008a90:	f7fa fd0e 	bl	80034b0 <HAL_SUBGHZ_WriteRegisters>
}
 8008a94:	bf00      	nop
 8008a96:	3708      	adds	r7, #8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	200002e4 	.word	0x200002e4

08008aa0 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8008aaa:	f107 020f 	add.w	r2, r7, #15
 8008aae:	88f9      	ldrh	r1, [r7, #6]
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	4804      	ldr	r0, [pc, #16]	; (8008ac4 <SUBGRF_ReadRegister+0x24>)
 8008ab4:	f7fa fd5b 	bl	800356e <HAL_SUBGHZ_ReadRegisters>
    return data;
 8008ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	200002e4 	.word	0x200002e4

08008ac8 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b086      	sub	sp, #24
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	4603      	mov	r3, r0
 8008ad0:	6039      	str	r1, [r7, #0]
 8008ad2:	80fb      	strh	r3, [r7, #6]
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8008adc:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ade:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8008ae0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ae2:	b672      	cpsid	i
}
 8008ae4:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8008ae6:	88bb      	ldrh	r3, [r7, #4]
 8008ae8:	88f9      	ldrh	r1, [r7, #6]
 8008aea:	683a      	ldr	r2, [r7, #0]
 8008aec:	4806      	ldr	r0, [pc, #24]	; (8008b08 <SUBGRF_WriteRegisters+0x40>)
 8008aee:	f7fa fcdf 	bl	80034b0 <HAL_SUBGHZ_WriteRegisters>
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	f383 8810 	msr	PRIMASK, r3
}
 8008afc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8008afe:	bf00      	nop
 8008b00:	3718      	adds	r7, #24
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	200002e4 	.word	0x200002e4

08008b0c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b086      	sub	sp, #24
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	4603      	mov	r3, r0
 8008b14:	6039      	str	r1, [r7, #0]
 8008b16:	80fb      	strh	r3, [r7, #6]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b1c:	f3ef 8310 	mrs	r3, PRIMASK
 8008b20:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b22:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8008b24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b26:	b672      	cpsid	i
}
 8008b28:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8008b2a:	88bb      	ldrh	r3, [r7, #4]
 8008b2c:	88f9      	ldrh	r1, [r7, #6]
 8008b2e:	683a      	ldr	r2, [r7, #0]
 8008b30:	4806      	ldr	r0, [pc, #24]	; (8008b4c <SUBGRF_ReadRegisters+0x40>)
 8008b32:	f7fa fd1c 	bl	800356e <HAL_SUBGHZ_ReadRegisters>
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	f383 8810 	msr	PRIMASK, r3
}
 8008b40:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8008b42:	bf00      	nop
 8008b44:	3718      	adds	r7, #24
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	200002e4 	.word	0x200002e4

08008b50 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b086      	sub	sp, #24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	4603      	mov	r3, r0
 8008b58:	6039      	str	r1, [r7, #0]
 8008b5a:	71fb      	strb	r3, [r7, #7]
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b60:	f3ef 8310 	mrs	r3, PRIMASK
 8008b64:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b66:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8008b68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b6a:	b672      	cpsid	i
}
 8008b6c:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8008b6e:	79bb      	ldrb	r3, [r7, #6]
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	79f9      	ldrb	r1, [r7, #7]
 8008b74:	683a      	ldr	r2, [r7, #0]
 8008b76:	4806      	ldr	r0, [pc, #24]	; (8008b90 <SUBGRF_WriteBuffer+0x40>)
 8008b78:	f7fa fe0d 	bl	8003796 <HAL_SUBGHZ_WriteBuffer>
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	f383 8810 	msr	PRIMASK, r3
}
 8008b86:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8008b88:	bf00      	nop
 8008b8a:	3718      	adds	r7, #24
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	200002e4 	.word	0x200002e4

08008b94 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	6039      	str	r1, [r7, #0]
 8008b9e:	71fb      	strb	r3, [r7, #7]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ba4:	f3ef 8310 	mrs	r3, PRIMASK
 8008ba8:	60fb      	str	r3, [r7, #12]
  return(result);
 8008baa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8008bac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008bae:	b672      	cpsid	i
}
 8008bb0:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8008bb2:	79bb      	ldrb	r3, [r7, #6]
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	79f9      	ldrb	r1, [r7, #7]
 8008bb8:	683a      	ldr	r2, [r7, #0]
 8008bba:	4806      	ldr	r0, [pc, #24]	; (8008bd4 <SUBGRF_ReadBuffer+0x40>)
 8008bbc:	f7fa fe3e 	bl	800383c <HAL_SUBGHZ_ReadBuffer>
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	f383 8810 	msr	PRIMASK, r3
}
 8008bca:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8008bcc:	bf00      	nop
 8008bce:	3718      	adds	r7, #24
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	200002e4 	.word	0x200002e4

08008bd8 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b086      	sub	sp, #24
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	4603      	mov	r3, r0
 8008be0:	6039      	str	r1, [r7, #0]
 8008be2:	71fb      	strb	r3, [r7, #7]
 8008be4:	4613      	mov	r3, r2
 8008be6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008be8:	f3ef 8310 	mrs	r3, PRIMASK
 8008bec:	60fb      	str	r3, [r7, #12]
  return(result);
 8008bee:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8008bf0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008bf2:	b672      	cpsid	i
}
 8008bf4:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8008bf6:	88bb      	ldrh	r3, [r7, #4]
 8008bf8:	79f9      	ldrb	r1, [r7, #7]
 8008bfa:	683a      	ldr	r2, [r7, #0]
 8008bfc:	4806      	ldr	r0, [pc, #24]	; (8008c18 <SUBGRF_WriteCommand+0x40>)
 8008bfe:	f7fa fd17 	bl	8003630 <HAL_SUBGHZ_ExecSetCmd>
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	f383 8810 	msr	PRIMASK, r3
}
 8008c0c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8008c0e:	bf00      	nop
 8008c10:	3718      	adds	r7, #24
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	200002e4 	.word	0x200002e4

08008c1c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b086      	sub	sp, #24
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	4603      	mov	r3, r0
 8008c24:	6039      	str	r1, [r7, #0]
 8008c26:	71fb      	strb	r3, [r7, #7]
 8008c28:	4613      	mov	r3, r2
 8008c2a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c2c:	f3ef 8310 	mrs	r3, PRIMASK
 8008c30:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c32:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8008c34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c36:	b672      	cpsid	i
}
 8008c38:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8008c3a:	88bb      	ldrh	r3, [r7, #4]
 8008c3c:	79f9      	ldrb	r1, [r7, #7]
 8008c3e:	683a      	ldr	r2, [r7, #0]
 8008c40:	4806      	ldr	r0, [pc, #24]	; (8008c5c <SUBGRF_ReadCommand+0x40>)
 8008c42:	f7fa fd54 	bl	80036ee <HAL_SUBGHZ_ExecGetCmd>
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	f383 8810 	msr	PRIMASK, r3
}
 8008c50:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8008c52:	bf00      	nop
 8008c54:	3718      	adds	r7, #24
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	200002e4 	.word	0x200002e4

08008c60 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	4603      	mov	r3, r0
 8008c68:	460a      	mov	r2, r1
 8008c6a:	71fb      	strb	r3, [r7, #7]
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8008c70:	2301      	movs	r3, #1
 8008c72:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8008c74:	79bb      	ldrb	r3, [r7, #6]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d10d      	bne.n	8008c96 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8008c7a:	79fb      	ldrb	r3, [r7, #7]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d104      	bne.n	8008c8a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8008c80:	2302      	movs	r3, #2
 8008c82:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8008c84:	2004      	movs	r0, #4
 8008c86:	f000 f8df 	bl	8008e48 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8008c8a:	79fb      	ldrb	r3, [r7, #7]
 8008c8c:	2b02      	cmp	r3, #2
 8008c8e:	d107      	bne.n	8008ca0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8008c90:	2303      	movs	r3, #3
 8008c92:	73fb      	strb	r3, [r7, #15]
 8008c94:	e004      	b.n	8008ca0 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8008c96:	79bb      	ldrb	r3, [r7, #6]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d101      	bne.n	8008ca0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8008ca0:	7bfb      	ldrb	r3, [r7, #15]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f000 fa77 	bl	8009196 <RBI_ConfigRFSwitch>
}
 8008ca8:	bf00      	nop
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8008cbe:	f000 fa77 	bl	80091b0 <RBI_GetTxConfig>
 8008cc2:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	d016      	beq.n	8008cf8 <SUBGRF_SetRfTxPower+0x48>
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	2b02      	cmp	r3, #2
 8008cce:	dc16      	bgt.n	8008cfe <SUBGRF_SetRfTxPower+0x4e>
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d003      	beq.n	8008cde <SUBGRF_SetRfTxPower+0x2e>
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d00a      	beq.n	8008cf2 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8008cdc:	e00f      	b.n	8008cfe <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8008cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ce2:	2b0f      	cmp	r3, #15
 8008ce4:	dd02      	ble.n	8008cec <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8008ce6:	2302      	movs	r3, #2
 8008ce8:	73fb      	strb	r3, [r7, #15]
            break;
 8008cea:	e009      	b.n	8008d00 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8008cec:	2301      	movs	r3, #1
 8008cee:	73fb      	strb	r3, [r7, #15]
            break;
 8008cf0:	e006      	b.n	8008d00 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	73fb      	strb	r3, [r7, #15]
            break;
 8008cf6:	e003      	b.n	8008d00 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8008cf8:	2302      	movs	r3, #2
 8008cfa:	73fb      	strb	r3, [r7, #15]
            break;
 8008cfc:	e000      	b.n	8008d00 <SUBGRF_SetRfTxPower+0x50>
            break;
 8008cfe:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8008d00:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8008d04:	7bfb      	ldrb	r3, [r7, #15]
 8008d06:	2202      	movs	r2, #2
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7ff fc3b 	bl	8008584 <SUBGRF_SetTxParams>

    return paSelect;
 8008d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8008d18:	b480      	push	{r7}
 8008d1a:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8008d1c:	230a      	movs	r3, #10
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bc80      	pop	{r7}
 8008d24:	4770      	bx	lr
	...

08008d28 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8008d30:	4b03      	ldr	r3, [pc, #12]	; (8008d40 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2001      	movs	r0, #1
 8008d36:	4798      	blx	r3
}
 8008d38:	bf00      	nop
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	200002b0 	.word	0x200002b0

08008d44 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8008d4c:	4b03      	ldr	r3, [pc, #12]	; (8008d5c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2002      	movs	r0, #2
 8008d52:	4798      	blx	r3
}
 8008d54:	bf00      	nop
 8008d56:	3708      	adds	r7, #8
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	200002b0 	.word	0x200002b0

08008d60 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8008d68:	4b03      	ldr	r3, [pc, #12]	; (8008d78 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2040      	movs	r0, #64	; 0x40
 8008d6e:	4798      	blx	r3
}
 8008d70:	bf00      	nop
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	200002b0 	.word	0x200002b0

08008d7c <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	460b      	mov	r3, r1
 8008d86:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8008d88:	78fb      	ldrb	r3, [r7, #3]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d002      	beq.n	8008d94 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d005      	beq.n	8008d9e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8008d92:	e00a      	b.n	8008daa <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8008d94:	4b07      	ldr	r3, [pc, #28]	; (8008db4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2080      	movs	r0, #128	; 0x80
 8008d9a:	4798      	blx	r3
            break;
 8008d9c:	e005      	b.n	8008daa <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8008d9e:	4b05      	ldr	r3, [pc, #20]	; (8008db4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008da6:	4798      	blx	r3
            break;
 8008da8:	bf00      	nop
    }
}
 8008daa:	bf00      	nop
 8008dac:	3708      	adds	r7, #8
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	200002b0 	.word	0x200002b0

08008db8 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8008dc0:	4b04      	ldr	r3, [pc, #16]	; (8008dd4 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008dc8:	4798      	blx	r3
}
 8008dca:	bf00      	nop
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	200002b0 	.word	0x200002b0

08008dd8 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8008de0:	4b03      	ldr	r3, [pc, #12]	; (8008df0 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2020      	movs	r0, #32
 8008de6:	4798      	blx	r3
}
 8008de8:	bf00      	nop
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	200002b0 	.word	0x200002b0

08008df4 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8008dfc:	4b03      	ldr	r3, [pc, #12]	; (8008e0c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2004      	movs	r0, #4
 8008e02:	4798      	blx	r3
}
 8008e04:	bf00      	nop
 8008e06:	3708      	adds	r7, #8
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}
 8008e0c:	200002b0 	.word	0x200002b0

08008e10 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8008e18:	4b03      	ldr	r3, [pc, #12]	; (8008e28 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2008      	movs	r0, #8
 8008e1e:	4798      	blx	r3
}
 8008e20:	bf00      	nop
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	200002b0 	.word	0x200002b0

08008e2c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8008e34:	4b03      	ldr	r3, [pc, #12]	; (8008e44 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2010      	movs	r0, #16
 8008e3a:	4798      	blx	r3
}
 8008e3c:	bf00      	nop
 8008e3e:	3708      	adds	r7, #8
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	200002b0 	.word	0x200002b0

08008e48 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	4603      	mov	r3, r0
 8008e50:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8008e52:	f000 f9c3 	bl	80091dc <RBI_IsDCDC>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d112      	bne.n	8008e82 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8008e5c:	f640 1023 	movw	r0, #2339	; 0x923
 8008e60:	f7ff fe1e 	bl	8008aa0 <SUBGRF_ReadRegister>
 8008e64:	4603      	mov	r3, r0
 8008e66:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
 8008e6a:	f023 0306 	bic.w	r3, r3, #6
 8008e6e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8008e70:	7bfa      	ldrb	r2, [r7, #15]
 8008e72:	79fb      	ldrb	r3, [r7, #7]
 8008e74:	4313      	orrs	r3, r2
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	4619      	mov	r1, r3
 8008e7a:	f640 1023 	movw	r0, #2339	; 0x923
 8008e7e:	f7ff fdfb 	bl	8008a78 <SUBGRF_WriteRegister>
  }
}
 8008e82:	bf00      	nop
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
	...

08008e8c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d101      	bne.n	8008e9e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8008e9a:	231f      	movs	r3, #31
 8008e9c:	e016      	b.n	8008ecc <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	73fb      	strb	r3, [r7, #15]
 8008ea2:	e00f      	b.n	8008ec4 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8008ea4:	7bfb      	ldrb	r3, [r7, #15]
 8008ea6:	4a0c      	ldr	r2, [pc, #48]	; (8008ed8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8008ea8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d205      	bcs.n	8008ebe <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8008eb2:	7bfb      	ldrb	r3, [r7, #15]
 8008eb4:	4a08      	ldr	r2, [pc, #32]	; (8008ed8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8008eb6:	00db      	lsls	r3, r3, #3
 8008eb8:	4413      	add	r3, r2
 8008eba:	791b      	ldrb	r3, [r3, #4]
 8008ebc:	e006      	b.n	8008ecc <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8008ebe:	7bfb      	ldrb	r3, [r7, #15]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	73fb      	strb	r3, [r7, #15]
 8008ec4:	7bfb      	ldrb	r3, [r7, #15]
 8008ec6:	2b15      	cmp	r3, #21
 8008ec8:	d9ec      	bls.n	8008ea4 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8008eca:	e7fe      	b.n	8008eca <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3714      	adds	r7, #20
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bc80      	pop	{r7}
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	0800a104 	.word	0x0800a104

08008edc <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b08a      	sub	sp, #40	; 0x28
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8008ee6:	4b36      	ldr	r3, [pc, #216]	; (8008fc0 <SUBGRF_GetCFO+0xe4>)
 8008ee8:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 8008eea:	f640 0007 	movw	r0, #2055	; 0x807
 8008eee:	f7ff fdd7 	bl	8008aa0 <SUBGRF_ReadRegister>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8008ef6:	7ffb      	ldrb	r3, [r7, #31]
 8008ef8:	08db      	lsrs	r3, r3, #3
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	f003 0303 	and.w	r3, r3, #3
 8008f00:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008f04:	4413      	add	r3, r2
 8008f06:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8008f0a:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8008f0c:	7ffb      	ldrb	r3, [r7, #31]
 8008f0e:	f003 0307 	and.w	r3, r3, #7
 8008f12:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8008f14:	7fba      	ldrb	r2, [r7, #30]
 8008f16:	7f7b      	ldrb	r3, [r7, #29]
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f1e:	461a      	mov	r2, r3
 8008f20:	4b28      	ldr	r3, [pc, #160]	; (8008fc4 <SUBGRF_GetCFO+0xe8>)
 8008f22:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f26:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8008f28:	69ba      	ldr	r2, [r7, #24]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f30:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8008f32:	2301      	movs	r3, #1
 8008f34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8008f38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f3c:	697a      	ldr	r2, [r7, #20]
 8008f3e:	fb02 f303 	mul.w	r3, r2, r3
 8008f42:	2b07      	cmp	r3, #7
 8008f44:	d802      	bhi.n	8008f4c <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 8008f46:	2302      	movs	r3, #2
 8008f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8008f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f50:	697a      	ldr	r2, [r7, #20]
 8008f52:	fb02 f303 	mul.w	r3, r2, r3
 8008f56:	2b03      	cmp	r3, #3
 8008f58:	d802      	bhi.n	8008f60 <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 8008f5a:	2304      	movs	r3, #4
 8008f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8008f60:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	fb02 f303 	mul.w	r3, r2, r3
 8008f6a:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 8008f6c:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8008f70:	f7ff fd96 	bl	8008aa0 <SUBGRF_ReadRegister>
 8008f74:	4603      	mov	r3, r0
 8008f76:	021b      	lsls	r3, r3, #8
 8008f78:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008f7c:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 8008f7e:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8008f82:	f7ff fd8d 	bl	8008aa0 <SUBGRF_ReadRegister>
 8008f86:	4603      	mov	r3, r0
 8008f88:	461a      	mov	r2, r3
 8008f8a:	6a3b      	ldr	r3, [r7, #32]
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8008f90:	6a3b      	ldr	r3, [r7, #32]
 8008f92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d005      	beq.n	8008fa6 <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 8008f9a:	6a3b      	ldr	r3, [r7, #32]
 8008f9c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8008fa0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8008fa4:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	095b      	lsrs	r3, r3, #5
 8008faa:	6a3a      	ldr	r2, [r7, #32]
 8008fac:	fb02 f303 	mul.w	r3, r2, r3
 8008fb0:	11da      	asrs	r2, r3, #7
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	601a      	str	r2, [r3, #0]
}
 8008fb6:	bf00      	nop
 8008fb8:	3728      	adds	r7, #40	; 0x28
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	0c0a0804 	.word	0x0c0a0804
 8008fc4:	01e84800 	.word	0x01e84800

08008fc8 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b087      	sub	sp, #28
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	4603      	mov	r3, r0
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
 8008fd4:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 8008fda:	f04f 33ff 	mov.w	r3, #4294967295
 8008fde:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8008fe0:	697b      	ldr	r3, [r7, #20]
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	371c      	adds	r7, #28
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bc80      	pop	{r7}
 8008fea:	4770      	bx	lr

08008fec <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 8008fec:	b480      	push	{r7}
 8008fee:	b087      	sub	sp, #28
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	607a      	str	r2, [r7, #4]
 8008ff8:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 8008ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8009002:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8009004:	697b      	ldr	r3, [r7, #20]
}
 8009006:	4618      	mov	r0, r3
 8009008:	371c      	adds	r7, #28
 800900a:	46bd      	mov	sp, r7
 800900c:	bc80      	pop	{r7}
 800900e:	4770      	bx	lr

08009010 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 8009010:	b480      	push	{r7}
 8009012:	b085      	sub	sp, #20
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 800901c:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8009020:	4618      	mov	r0, r3
 8009022:	3714      	adds	r7, #20
 8009024:	46bd      	mov	sp, r7
 8009026:	bc80      	pop	{r7}
 8009028:	4770      	bx	lr

0800902a <RFW_DeInit>:

void RFW_DeInit( void)
{
 800902a:	b480      	push	{r7}
 800902c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 800902e:	bf00      	nop
 8009030:	46bd      	mov	sp, r7
 8009032:	bc80      	pop	{r7}
 8009034:	4770      	bx	lr

08009036 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 8009036:	b480      	push	{r7}
 8009038:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 800903a:	2300      	movs	r3, #0
#endif
}
 800903c:	4618      	mov	r0, r3
 800903e:	46bd      	mov	sp, r7
 8009040:	bc80      	pop	{r7}
 8009042:	4770      	bx	lr

08009044 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 8009044:	b480      	push	{r7}
 8009046:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 8009048:	2300      	movs	r3, #0
#endif
}
 800904a:	4618      	mov	r0, r3
 800904c:	46bd      	mov	sp, r7
 800904e:	bc80      	pop	{r7}
 8009050:	4770      	bx	lr

08009052 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 8009052:	b480      	push	{r7}
 8009054:	b083      	sub	sp, #12
 8009056:	af00      	add	r7, sp, #0
 8009058:	4603      	mov	r3, r0
 800905a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 800905c:	bf00      	nop
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	bc80      	pop	{r7}
 8009064:	4770      	bx	lr

08009066 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 8009066:	b480      	push	{r7}
 8009068:	b087      	sub	sp, #28
 800906a:	af00      	add	r7, sp, #0
 800906c:	60f8      	str	r0, [r7, #12]
 800906e:	460b      	mov	r3, r1
 8009070:	607a      	str	r2, [r7, #4]
 8009072:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8009074:	f04f 33ff 	mov.w	r3, #4294967295
 8009078:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 800907a:	697b      	ldr	r3, [r7, #20]
}
 800907c:	4618      	mov	r0, r3
 800907e:	371c      	adds	r7, #28
 8009080:	46bd      	mov	sp, r7
 8009082:	bc80      	pop	{r7}
 8009084:	4770      	bx	lr

08009086 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8009086:	b480      	push	{r7}
 8009088:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 800908a:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 800908e:	4618      	mov	r0, r3
 8009090:	46bd      	mov	sp, r7
 8009092:	bc80      	pop	{r7}
 8009094:	4770      	bx	lr

08009096 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 8009096:	b480      	push	{r7}
 8009098:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 800909a:	bf00      	nop
 800909c:	46bd      	mov	sp, r7
 800909e:	bc80      	pop	{r7}
 80090a0:	4770      	bx	lr

080090a2 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 80090a2:	b480      	push	{r7}
 80090a4:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 80090a6:	bf00      	nop
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bc80      	pop	{r7}
 80090ac:	4770      	bx	lr

080090ae <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 80090ae:	b480      	push	{r7}
 80090b0:	b083      	sub	sp, #12
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	4603      	mov	r3, r0
 80090b6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 80090b8:	bf00      	nop
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	bc80      	pop	{r7}
 80090c0:	4770      	bx	lr

080090c2 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 80090c2:	b580      	push	{r7, lr}
 80090c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 80090c6:	f7f7 fd26 	bl	8000b16 <SystemApp_Init>
  SubghzApp_Init();
 80090ca:	f000 f809 	bl	80090e0 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 80090ce:	bf00      	nop
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 80090d2:	b480      	push	{r7}
 80090d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
}
 80090d6:	bf00      	nop
 80090d8:	46bd      	mov	sp, r7
 80090da:	bc80      	pop	{r7}
 80090dc:	4770      	bx	lr
	...

080090e0 <SubghzApp_Init>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */
  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 80090e4:	4b0a      	ldr	r3, [pc, #40]	; (8009110 <SubghzApp_Init+0x30>)
 80090e6:	4a0b      	ldr	r2, [pc, #44]	; (8009114 <SubghzApp_Init+0x34>)
 80090e8:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 80090ea:	4b09      	ldr	r3, [pc, #36]	; (8009110 <SubghzApp_Init+0x30>)
 80090ec:	4a0a      	ldr	r2, [pc, #40]	; (8009118 <SubghzApp_Init+0x38>)
 80090ee:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 80090f0:	4b07      	ldr	r3, [pc, #28]	; (8009110 <SubghzApp_Init+0x30>)
 80090f2:	4a0a      	ldr	r2, [pc, #40]	; (800911c <SubghzApp_Init+0x3c>)
 80090f4:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 80090f6:	4b06      	ldr	r3, [pc, #24]	; (8009110 <SubghzApp_Init+0x30>)
 80090f8:	4a09      	ldr	r2, [pc, #36]	; (8009120 <SubghzApp_Init+0x40>)
 80090fa:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 80090fc:	4b04      	ldr	r3, [pc, #16]	; (8009110 <SubghzApp_Init+0x30>)
 80090fe:	4a09      	ldr	r2, [pc, #36]	; (8009124 <SubghzApp_Init+0x44>)
 8009100:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 8009102:	4b09      	ldr	r3, [pc, #36]	; (8009128 <SubghzApp_Init+0x48>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4802      	ldr	r0, [pc, #8]	; (8009110 <SubghzApp_Init+0x30>)
 8009108:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */
  /* USER CODE END SubghzApp_Init_2 */
}
 800910a:	bf00      	nop
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	200002b4 	.word	0x200002b4
 8009114:	0800912d 	.word	0x0800912d
 8009118:	08009139 	.word	0x08009139
 800911c:	0800915d 	.word	0x0800915d
 8009120:	08009169 	.word	0x08009169
 8009124:	08009175 	.word	0x08009175
 8009128:	0800a07c 	.word	0x0800a07c

0800912c <OnTxDone>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void OnTxDone(void)
{
 800912c:	b480      	push	{r7}
 800912e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 8009130:	bf00      	nop
 8009132:	46bd      	mov	sp, r7
 8009134:	bc80      	pop	{r7}
 8009136:	4770      	bx	lr

08009138 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 8009138:	b480      	push	{r7}
 800913a:	b085      	sub	sp, #20
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	4608      	mov	r0, r1
 8009142:	4611      	mov	r1, r2
 8009144:	461a      	mov	r2, r3
 8009146:	4603      	mov	r3, r0
 8009148:	817b      	strh	r3, [r7, #10]
 800914a:	460b      	mov	r3, r1
 800914c:	813b      	strh	r3, [r7, #8]
 800914e:	4613      	mov	r3, r2
 8009150:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 8009152:	bf00      	nop
 8009154:	3714      	adds	r7, #20
 8009156:	46bd      	mov	sp, r7
 8009158:	bc80      	pop	{r7}
 800915a:	4770      	bx	lr

0800915c <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800915c:	b480      	push	{r7}
 800915e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 8009160:	bf00      	nop
 8009162:	46bd      	mov	sp, r7
 8009164:	bc80      	pop	{r7}
 8009166:	4770      	bx	lr

08009168 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 8009168:	b480      	push	{r7}
 800916a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 800916c:	bf00      	nop
 800916e:	46bd      	mov	sp, r7
 8009170:	bc80      	pop	{r7}
 8009172:	4770      	bx	lr

08009174 <OnRxError>:

static void OnRxError(void)
{
 8009174:	b480      	push	{r7}
 8009176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 8009178:	bf00      	nop
 800917a:	46bd      	mov	sp, r7
 800917c:	bc80      	pop	{r7}
 800917e:	4770      	bx	lr

08009180 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 8009186:	2300      	movs	r3, #0
 8009188:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800918a:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800918c:	4618      	mov	r0, r3
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	bc80      	pop	{r7}
 8009194:	4770      	bx	lr

08009196 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8009196:	b480      	push	{r7}
 8009198:	b085      	sub	sp, #20
 800919a:	af00      	add	r7, sp, #0
 800919c:	4603      	mov	r3, r0
 800919e:	71fb      	strb	r3, [r7, #7]
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 80091a0:	2300      	movs	r3, #0
 80091a2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 80091a4:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3714      	adds	r7, #20
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bc80      	pop	{r7}
 80091ae:	4770      	bx	lr

080091b0 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 80091b6:	2300      	movs	r3, #0
 80091b8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 80091ba:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 80091bc:	4618      	mov	r0, r3
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bc80      	pop	{r7}
 80091c4:	4770      	bx	lr

080091c6 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80091c6:	b480      	push	{r7}
 80091c8:	b083      	sub	sp, #12
 80091ca:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 80091cc:	2301      	movs	r3, #1
 80091ce:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 80091d0:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	370c      	adds	r7, #12
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bc80      	pop	{r7}
 80091da:	4770      	bx	lr

080091dc <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 80091e2:	2301      	movs	r3, #1
 80091e4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 80091e6:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bc80      	pop	{r7}
 80091f0:	4770      	bx	lr

080091f2 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 80091f2:	b480      	push	{r7}
 80091f4:	b085      	sub	sp, #20
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
 80091fa:	460b      	mov	r3, r1
 80091fc:	70fb      	strb	r3, [r7, #3]
 80091fe:	4613      	mov	r3, r2
 8009200:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8009206:	e004      	b.n	8009212 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	1c5a      	adds	r2, r3, #1
 800920c:	60fa      	str	r2, [r7, #12]
 800920e:	78fa      	ldrb	r2, [r7, #3]
 8009210:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8009212:	883b      	ldrh	r3, [r7, #0]
 8009214:	1e5a      	subs	r2, r3, #1
 8009216:	803a      	strh	r2, [r7, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d1f5      	bne.n	8009208 <UTIL_MEM_set_8+0x16>
  }
}
 800921c:	bf00      	nop
 800921e:	bf00      	nop
 8009220:	3714      	adds	r7, #20
 8009222:	46bd      	mov	sp, r7
 8009224:	bc80      	pop	{r7}
 8009226:	4770      	bx	lr

08009228 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	603b      	str	r3, [r7, #0]
 8009234:	4613      	mov	r3, r2
 8009236:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d023      	beq.n	8009286 <UTIL_TIMER_Create+0x5e>
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d020      	beq.n	8009286 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2200      	movs	r2, #0
 8009248:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800924a:	4b11      	ldr	r3, [pc, #68]	; (8009290 <UTIL_TIMER_Create+0x68>)
 800924c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924e:	68b8      	ldr	r0, [r7, #8]
 8009250:	4798      	blx	r3
 8009252:	4602      	mov	r2, r0
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2200      	movs	r2, #0
 800925c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2200      	movs	r2, #0
 8009262:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2200      	movs	r2, #0
 8009268:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	683a      	ldr	r2, [r7, #0]
 800926e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	69ba      	ldr	r2, [r7, #24]
 8009274:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	79fa      	ldrb	r2, [r7, #7]
 800927a:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2200      	movs	r2, #0
 8009280:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 8009282:	2300      	movs	r3, #0
 8009284:	e000      	b.n	8009288 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 8009286:	2301      	movs	r3, #1
  }
}
 8009288:	4618      	mov	r0, r3
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	0800a028 	.word	0x0800a028

08009294 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b08a      	sub	sp, #40	; 0x28
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800929c:	2300      	movs	r3, #0
 800929e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d056      	beq.n	8009356 <UTIL_TIMER_Start+0xc2>
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 f929 	bl	8009500 <TimerExists>
 80092ae:	4603      	mov	r3, r0
 80092b0:	f083 0301 	eor.w	r3, r3, #1
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d04d      	beq.n	8009356 <UTIL_TIMER_Start+0xc2>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	7a5b      	ldrb	r3, [r3, #9]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d149      	bne.n	8009356 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092c2:	f3ef 8310 	mrs	r3, PRIMASK
 80092c6:	613b      	str	r3, [r7, #16]
  return(result);
 80092c8:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 80092ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80092cc:	b672      	cpsid	i
}
 80092ce:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 80092d6:	4b24      	ldr	r3, [pc, #144]	; (8009368 <UTIL_TIMER_Start+0xd4>)
 80092d8:	6a1b      	ldr	r3, [r3, #32]
 80092da:	4798      	blx	r3
 80092dc:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 80092de:	6a3a      	ldr	r2, [r7, #32]
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d201      	bcs.n	80092ea <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a3a      	ldr	r2, [r7, #32]
 80092ee:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2201      	movs	r2, #1
 80092fa:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 8009302:	4b1a      	ldr	r3, [pc, #104]	; (800936c <UTIL_TIMER_Start+0xd8>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d106      	bne.n	8009318 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800930a:	4b17      	ldr	r3, [pc, #92]	; (8009368 <UTIL_TIMER_Start+0xd4>)
 800930c:	691b      	ldr	r3, [r3, #16]
 800930e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 f96b 	bl	80095ec <TimerInsertNewHeadTimer>
 8009316:	e017      	b.n	8009348 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8009318:	4b13      	ldr	r3, [pc, #76]	; (8009368 <UTIL_TIMER_Start+0xd4>)
 800931a:	699b      	ldr	r3, [r3, #24]
 800931c:	4798      	blx	r3
 800931e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	441a      	add	r2, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	4b0e      	ldr	r3, [pc, #56]	; (800936c <UTIL_TIMER_Start+0xd8>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	429a      	cmp	r2, r3
 8009338:	d203      	bcs.n	8009342 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 f956 	bl	80095ec <TimerInsertNewHeadTimer>
 8009340:	e002      	b.n	8009348 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f922 	bl	800958c <TimerInsertTimer>
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f383 8810 	msr	PRIMASK, r3
}
 8009352:	bf00      	nop
  {
 8009354:	e002      	b.n	800935c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 8009356:	2301      	movs	r3, #1
 8009358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800935c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009360:	4618      	mov	r0, r3
 8009362:	3728      	adds	r7, #40	; 0x28
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}
 8009368:	0800a028 	.word	0x0800a028
 800936c:	200002d0 	.word	0x200002d0

08009370 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b088      	sub	sp, #32
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8009378:	2300      	movs	r3, #0
 800937a:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d05b      	beq.n	800943a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009382:	f3ef 8310 	mrs	r3, PRIMASK
 8009386:	60fb      	str	r3, [r7, #12]
  return(result);
 8009388:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800938a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800938c:	b672      	cpsid	i
}
 800938e:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8009390:	4b2d      	ldr	r3, [pc, #180]	; (8009448 <UTIL_TIMER_Stop+0xd8>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8009396:	4b2c      	ldr	r3, [pc, #176]	; (8009448 <UTIL_TIMER_Stop+0xd8>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2201      	movs	r2, #1
 80093a0:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 80093a2:	4b29      	ldr	r3, [pc, #164]	; (8009448 <UTIL_TIMER_Stop+0xd8>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d041      	beq.n	800942e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 80093b0:	4b25      	ldr	r3, [pc, #148]	; (8009448 <UTIL_TIMER_Stop+0xd8>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d134      	bne.n	8009424 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 80093ba:	4b23      	ldr	r3, [pc, #140]	; (8009448 <UTIL_TIMER_Stop+0xd8>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2200      	movs	r2, #0
 80093c0:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 80093c2:	4b21      	ldr	r3, [pc, #132]	; (8009448 <UTIL_TIMER_Stop+0xd8>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	695b      	ldr	r3, [r3, #20]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00a      	beq.n	80093e2 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 80093cc:	4b1e      	ldr	r3, [pc, #120]	; (8009448 <UTIL_TIMER_Stop+0xd8>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	695b      	ldr	r3, [r3, #20]
 80093d2:	4a1d      	ldr	r2, [pc, #116]	; (8009448 <UTIL_TIMER_Stop+0xd8>)
 80093d4:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 80093d6:	4b1c      	ldr	r3, [pc, #112]	; (8009448 <UTIL_TIMER_Stop+0xd8>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4618      	mov	r0, r3
 80093dc:	f000 f8ac 	bl	8009538 <TimerSetTimeout>
 80093e0:	e023      	b.n	800942a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 80093e2:	4b1a      	ldr	r3, [pc, #104]	; (800944c <UTIL_TIMER_Stop+0xdc>)
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	4798      	blx	r3
            TimerListHead = NULL;
 80093e8:	4b17      	ldr	r3, [pc, #92]	; (8009448 <UTIL_TIMER_Stop+0xd8>)
 80093ea:	2200      	movs	r2, #0
 80093ec:	601a      	str	r2, [r3, #0]
 80093ee:	e01c      	b.n	800942a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 80093f0:	697a      	ldr	r2, [r7, #20]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d110      	bne.n	800941a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	695b      	ldr	r3, [r3, #20]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d006      	beq.n	800940e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	695b      	ldr	r3, [r3, #20]
 8009404:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	697a      	ldr	r2, [r7, #20]
 800940a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800940c:	e00d      	b.n	800942a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800940e:	2300      	movs	r3, #0
 8009410:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	697a      	ldr	r2, [r7, #20]
 8009416:	615a      	str	r2, [r3, #20]
            break;
 8009418:	e007      	b.n	800942a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	695b      	ldr	r3, [r3, #20]
 8009422:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1e2      	bne.n	80093f0 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800942a:	2300      	movs	r3, #0
 800942c:	77fb      	strb	r3, [r7, #31]
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	f383 8810 	msr	PRIMASK, r3
}
 8009438:	e001      	b.n	800943e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800943a:	2301      	movs	r3, #1
 800943c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800943e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009440:	4618      	mov	r0, r3
 8009442:	3720      	adds	r7, #32
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}
 8009448:	200002d0 	.word	0x200002d0
 800944c:	0800a028 	.word	0x0800a028

08009450 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800945a:	2300      	movs	r3, #0
 800945c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d102      	bne.n	800946a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 8009464:	2301      	movs	r3, #1
 8009466:	73fb      	strb	r3, [r7, #15]
 8009468:	e014      	b.n	8009494 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800946a:	4b0d      	ldr	r3, [pc, #52]	; (80094a0 <UTIL_TIMER_SetPeriod+0x50>)
 800946c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946e:	6838      	ldr	r0, [r7, #0]
 8009470:	4798      	blx	r3
 8009472:	4602      	mov	r2, r0
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 f841 	bl	8009500 <TimerExists>
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d007      	beq.n	8009494 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f7ff ff73 	bl	8009370 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f7ff ff02 	bl	8009294 <UTIL_TIMER_Start>
 8009490:	4603      	mov	r3, r0
 8009492:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8009494:	7bfb      	ldrb	r3, [r7, #15]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	0800a028 	.word	0x0800a028

080094a4 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 80094aa:	4b06      	ldr	r3, [pc, #24]	; (80094c4 <UTIL_TIMER_GetCurrentTime+0x20>)
 80094ac:	69db      	ldr	r3, [r3, #28]
 80094ae:	4798      	blx	r3
 80094b0:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 80094b2:	4b04      	ldr	r3, [pc, #16]	; (80094c4 <UTIL_TIMER_GetCurrentTime+0x20>)
 80094b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	4798      	blx	r3
 80094ba:	4603      	mov	r3, r0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3708      	adds	r7, #8
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	0800a028 	.word	0x0800a028

080094c8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 80094d0:	4b0a      	ldr	r3, [pc, #40]	; (80094fc <UTIL_TIMER_GetElapsedTime+0x34>)
 80094d2:	69db      	ldr	r3, [r3, #28]
 80094d4:	4798      	blx	r3
 80094d6:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 80094d8:	4b08      	ldr	r3, [pc, #32]	; (80094fc <UTIL_TIMER_GetElapsedTime+0x34>)
 80094da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	4798      	blx	r3
 80094e0:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 80094e2:	4b06      	ldr	r3, [pc, #24]	; (80094fc <UTIL_TIMER_GetElapsedTime+0x34>)
 80094e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e6:	68f9      	ldr	r1, [r7, #12]
 80094e8:	68ba      	ldr	r2, [r7, #8]
 80094ea:	1a8a      	subs	r2, r1, r2
 80094ec:	4610      	mov	r0, r2
 80094ee:	4798      	blx	r3
 80094f0:	4603      	mov	r3, r0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	0800a028 	.word	0x0800a028

08009500 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 8009500:	b480      	push	{r7}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8009508:	4b0a      	ldr	r3, [pc, #40]	; (8009534 <TimerExists+0x34>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800950e:	e008      	b.n	8009522 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	429a      	cmp	r2, r3
 8009516:	d101      	bne.n	800951c <TimerExists+0x1c>
    {
      return true;
 8009518:	2301      	movs	r3, #1
 800951a:	e006      	b.n	800952a <TimerExists+0x2a>
    }
    cur = cur->Next;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	695b      	ldr	r3, [r3, #20]
 8009520:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d1f3      	bne.n	8009510 <TimerExists+0x10>
  }
  return false;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3714      	adds	r7, #20
 800952e:	46bd      	mov	sp, r7
 8009530:	bc80      	pop	{r7}
 8009532:	4770      	bx	lr
 8009534:	200002d0 	.word	0x200002d0

08009538 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8009538:	b590      	push	{r4, r7, lr}
 800953a:	b085      	sub	sp, #20
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8009540:	4b11      	ldr	r3, [pc, #68]	; (8009588 <TimerSetTimeout+0x50>)
 8009542:	6a1b      	ldr	r3, [r3, #32]
 8009544:	4798      	blx	r3
 8009546:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681c      	ldr	r4, [r3, #0]
 8009552:	4b0d      	ldr	r3, [pc, #52]	; (8009588 <TimerSetTimeout+0x50>)
 8009554:	699b      	ldr	r3, [r3, #24]
 8009556:	4798      	blx	r3
 8009558:	4602      	mov	r2, r0
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	4413      	add	r3, r2
 800955e:	429c      	cmp	r4, r3
 8009560:	d207      	bcs.n	8009572 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8009562:	4b09      	ldr	r3, [pc, #36]	; (8009588 <TimerSetTimeout+0x50>)
 8009564:	699b      	ldr	r3, [r3, #24]
 8009566:	4798      	blx	r3
 8009568:	4602      	mov	r2, r0
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	441a      	add	r2, r3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8009572:	4b05      	ldr	r3, [pc, #20]	; (8009588 <TimerSetTimeout+0x50>)
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	6812      	ldr	r2, [r2, #0]
 800957a:	4610      	mov	r0, r2
 800957c:	4798      	blx	r3
}
 800957e:	bf00      	nop
 8009580:	3714      	adds	r7, #20
 8009582:	46bd      	mov	sp, r7
 8009584:	bd90      	pop	{r4, r7, pc}
 8009586:	bf00      	nop
 8009588:	0800a028 	.word	0x0800a028

0800958c <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8009594:	4b14      	ldr	r3, [pc, #80]	; (80095e8 <TimerInsertTimer+0x5c>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800959a:	4b13      	ldr	r3, [pc, #76]	; (80095e8 <TimerInsertTimer+0x5c>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	695b      	ldr	r3, [r3, #20]
 80095a0:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 80095a2:	e012      	b.n	80095ca <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d905      	bls.n	80095bc <TimerInsertTimer+0x30>
    {
        cur = next;
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	695b      	ldr	r3, [r3, #20]
 80095b8:	60bb      	str	r3, [r7, #8]
 80095ba:	e006      	b.n	80095ca <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	68ba      	ldr	r2, [r7, #8]
 80095c6:	615a      	str	r2, [r3, #20]
        return;
 80095c8:	e009      	b.n	80095de <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	695b      	ldr	r3, [r3, #20]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d1e8      	bne.n	80095a4 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	615a      	str	r2, [r3, #20]
}
 80095de:	3714      	adds	r7, #20
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bc80      	pop	{r7}
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	200002d0 	.word	0x200002d0

080095ec <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80095f4:	4b0b      	ldr	r3, [pc, #44]	; (8009624 <TimerInsertNewHeadTimer+0x38>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d002      	beq.n	8009606 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2200      	movs	r2, #0
 8009604:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800960c:	4a05      	ldr	r2, [pc, #20]	; (8009624 <TimerInsertNewHeadTimer+0x38>)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 8009612:	4b04      	ldr	r3, [pc, #16]	; (8009624 <TimerInsertNewHeadTimer+0x38>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4618      	mov	r0, r3
 8009618:	f7ff ff8e 	bl	8009538 <TimerSetTimeout>
}
 800961c:	bf00      	nop
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	200002d0 	.word	0x200002d0

08009628 <__errno>:
 8009628:	4b01      	ldr	r3, [pc, #4]	; (8009630 <__errno+0x8>)
 800962a:	6818      	ldr	r0, [r3, #0]
 800962c:	4770      	bx	lr
 800962e:	bf00      	nop
 8009630:	20000010 	.word	0x20000010

08009634 <__libc_init_array>:
 8009634:	b570      	push	{r4, r5, r6, lr}
 8009636:	4d0d      	ldr	r5, [pc, #52]	; (800966c <__libc_init_array+0x38>)
 8009638:	4c0d      	ldr	r4, [pc, #52]	; (8009670 <__libc_init_array+0x3c>)
 800963a:	1b64      	subs	r4, r4, r5
 800963c:	10a4      	asrs	r4, r4, #2
 800963e:	2600      	movs	r6, #0
 8009640:	42a6      	cmp	r6, r4
 8009642:	d109      	bne.n	8009658 <__libc_init_array+0x24>
 8009644:	4d0b      	ldr	r5, [pc, #44]	; (8009674 <__libc_init_array+0x40>)
 8009646:	4c0c      	ldr	r4, [pc, #48]	; (8009678 <__libc_init_array+0x44>)
 8009648:	f000 fc66 	bl	8009f18 <_init>
 800964c:	1b64      	subs	r4, r4, r5
 800964e:	10a4      	asrs	r4, r4, #2
 8009650:	2600      	movs	r6, #0
 8009652:	42a6      	cmp	r6, r4
 8009654:	d105      	bne.n	8009662 <__libc_init_array+0x2e>
 8009656:	bd70      	pop	{r4, r5, r6, pc}
 8009658:	f855 3b04 	ldr.w	r3, [r5], #4
 800965c:	4798      	blx	r3
 800965e:	3601      	adds	r6, #1
 8009660:	e7ee      	b.n	8009640 <__libc_init_array+0xc>
 8009662:	f855 3b04 	ldr.w	r3, [r5], #4
 8009666:	4798      	blx	r3
 8009668:	3601      	adds	r6, #1
 800966a:	e7f2      	b.n	8009652 <__libc_init_array+0x1e>
 800966c:	0800a1f0 	.word	0x0800a1f0
 8009670:	0800a1f0 	.word	0x0800a1f0
 8009674:	0800a1f0 	.word	0x0800a1f0
 8009678:	0800a1f4 	.word	0x0800a1f4

0800967c <memset>:
 800967c:	4402      	add	r2, r0
 800967e:	4603      	mov	r3, r0
 8009680:	4293      	cmp	r3, r2
 8009682:	d100      	bne.n	8009686 <memset+0xa>
 8009684:	4770      	bx	lr
 8009686:	f803 1b01 	strb.w	r1, [r3], #1
 800968a:	e7f9      	b.n	8009680 <memset+0x4>

0800968c <_vsniprintf_r>:
 800968c:	b530      	push	{r4, r5, lr}
 800968e:	1e14      	subs	r4, r2, #0
 8009690:	4605      	mov	r5, r0
 8009692:	b09b      	sub	sp, #108	; 0x6c
 8009694:	4618      	mov	r0, r3
 8009696:	da05      	bge.n	80096a4 <_vsniprintf_r+0x18>
 8009698:	238b      	movs	r3, #139	; 0x8b
 800969a:	602b      	str	r3, [r5, #0]
 800969c:	f04f 30ff 	mov.w	r0, #4294967295
 80096a0:	b01b      	add	sp, #108	; 0x6c
 80096a2:	bd30      	pop	{r4, r5, pc}
 80096a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80096a8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80096ac:	bf14      	ite	ne
 80096ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 80096b2:	4623      	moveq	r3, r4
 80096b4:	9302      	str	r3, [sp, #8]
 80096b6:	9305      	str	r3, [sp, #20]
 80096b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80096bc:	9100      	str	r1, [sp, #0]
 80096be:	9104      	str	r1, [sp, #16]
 80096c0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80096c4:	4602      	mov	r2, r0
 80096c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80096c8:	4669      	mov	r1, sp
 80096ca:	4628      	mov	r0, r5
 80096cc:	f000 f874 	bl	80097b8 <_svfiprintf_r>
 80096d0:	1c43      	adds	r3, r0, #1
 80096d2:	bfbc      	itt	lt
 80096d4:	238b      	movlt	r3, #139	; 0x8b
 80096d6:	602b      	strlt	r3, [r5, #0]
 80096d8:	2c00      	cmp	r4, #0
 80096da:	d0e1      	beq.n	80096a0 <_vsniprintf_r+0x14>
 80096dc:	9b00      	ldr	r3, [sp, #0]
 80096de:	2200      	movs	r2, #0
 80096e0:	701a      	strb	r2, [r3, #0]
 80096e2:	e7dd      	b.n	80096a0 <_vsniprintf_r+0x14>

080096e4 <vsniprintf>:
 80096e4:	b507      	push	{r0, r1, r2, lr}
 80096e6:	9300      	str	r3, [sp, #0]
 80096e8:	4613      	mov	r3, r2
 80096ea:	460a      	mov	r2, r1
 80096ec:	4601      	mov	r1, r0
 80096ee:	4803      	ldr	r0, [pc, #12]	; (80096fc <vsniprintf+0x18>)
 80096f0:	6800      	ldr	r0, [r0, #0]
 80096f2:	f7ff ffcb 	bl	800968c <_vsniprintf_r>
 80096f6:	b003      	add	sp, #12
 80096f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80096fc:	20000010 	.word	0x20000010

08009700 <__ssputs_r>:
 8009700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009704:	688e      	ldr	r6, [r1, #8]
 8009706:	429e      	cmp	r6, r3
 8009708:	4682      	mov	sl, r0
 800970a:	460c      	mov	r4, r1
 800970c:	4690      	mov	r8, r2
 800970e:	461f      	mov	r7, r3
 8009710:	d838      	bhi.n	8009784 <__ssputs_r+0x84>
 8009712:	898a      	ldrh	r2, [r1, #12]
 8009714:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009718:	d032      	beq.n	8009780 <__ssputs_r+0x80>
 800971a:	6825      	ldr	r5, [r4, #0]
 800971c:	6909      	ldr	r1, [r1, #16]
 800971e:	eba5 0901 	sub.w	r9, r5, r1
 8009722:	6965      	ldr	r5, [r4, #20]
 8009724:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009728:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800972c:	3301      	adds	r3, #1
 800972e:	444b      	add	r3, r9
 8009730:	106d      	asrs	r5, r5, #1
 8009732:	429d      	cmp	r5, r3
 8009734:	bf38      	it	cc
 8009736:	461d      	movcc	r5, r3
 8009738:	0553      	lsls	r3, r2, #21
 800973a:	d531      	bpl.n	80097a0 <__ssputs_r+0xa0>
 800973c:	4629      	mov	r1, r5
 800973e:	f000 fb45 	bl	8009dcc <_malloc_r>
 8009742:	4606      	mov	r6, r0
 8009744:	b950      	cbnz	r0, 800975c <__ssputs_r+0x5c>
 8009746:	230c      	movs	r3, #12
 8009748:	f8ca 3000 	str.w	r3, [sl]
 800974c:	89a3      	ldrh	r3, [r4, #12]
 800974e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009752:	81a3      	strh	r3, [r4, #12]
 8009754:	f04f 30ff 	mov.w	r0, #4294967295
 8009758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800975c:	6921      	ldr	r1, [r4, #16]
 800975e:	464a      	mov	r2, r9
 8009760:	f000 fabe 	bl	8009ce0 <memcpy>
 8009764:	89a3      	ldrh	r3, [r4, #12]
 8009766:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800976a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800976e:	81a3      	strh	r3, [r4, #12]
 8009770:	6126      	str	r6, [r4, #16]
 8009772:	6165      	str	r5, [r4, #20]
 8009774:	444e      	add	r6, r9
 8009776:	eba5 0509 	sub.w	r5, r5, r9
 800977a:	6026      	str	r6, [r4, #0]
 800977c:	60a5      	str	r5, [r4, #8]
 800977e:	463e      	mov	r6, r7
 8009780:	42be      	cmp	r6, r7
 8009782:	d900      	bls.n	8009786 <__ssputs_r+0x86>
 8009784:	463e      	mov	r6, r7
 8009786:	4632      	mov	r2, r6
 8009788:	6820      	ldr	r0, [r4, #0]
 800978a:	4641      	mov	r1, r8
 800978c:	f000 fab6 	bl	8009cfc <memmove>
 8009790:	68a3      	ldr	r3, [r4, #8]
 8009792:	6822      	ldr	r2, [r4, #0]
 8009794:	1b9b      	subs	r3, r3, r6
 8009796:	4432      	add	r2, r6
 8009798:	60a3      	str	r3, [r4, #8]
 800979a:	6022      	str	r2, [r4, #0]
 800979c:	2000      	movs	r0, #0
 800979e:	e7db      	b.n	8009758 <__ssputs_r+0x58>
 80097a0:	462a      	mov	r2, r5
 80097a2:	f000 fb6d 	bl	8009e80 <_realloc_r>
 80097a6:	4606      	mov	r6, r0
 80097a8:	2800      	cmp	r0, #0
 80097aa:	d1e1      	bne.n	8009770 <__ssputs_r+0x70>
 80097ac:	6921      	ldr	r1, [r4, #16]
 80097ae:	4650      	mov	r0, sl
 80097b0:	f000 fabe 	bl	8009d30 <_free_r>
 80097b4:	e7c7      	b.n	8009746 <__ssputs_r+0x46>
	...

080097b8 <_svfiprintf_r>:
 80097b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097bc:	4698      	mov	r8, r3
 80097be:	898b      	ldrh	r3, [r1, #12]
 80097c0:	061b      	lsls	r3, r3, #24
 80097c2:	b09d      	sub	sp, #116	; 0x74
 80097c4:	4607      	mov	r7, r0
 80097c6:	460d      	mov	r5, r1
 80097c8:	4614      	mov	r4, r2
 80097ca:	d50e      	bpl.n	80097ea <_svfiprintf_r+0x32>
 80097cc:	690b      	ldr	r3, [r1, #16]
 80097ce:	b963      	cbnz	r3, 80097ea <_svfiprintf_r+0x32>
 80097d0:	2140      	movs	r1, #64	; 0x40
 80097d2:	f000 fafb 	bl	8009dcc <_malloc_r>
 80097d6:	6028      	str	r0, [r5, #0]
 80097d8:	6128      	str	r0, [r5, #16]
 80097da:	b920      	cbnz	r0, 80097e6 <_svfiprintf_r+0x2e>
 80097dc:	230c      	movs	r3, #12
 80097de:	603b      	str	r3, [r7, #0]
 80097e0:	f04f 30ff 	mov.w	r0, #4294967295
 80097e4:	e0d1      	b.n	800998a <_svfiprintf_r+0x1d2>
 80097e6:	2340      	movs	r3, #64	; 0x40
 80097e8:	616b      	str	r3, [r5, #20]
 80097ea:	2300      	movs	r3, #0
 80097ec:	9309      	str	r3, [sp, #36]	; 0x24
 80097ee:	2320      	movs	r3, #32
 80097f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80097f8:	2330      	movs	r3, #48	; 0x30
 80097fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80099a4 <_svfiprintf_r+0x1ec>
 80097fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009802:	f04f 0901 	mov.w	r9, #1
 8009806:	4623      	mov	r3, r4
 8009808:	469a      	mov	sl, r3
 800980a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800980e:	b10a      	cbz	r2, 8009814 <_svfiprintf_r+0x5c>
 8009810:	2a25      	cmp	r2, #37	; 0x25
 8009812:	d1f9      	bne.n	8009808 <_svfiprintf_r+0x50>
 8009814:	ebba 0b04 	subs.w	fp, sl, r4
 8009818:	d00b      	beq.n	8009832 <_svfiprintf_r+0x7a>
 800981a:	465b      	mov	r3, fp
 800981c:	4622      	mov	r2, r4
 800981e:	4629      	mov	r1, r5
 8009820:	4638      	mov	r0, r7
 8009822:	f7ff ff6d 	bl	8009700 <__ssputs_r>
 8009826:	3001      	adds	r0, #1
 8009828:	f000 80aa 	beq.w	8009980 <_svfiprintf_r+0x1c8>
 800982c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800982e:	445a      	add	r2, fp
 8009830:	9209      	str	r2, [sp, #36]	; 0x24
 8009832:	f89a 3000 	ldrb.w	r3, [sl]
 8009836:	2b00      	cmp	r3, #0
 8009838:	f000 80a2 	beq.w	8009980 <_svfiprintf_r+0x1c8>
 800983c:	2300      	movs	r3, #0
 800983e:	f04f 32ff 	mov.w	r2, #4294967295
 8009842:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009846:	f10a 0a01 	add.w	sl, sl, #1
 800984a:	9304      	str	r3, [sp, #16]
 800984c:	9307      	str	r3, [sp, #28]
 800984e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009852:	931a      	str	r3, [sp, #104]	; 0x68
 8009854:	4654      	mov	r4, sl
 8009856:	2205      	movs	r2, #5
 8009858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800985c:	4851      	ldr	r0, [pc, #324]	; (80099a4 <_svfiprintf_r+0x1ec>)
 800985e:	f7f6 fc8f 	bl	8000180 <memchr>
 8009862:	9a04      	ldr	r2, [sp, #16]
 8009864:	b9d8      	cbnz	r0, 800989e <_svfiprintf_r+0xe6>
 8009866:	06d0      	lsls	r0, r2, #27
 8009868:	bf44      	itt	mi
 800986a:	2320      	movmi	r3, #32
 800986c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009870:	0711      	lsls	r1, r2, #28
 8009872:	bf44      	itt	mi
 8009874:	232b      	movmi	r3, #43	; 0x2b
 8009876:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800987a:	f89a 3000 	ldrb.w	r3, [sl]
 800987e:	2b2a      	cmp	r3, #42	; 0x2a
 8009880:	d015      	beq.n	80098ae <_svfiprintf_r+0xf6>
 8009882:	9a07      	ldr	r2, [sp, #28]
 8009884:	4654      	mov	r4, sl
 8009886:	2000      	movs	r0, #0
 8009888:	f04f 0c0a 	mov.w	ip, #10
 800988c:	4621      	mov	r1, r4
 800988e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009892:	3b30      	subs	r3, #48	; 0x30
 8009894:	2b09      	cmp	r3, #9
 8009896:	d94e      	bls.n	8009936 <_svfiprintf_r+0x17e>
 8009898:	b1b0      	cbz	r0, 80098c8 <_svfiprintf_r+0x110>
 800989a:	9207      	str	r2, [sp, #28]
 800989c:	e014      	b.n	80098c8 <_svfiprintf_r+0x110>
 800989e:	eba0 0308 	sub.w	r3, r0, r8
 80098a2:	fa09 f303 	lsl.w	r3, r9, r3
 80098a6:	4313      	orrs	r3, r2
 80098a8:	9304      	str	r3, [sp, #16]
 80098aa:	46a2      	mov	sl, r4
 80098ac:	e7d2      	b.n	8009854 <_svfiprintf_r+0x9c>
 80098ae:	9b03      	ldr	r3, [sp, #12]
 80098b0:	1d19      	adds	r1, r3, #4
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	9103      	str	r1, [sp, #12]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	bfbb      	ittet	lt
 80098ba:	425b      	neglt	r3, r3
 80098bc:	f042 0202 	orrlt.w	r2, r2, #2
 80098c0:	9307      	strge	r3, [sp, #28]
 80098c2:	9307      	strlt	r3, [sp, #28]
 80098c4:	bfb8      	it	lt
 80098c6:	9204      	strlt	r2, [sp, #16]
 80098c8:	7823      	ldrb	r3, [r4, #0]
 80098ca:	2b2e      	cmp	r3, #46	; 0x2e
 80098cc:	d10c      	bne.n	80098e8 <_svfiprintf_r+0x130>
 80098ce:	7863      	ldrb	r3, [r4, #1]
 80098d0:	2b2a      	cmp	r3, #42	; 0x2a
 80098d2:	d135      	bne.n	8009940 <_svfiprintf_r+0x188>
 80098d4:	9b03      	ldr	r3, [sp, #12]
 80098d6:	1d1a      	adds	r2, r3, #4
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	9203      	str	r2, [sp, #12]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	bfb8      	it	lt
 80098e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80098e4:	3402      	adds	r4, #2
 80098e6:	9305      	str	r3, [sp, #20]
 80098e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80099b4 <_svfiprintf_r+0x1fc>
 80098ec:	7821      	ldrb	r1, [r4, #0]
 80098ee:	2203      	movs	r2, #3
 80098f0:	4650      	mov	r0, sl
 80098f2:	f7f6 fc45 	bl	8000180 <memchr>
 80098f6:	b140      	cbz	r0, 800990a <_svfiprintf_r+0x152>
 80098f8:	2340      	movs	r3, #64	; 0x40
 80098fa:	eba0 000a 	sub.w	r0, r0, sl
 80098fe:	fa03 f000 	lsl.w	r0, r3, r0
 8009902:	9b04      	ldr	r3, [sp, #16]
 8009904:	4303      	orrs	r3, r0
 8009906:	3401      	adds	r4, #1
 8009908:	9304      	str	r3, [sp, #16]
 800990a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800990e:	4826      	ldr	r0, [pc, #152]	; (80099a8 <_svfiprintf_r+0x1f0>)
 8009910:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009914:	2206      	movs	r2, #6
 8009916:	f7f6 fc33 	bl	8000180 <memchr>
 800991a:	2800      	cmp	r0, #0
 800991c:	d038      	beq.n	8009990 <_svfiprintf_r+0x1d8>
 800991e:	4b23      	ldr	r3, [pc, #140]	; (80099ac <_svfiprintf_r+0x1f4>)
 8009920:	bb1b      	cbnz	r3, 800996a <_svfiprintf_r+0x1b2>
 8009922:	9b03      	ldr	r3, [sp, #12]
 8009924:	3307      	adds	r3, #7
 8009926:	f023 0307 	bic.w	r3, r3, #7
 800992a:	3308      	adds	r3, #8
 800992c:	9303      	str	r3, [sp, #12]
 800992e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009930:	4433      	add	r3, r6
 8009932:	9309      	str	r3, [sp, #36]	; 0x24
 8009934:	e767      	b.n	8009806 <_svfiprintf_r+0x4e>
 8009936:	fb0c 3202 	mla	r2, ip, r2, r3
 800993a:	460c      	mov	r4, r1
 800993c:	2001      	movs	r0, #1
 800993e:	e7a5      	b.n	800988c <_svfiprintf_r+0xd4>
 8009940:	2300      	movs	r3, #0
 8009942:	3401      	adds	r4, #1
 8009944:	9305      	str	r3, [sp, #20]
 8009946:	4619      	mov	r1, r3
 8009948:	f04f 0c0a 	mov.w	ip, #10
 800994c:	4620      	mov	r0, r4
 800994e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009952:	3a30      	subs	r2, #48	; 0x30
 8009954:	2a09      	cmp	r2, #9
 8009956:	d903      	bls.n	8009960 <_svfiprintf_r+0x1a8>
 8009958:	2b00      	cmp	r3, #0
 800995a:	d0c5      	beq.n	80098e8 <_svfiprintf_r+0x130>
 800995c:	9105      	str	r1, [sp, #20]
 800995e:	e7c3      	b.n	80098e8 <_svfiprintf_r+0x130>
 8009960:	fb0c 2101 	mla	r1, ip, r1, r2
 8009964:	4604      	mov	r4, r0
 8009966:	2301      	movs	r3, #1
 8009968:	e7f0      	b.n	800994c <_svfiprintf_r+0x194>
 800996a:	ab03      	add	r3, sp, #12
 800996c:	9300      	str	r3, [sp, #0]
 800996e:	462a      	mov	r2, r5
 8009970:	4b0f      	ldr	r3, [pc, #60]	; (80099b0 <_svfiprintf_r+0x1f8>)
 8009972:	a904      	add	r1, sp, #16
 8009974:	4638      	mov	r0, r7
 8009976:	f3af 8000 	nop.w
 800997a:	1c42      	adds	r2, r0, #1
 800997c:	4606      	mov	r6, r0
 800997e:	d1d6      	bne.n	800992e <_svfiprintf_r+0x176>
 8009980:	89ab      	ldrh	r3, [r5, #12]
 8009982:	065b      	lsls	r3, r3, #25
 8009984:	f53f af2c 	bmi.w	80097e0 <_svfiprintf_r+0x28>
 8009988:	9809      	ldr	r0, [sp, #36]	; 0x24
 800998a:	b01d      	add	sp, #116	; 0x74
 800998c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009990:	ab03      	add	r3, sp, #12
 8009992:	9300      	str	r3, [sp, #0]
 8009994:	462a      	mov	r2, r5
 8009996:	4b06      	ldr	r3, [pc, #24]	; (80099b0 <_svfiprintf_r+0x1f8>)
 8009998:	a904      	add	r1, sp, #16
 800999a:	4638      	mov	r0, r7
 800999c:	f000 f87a 	bl	8009a94 <_printf_i>
 80099a0:	e7eb      	b.n	800997a <_svfiprintf_r+0x1c2>
 80099a2:	bf00      	nop
 80099a4:	0800a1b4 	.word	0x0800a1b4
 80099a8:	0800a1be 	.word	0x0800a1be
 80099ac:	00000000 	.word	0x00000000
 80099b0:	08009701 	.word	0x08009701
 80099b4:	0800a1ba 	.word	0x0800a1ba

080099b8 <_printf_common>:
 80099b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099bc:	4616      	mov	r6, r2
 80099be:	4699      	mov	r9, r3
 80099c0:	688a      	ldr	r2, [r1, #8]
 80099c2:	690b      	ldr	r3, [r1, #16]
 80099c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099c8:	4293      	cmp	r3, r2
 80099ca:	bfb8      	it	lt
 80099cc:	4613      	movlt	r3, r2
 80099ce:	6033      	str	r3, [r6, #0]
 80099d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099d4:	4607      	mov	r7, r0
 80099d6:	460c      	mov	r4, r1
 80099d8:	b10a      	cbz	r2, 80099de <_printf_common+0x26>
 80099da:	3301      	adds	r3, #1
 80099dc:	6033      	str	r3, [r6, #0]
 80099de:	6823      	ldr	r3, [r4, #0]
 80099e0:	0699      	lsls	r1, r3, #26
 80099e2:	bf42      	ittt	mi
 80099e4:	6833      	ldrmi	r3, [r6, #0]
 80099e6:	3302      	addmi	r3, #2
 80099e8:	6033      	strmi	r3, [r6, #0]
 80099ea:	6825      	ldr	r5, [r4, #0]
 80099ec:	f015 0506 	ands.w	r5, r5, #6
 80099f0:	d106      	bne.n	8009a00 <_printf_common+0x48>
 80099f2:	f104 0a19 	add.w	sl, r4, #25
 80099f6:	68e3      	ldr	r3, [r4, #12]
 80099f8:	6832      	ldr	r2, [r6, #0]
 80099fa:	1a9b      	subs	r3, r3, r2
 80099fc:	42ab      	cmp	r3, r5
 80099fe:	dc26      	bgt.n	8009a4e <_printf_common+0x96>
 8009a00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a04:	1e13      	subs	r3, r2, #0
 8009a06:	6822      	ldr	r2, [r4, #0]
 8009a08:	bf18      	it	ne
 8009a0a:	2301      	movne	r3, #1
 8009a0c:	0692      	lsls	r2, r2, #26
 8009a0e:	d42b      	bmi.n	8009a68 <_printf_common+0xb0>
 8009a10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a14:	4649      	mov	r1, r9
 8009a16:	4638      	mov	r0, r7
 8009a18:	47c0      	blx	r8
 8009a1a:	3001      	adds	r0, #1
 8009a1c:	d01e      	beq.n	8009a5c <_printf_common+0xa4>
 8009a1e:	6823      	ldr	r3, [r4, #0]
 8009a20:	68e5      	ldr	r5, [r4, #12]
 8009a22:	6832      	ldr	r2, [r6, #0]
 8009a24:	f003 0306 	and.w	r3, r3, #6
 8009a28:	2b04      	cmp	r3, #4
 8009a2a:	bf08      	it	eq
 8009a2c:	1aad      	subeq	r5, r5, r2
 8009a2e:	68a3      	ldr	r3, [r4, #8]
 8009a30:	6922      	ldr	r2, [r4, #16]
 8009a32:	bf0c      	ite	eq
 8009a34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a38:	2500      	movne	r5, #0
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	bfc4      	itt	gt
 8009a3e:	1a9b      	subgt	r3, r3, r2
 8009a40:	18ed      	addgt	r5, r5, r3
 8009a42:	2600      	movs	r6, #0
 8009a44:	341a      	adds	r4, #26
 8009a46:	42b5      	cmp	r5, r6
 8009a48:	d11a      	bne.n	8009a80 <_printf_common+0xc8>
 8009a4a:	2000      	movs	r0, #0
 8009a4c:	e008      	b.n	8009a60 <_printf_common+0xa8>
 8009a4e:	2301      	movs	r3, #1
 8009a50:	4652      	mov	r2, sl
 8009a52:	4649      	mov	r1, r9
 8009a54:	4638      	mov	r0, r7
 8009a56:	47c0      	blx	r8
 8009a58:	3001      	adds	r0, #1
 8009a5a:	d103      	bne.n	8009a64 <_printf_common+0xac>
 8009a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a64:	3501      	adds	r5, #1
 8009a66:	e7c6      	b.n	80099f6 <_printf_common+0x3e>
 8009a68:	18e1      	adds	r1, r4, r3
 8009a6a:	1c5a      	adds	r2, r3, #1
 8009a6c:	2030      	movs	r0, #48	; 0x30
 8009a6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a72:	4422      	add	r2, r4
 8009a74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a7c:	3302      	adds	r3, #2
 8009a7e:	e7c7      	b.n	8009a10 <_printf_common+0x58>
 8009a80:	2301      	movs	r3, #1
 8009a82:	4622      	mov	r2, r4
 8009a84:	4649      	mov	r1, r9
 8009a86:	4638      	mov	r0, r7
 8009a88:	47c0      	blx	r8
 8009a8a:	3001      	adds	r0, #1
 8009a8c:	d0e6      	beq.n	8009a5c <_printf_common+0xa4>
 8009a8e:	3601      	adds	r6, #1
 8009a90:	e7d9      	b.n	8009a46 <_printf_common+0x8e>
	...

08009a94 <_printf_i>:
 8009a94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a98:	460c      	mov	r4, r1
 8009a9a:	4691      	mov	r9, r2
 8009a9c:	7e27      	ldrb	r7, [r4, #24]
 8009a9e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009aa0:	2f78      	cmp	r7, #120	; 0x78
 8009aa2:	4680      	mov	r8, r0
 8009aa4:	469a      	mov	sl, r3
 8009aa6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009aaa:	d807      	bhi.n	8009abc <_printf_i+0x28>
 8009aac:	2f62      	cmp	r7, #98	; 0x62
 8009aae:	d80a      	bhi.n	8009ac6 <_printf_i+0x32>
 8009ab0:	2f00      	cmp	r7, #0
 8009ab2:	f000 80d8 	beq.w	8009c66 <_printf_i+0x1d2>
 8009ab6:	2f58      	cmp	r7, #88	; 0x58
 8009ab8:	f000 80a3 	beq.w	8009c02 <_printf_i+0x16e>
 8009abc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009ac0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ac4:	e03a      	b.n	8009b3c <_printf_i+0xa8>
 8009ac6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009aca:	2b15      	cmp	r3, #21
 8009acc:	d8f6      	bhi.n	8009abc <_printf_i+0x28>
 8009ace:	a001      	add	r0, pc, #4	; (adr r0, 8009ad4 <_printf_i+0x40>)
 8009ad0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009ad4:	08009b2d 	.word	0x08009b2d
 8009ad8:	08009b41 	.word	0x08009b41
 8009adc:	08009abd 	.word	0x08009abd
 8009ae0:	08009abd 	.word	0x08009abd
 8009ae4:	08009abd 	.word	0x08009abd
 8009ae8:	08009abd 	.word	0x08009abd
 8009aec:	08009b41 	.word	0x08009b41
 8009af0:	08009abd 	.word	0x08009abd
 8009af4:	08009abd 	.word	0x08009abd
 8009af8:	08009abd 	.word	0x08009abd
 8009afc:	08009abd 	.word	0x08009abd
 8009b00:	08009c4d 	.word	0x08009c4d
 8009b04:	08009b71 	.word	0x08009b71
 8009b08:	08009c2f 	.word	0x08009c2f
 8009b0c:	08009abd 	.word	0x08009abd
 8009b10:	08009abd 	.word	0x08009abd
 8009b14:	08009c6f 	.word	0x08009c6f
 8009b18:	08009abd 	.word	0x08009abd
 8009b1c:	08009b71 	.word	0x08009b71
 8009b20:	08009abd 	.word	0x08009abd
 8009b24:	08009abd 	.word	0x08009abd
 8009b28:	08009c37 	.word	0x08009c37
 8009b2c:	680b      	ldr	r3, [r1, #0]
 8009b2e:	1d1a      	adds	r2, r3, #4
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	600a      	str	r2, [r1, #0]
 8009b34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009b38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	e0a3      	b.n	8009c88 <_printf_i+0x1f4>
 8009b40:	6825      	ldr	r5, [r4, #0]
 8009b42:	6808      	ldr	r0, [r1, #0]
 8009b44:	062e      	lsls	r6, r5, #24
 8009b46:	f100 0304 	add.w	r3, r0, #4
 8009b4a:	d50a      	bpl.n	8009b62 <_printf_i+0xce>
 8009b4c:	6805      	ldr	r5, [r0, #0]
 8009b4e:	600b      	str	r3, [r1, #0]
 8009b50:	2d00      	cmp	r5, #0
 8009b52:	da03      	bge.n	8009b5c <_printf_i+0xc8>
 8009b54:	232d      	movs	r3, #45	; 0x2d
 8009b56:	426d      	negs	r5, r5
 8009b58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b5c:	485e      	ldr	r0, [pc, #376]	; (8009cd8 <_printf_i+0x244>)
 8009b5e:	230a      	movs	r3, #10
 8009b60:	e019      	b.n	8009b96 <_printf_i+0x102>
 8009b62:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009b66:	6805      	ldr	r5, [r0, #0]
 8009b68:	600b      	str	r3, [r1, #0]
 8009b6a:	bf18      	it	ne
 8009b6c:	b22d      	sxthne	r5, r5
 8009b6e:	e7ef      	b.n	8009b50 <_printf_i+0xbc>
 8009b70:	680b      	ldr	r3, [r1, #0]
 8009b72:	6825      	ldr	r5, [r4, #0]
 8009b74:	1d18      	adds	r0, r3, #4
 8009b76:	6008      	str	r0, [r1, #0]
 8009b78:	0628      	lsls	r0, r5, #24
 8009b7a:	d501      	bpl.n	8009b80 <_printf_i+0xec>
 8009b7c:	681d      	ldr	r5, [r3, #0]
 8009b7e:	e002      	b.n	8009b86 <_printf_i+0xf2>
 8009b80:	0669      	lsls	r1, r5, #25
 8009b82:	d5fb      	bpl.n	8009b7c <_printf_i+0xe8>
 8009b84:	881d      	ldrh	r5, [r3, #0]
 8009b86:	4854      	ldr	r0, [pc, #336]	; (8009cd8 <_printf_i+0x244>)
 8009b88:	2f6f      	cmp	r7, #111	; 0x6f
 8009b8a:	bf0c      	ite	eq
 8009b8c:	2308      	moveq	r3, #8
 8009b8e:	230a      	movne	r3, #10
 8009b90:	2100      	movs	r1, #0
 8009b92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b96:	6866      	ldr	r6, [r4, #4]
 8009b98:	60a6      	str	r6, [r4, #8]
 8009b9a:	2e00      	cmp	r6, #0
 8009b9c:	bfa2      	ittt	ge
 8009b9e:	6821      	ldrge	r1, [r4, #0]
 8009ba0:	f021 0104 	bicge.w	r1, r1, #4
 8009ba4:	6021      	strge	r1, [r4, #0]
 8009ba6:	b90d      	cbnz	r5, 8009bac <_printf_i+0x118>
 8009ba8:	2e00      	cmp	r6, #0
 8009baa:	d04d      	beq.n	8009c48 <_printf_i+0x1b4>
 8009bac:	4616      	mov	r6, r2
 8009bae:	fbb5 f1f3 	udiv	r1, r5, r3
 8009bb2:	fb03 5711 	mls	r7, r3, r1, r5
 8009bb6:	5dc7      	ldrb	r7, [r0, r7]
 8009bb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009bbc:	462f      	mov	r7, r5
 8009bbe:	42bb      	cmp	r3, r7
 8009bc0:	460d      	mov	r5, r1
 8009bc2:	d9f4      	bls.n	8009bae <_printf_i+0x11a>
 8009bc4:	2b08      	cmp	r3, #8
 8009bc6:	d10b      	bne.n	8009be0 <_printf_i+0x14c>
 8009bc8:	6823      	ldr	r3, [r4, #0]
 8009bca:	07df      	lsls	r7, r3, #31
 8009bcc:	d508      	bpl.n	8009be0 <_printf_i+0x14c>
 8009bce:	6923      	ldr	r3, [r4, #16]
 8009bd0:	6861      	ldr	r1, [r4, #4]
 8009bd2:	4299      	cmp	r1, r3
 8009bd4:	bfde      	ittt	le
 8009bd6:	2330      	movle	r3, #48	; 0x30
 8009bd8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009bdc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009be0:	1b92      	subs	r2, r2, r6
 8009be2:	6122      	str	r2, [r4, #16]
 8009be4:	f8cd a000 	str.w	sl, [sp]
 8009be8:	464b      	mov	r3, r9
 8009bea:	aa03      	add	r2, sp, #12
 8009bec:	4621      	mov	r1, r4
 8009bee:	4640      	mov	r0, r8
 8009bf0:	f7ff fee2 	bl	80099b8 <_printf_common>
 8009bf4:	3001      	adds	r0, #1
 8009bf6:	d14c      	bne.n	8009c92 <_printf_i+0x1fe>
 8009bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bfc:	b004      	add	sp, #16
 8009bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c02:	4835      	ldr	r0, [pc, #212]	; (8009cd8 <_printf_i+0x244>)
 8009c04:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009c08:	6823      	ldr	r3, [r4, #0]
 8009c0a:	680e      	ldr	r6, [r1, #0]
 8009c0c:	061f      	lsls	r7, r3, #24
 8009c0e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009c12:	600e      	str	r6, [r1, #0]
 8009c14:	d514      	bpl.n	8009c40 <_printf_i+0x1ac>
 8009c16:	07d9      	lsls	r1, r3, #31
 8009c18:	bf44      	itt	mi
 8009c1a:	f043 0320 	orrmi.w	r3, r3, #32
 8009c1e:	6023      	strmi	r3, [r4, #0]
 8009c20:	b91d      	cbnz	r5, 8009c2a <_printf_i+0x196>
 8009c22:	6823      	ldr	r3, [r4, #0]
 8009c24:	f023 0320 	bic.w	r3, r3, #32
 8009c28:	6023      	str	r3, [r4, #0]
 8009c2a:	2310      	movs	r3, #16
 8009c2c:	e7b0      	b.n	8009b90 <_printf_i+0xfc>
 8009c2e:	6823      	ldr	r3, [r4, #0]
 8009c30:	f043 0320 	orr.w	r3, r3, #32
 8009c34:	6023      	str	r3, [r4, #0]
 8009c36:	2378      	movs	r3, #120	; 0x78
 8009c38:	4828      	ldr	r0, [pc, #160]	; (8009cdc <_printf_i+0x248>)
 8009c3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c3e:	e7e3      	b.n	8009c08 <_printf_i+0x174>
 8009c40:	065e      	lsls	r6, r3, #25
 8009c42:	bf48      	it	mi
 8009c44:	b2ad      	uxthmi	r5, r5
 8009c46:	e7e6      	b.n	8009c16 <_printf_i+0x182>
 8009c48:	4616      	mov	r6, r2
 8009c4a:	e7bb      	b.n	8009bc4 <_printf_i+0x130>
 8009c4c:	680b      	ldr	r3, [r1, #0]
 8009c4e:	6826      	ldr	r6, [r4, #0]
 8009c50:	6960      	ldr	r0, [r4, #20]
 8009c52:	1d1d      	adds	r5, r3, #4
 8009c54:	600d      	str	r5, [r1, #0]
 8009c56:	0635      	lsls	r5, r6, #24
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	d501      	bpl.n	8009c60 <_printf_i+0x1cc>
 8009c5c:	6018      	str	r0, [r3, #0]
 8009c5e:	e002      	b.n	8009c66 <_printf_i+0x1d2>
 8009c60:	0671      	lsls	r1, r6, #25
 8009c62:	d5fb      	bpl.n	8009c5c <_printf_i+0x1c8>
 8009c64:	8018      	strh	r0, [r3, #0]
 8009c66:	2300      	movs	r3, #0
 8009c68:	6123      	str	r3, [r4, #16]
 8009c6a:	4616      	mov	r6, r2
 8009c6c:	e7ba      	b.n	8009be4 <_printf_i+0x150>
 8009c6e:	680b      	ldr	r3, [r1, #0]
 8009c70:	1d1a      	adds	r2, r3, #4
 8009c72:	600a      	str	r2, [r1, #0]
 8009c74:	681e      	ldr	r6, [r3, #0]
 8009c76:	6862      	ldr	r2, [r4, #4]
 8009c78:	2100      	movs	r1, #0
 8009c7a:	4630      	mov	r0, r6
 8009c7c:	f7f6 fa80 	bl	8000180 <memchr>
 8009c80:	b108      	cbz	r0, 8009c86 <_printf_i+0x1f2>
 8009c82:	1b80      	subs	r0, r0, r6
 8009c84:	6060      	str	r0, [r4, #4]
 8009c86:	6863      	ldr	r3, [r4, #4]
 8009c88:	6123      	str	r3, [r4, #16]
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c90:	e7a8      	b.n	8009be4 <_printf_i+0x150>
 8009c92:	6923      	ldr	r3, [r4, #16]
 8009c94:	4632      	mov	r2, r6
 8009c96:	4649      	mov	r1, r9
 8009c98:	4640      	mov	r0, r8
 8009c9a:	47d0      	blx	sl
 8009c9c:	3001      	adds	r0, #1
 8009c9e:	d0ab      	beq.n	8009bf8 <_printf_i+0x164>
 8009ca0:	6823      	ldr	r3, [r4, #0]
 8009ca2:	079b      	lsls	r3, r3, #30
 8009ca4:	d413      	bmi.n	8009cce <_printf_i+0x23a>
 8009ca6:	68e0      	ldr	r0, [r4, #12]
 8009ca8:	9b03      	ldr	r3, [sp, #12]
 8009caa:	4298      	cmp	r0, r3
 8009cac:	bfb8      	it	lt
 8009cae:	4618      	movlt	r0, r3
 8009cb0:	e7a4      	b.n	8009bfc <_printf_i+0x168>
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	4632      	mov	r2, r6
 8009cb6:	4649      	mov	r1, r9
 8009cb8:	4640      	mov	r0, r8
 8009cba:	47d0      	blx	sl
 8009cbc:	3001      	adds	r0, #1
 8009cbe:	d09b      	beq.n	8009bf8 <_printf_i+0x164>
 8009cc0:	3501      	adds	r5, #1
 8009cc2:	68e3      	ldr	r3, [r4, #12]
 8009cc4:	9903      	ldr	r1, [sp, #12]
 8009cc6:	1a5b      	subs	r3, r3, r1
 8009cc8:	42ab      	cmp	r3, r5
 8009cca:	dcf2      	bgt.n	8009cb2 <_printf_i+0x21e>
 8009ccc:	e7eb      	b.n	8009ca6 <_printf_i+0x212>
 8009cce:	2500      	movs	r5, #0
 8009cd0:	f104 0619 	add.w	r6, r4, #25
 8009cd4:	e7f5      	b.n	8009cc2 <_printf_i+0x22e>
 8009cd6:	bf00      	nop
 8009cd8:	0800a1c5 	.word	0x0800a1c5
 8009cdc:	0800a1d6 	.word	0x0800a1d6

08009ce0 <memcpy>:
 8009ce0:	440a      	add	r2, r1
 8009ce2:	4291      	cmp	r1, r2
 8009ce4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ce8:	d100      	bne.n	8009cec <memcpy+0xc>
 8009cea:	4770      	bx	lr
 8009cec:	b510      	push	{r4, lr}
 8009cee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cf6:	4291      	cmp	r1, r2
 8009cf8:	d1f9      	bne.n	8009cee <memcpy+0xe>
 8009cfa:	bd10      	pop	{r4, pc}

08009cfc <memmove>:
 8009cfc:	4288      	cmp	r0, r1
 8009cfe:	b510      	push	{r4, lr}
 8009d00:	eb01 0402 	add.w	r4, r1, r2
 8009d04:	d902      	bls.n	8009d0c <memmove+0x10>
 8009d06:	4284      	cmp	r4, r0
 8009d08:	4623      	mov	r3, r4
 8009d0a:	d807      	bhi.n	8009d1c <memmove+0x20>
 8009d0c:	1e43      	subs	r3, r0, #1
 8009d0e:	42a1      	cmp	r1, r4
 8009d10:	d008      	beq.n	8009d24 <memmove+0x28>
 8009d12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d1a:	e7f8      	b.n	8009d0e <memmove+0x12>
 8009d1c:	4402      	add	r2, r0
 8009d1e:	4601      	mov	r1, r0
 8009d20:	428a      	cmp	r2, r1
 8009d22:	d100      	bne.n	8009d26 <memmove+0x2a>
 8009d24:	bd10      	pop	{r4, pc}
 8009d26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d2e:	e7f7      	b.n	8009d20 <memmove+0x24>

08009d30 <_free_r>:
 8009d30:	b538      	push	{r3, r4, r5, lr}
 8009d32:	4605      	mov	r5, r0
 8009d34:	2900      	cmp	r1, #0
 8009d36:	d045      	beq.n	8009dc4 <_free_r+0x94>
 8009d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d3c:	1f0c      	subs	r4, r1, #4
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	bfb8      	it	lt
 8009d42:	18e4      	addlt	r4, r4, r3
 8009d44:	f000 f8d2 	bl	8009eec <__malloc_lock>
 8009d48:	4a1f      	ldr	r2, [pc, #124]	; (8009dc8 <_free_r+0x98>)
 8009d4a:	6813      	ldr	r3, [r2, #0]
 8009d4c:	4610      	mov	r0, r2
 8009d4e:	b933      	cbnz	r3, 8009d5e <_free_r+0x2e>
 8009d50:	6063      	str	r3, [r4, #4]
 8009d52:	6014      	str	r4, [r2, #0]
 8009d54:	4628      	mov	r0, r5
 8009d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d5a:	f000 b8cd 	b.w	8009ef8 <__malloc_unlock>
 8009d5e:	42a3      	cmp	r3, r4
 8009d60:	d90b      	bls.n	8009d7a <_free_r+0x4a>
 8009d62:	6821      	ldr	r1, [r4, #0]
 8009d64:	1862      	adds	r2, r4, r1
 8009d66:	4293      	cmp	r3, r2
 8009d68:	bf04      	itt	eq
 8009d6a:	681a      	ldreq	r2, [r3, #0]
 8009d6c:	685b      	ldreq	r3, [r3, #4]
 8009d6e:	6063      	str	r3, [r4, #4]
 8009d70:	bf04      	itt	eq
 8009d72:	1852      	addeq	r2, r2, r1
 8009d74:	6022      	streq	r2, [r4, #0]
 8009d76:	6004      	str	r4, [r0, #0]
 8009d78:	e7ec      	b.n	8009d54 <_free_r+0x24>
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	b10b      	cbz	r3, 8009d84 <_free_r+0x54>
 8009d80:	42a3      	cmp	r3, r4
 8009d82:	d9fa      	bls.n	8009d7a <_free_r+0x4a>
 8009d84:	6811      	ldr	r1, [r2, #0]
 8009d86:	1850      	adds	r0, r2, r1
 8009d88:	42a0      	cmp	r0, r4
 8009d8a:	d10b      	bne.n	8009da4 <_free_r+0x74>
 8009d8c:	6820      	ldr	r0, [r4, #0]
 8009d8e:	4401      	add	r1, r0
 8009d90:	1850      	adds	r0, r2, r1
 8009d92:	4283      	cmp	r3, r0
 8009d94:	6011      	str	r1, [r2, #0]
 8009d96:	d1dd      	bne.n	8009d54 <_free_r+0x24>
 8009d98:	6818      	ldr	r0, [r3, #0]
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	6053      	str	r3, [r2, #4]
 8009d9e:	4401      	add	r1, r0
 8009da0:	6011      	str	r1, [r2, #0]
 8009da2:	e7d7      	b.n	8009d54 <_free_r+0x24>
 8009da4:	d902      	bls.n	8009dac <_free_r+0x7c>
 8009da6:	230c      	movs	r3, #12
 8009da8:	602b      	str	r3, [r5, #0]
 8009daa:	e7d3      	b.n	8009d54 <_free_r+0x24>
 8009dac:	6820      	ldr	r0, [r4, #0]
 8009dae:	1821      	adds	r1, r4, r0
 8009db0:	428b      	cmp	r3, r1
 8009db2:	bf04      	itt	eq
 8009db4:	6819      	ldreq	r1, [r3, #0]
 8009db6:	685b      	ldreq	r3, [r3, #4]
 8009db8:	6063      	str	r3, [r4, #4]
 8009dba:	bf04      	itt	eq
 8009dbc:	1809      	addeq	r1, r1, r0
 8009dbe:	6021      	streq	r1, [r4, #0]
 8009dc0:	6054      	str	r4, [r2, #4]
 8009dc2:	e7c7      	b.n	8009d54 <_free_r+0x24>
 8009dc4:	bd38      	pop	{r3, r4, r5, pc}
 8009dc6:	bf00      	nop
 8009dc8:	200002d4 	.word	0x200002d4

08009dcc <_malloc_r>:
 8009dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dce:	1ccd      	adds	r5, r1, #3
 8009dd0:	f025 0503 	bic.w	r5, r5, #3
 8009dd4:	3508      	adds	r5, #8
 8009dd6:	2d0c      	cmp	r5, #12
 8009dd8:	bf38      	it	cc
 8009dda:	250c      	movcc	r5, #12
 8009ddc:	2d00      	cmp	r5, #0
 8009dde:	4606      	mov	r6, r0
 8009de0:	db01      	blt.n	8009de6 <_malloc_r+0x1a>
 8009de2:	42a9      	cmp	r1, r5
 8009de4:	d903      	bls.n	8009dee <_malloc_r+0x22>
 8009de6:	230c      	movs	r3, #12
 8009de8:	6033      	str	r3, [r6, #0]
 8009dea:	2000      	movs	r0, #0
 8009dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dee:	f000 f87d 	bl	8009eec <__malloc_lock>
 8009df2:	4921      	ldr	r1, [pc, #132]	; (8009e78 <_malloc_r+0xac>)
 8009df4:	680a      	ldr	r2, [r1, #0]
 8009df6:	4614      	mov	r4, r2
 8009df8:	b99c      	cbnz	r4, 8009e22 <_malloc_r+0x56>
 8009dfa:	4f20      	ldr	r7, [pc, #128]	; (8009e7c <_malloc_r+0xb0>)
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	b923      	cbnz	r3, 8009e0a <_malloc_r+0x3e>
 8009e00:	4621      	mov	r1, r4
 8009e02:	4630      	mov	r0, r6
 8009e04:	f000 f862 	bl	8009ecc <_sbrk_r>
 8009e08:	6038      	str	r0, [r7, #0]
 8009e0a:	4629      	mov	r1, r5
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	f000 f85d 	bl	8009ecc <_sbrk_r>
 8009e12:	1c43      	adds	r3, r0, #1
 8009e14:	d123      	bne.n	8009e5e <_malloc_r+0x92>
 8009e16:	230c      	movs	r3, #12
 8009e18:	6033      	str	r3, [r6, #0]
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	f000 f86c 	bl	8009ef8 <__malloc_unlock>
 8009e20:	e7e3      	b.n	8009dea <_malloc_r+0x1e>
 8009e22:	6823      	ldr	r3, [r4, #0]
 8009e24:	1b5b      	subs	r3, r3, r5
 8009e26:	d417      	bmi.n	8009e58 <_malloc_r+0x8c>
 8009e28:	2b0b      	cmp	r3, #11
 8009e2a:	d903      	bls.n	8009e34 <_malloc_r+0x68>
 8009e2c:	6023      	str	r3, [r4, #0]
 8009e2e:	441c      	add	r4, r3
 8009e30:	6025      	str	r5, [r4, #0]
 8009e32:	e004      	b.n	8009e3e <_malloc_r+0x72>
 8009e34:	6863      	ldr	r3, [r4, #4]
 8009e36:	42a2      	cmp	r2, r4
 8009e38:	bf0c      	ite	eq
 8009e3a:	600b      	streq	r3, [r1, #0]
 8009e3c:	6053      	strne	r3, [r2, #4]
 8009e3e:	4630      	mov	r0, r6
 8009e40:	f000 f85a 	bl	8009ef8 <__malloc_unlock>
 8009e44:	f104 000b 	add.w	r0, r4, #11
 8009e48:	1d23      	adds	r3, r4, #4
 8009e4a:	f020 0007 	bic.w	r0, r0, #7
 8009e4e:	1ac2      	subs	r2, r0, r3
 8009e50:	d0cc      	beq.n	8009dec <_malloc_r+0x20>
 8009e52:	1a1b      	subs	r3, r3, r0
 8009e54:	50a3      	str	r3, [r4, r2]
 8009e56:	e7c9      	b.n	8009dec <_malloc_r+0x20>
 8009e58:	4622      	mov	r2, r4
 8009e5a:	6864      	ldr	r4, [r4, #4]
 8009e5c:	e7cc      	b.n	8009df8 <_malloc_r+0x2c>
 8009e5e:	1cc4      	adds	r4, r0, #3
 8009e60:	f024 0403 	bic.w	r4, r4, #3
 8009e64:	42a0      	cmp	r0, r4
 8009e66:	d0e3      	beq.n	8009e30 <_malloc_r+0x64>
 8009e68:	1a21      	subs	r1, r4, r0
 8009e6a:	4630      	mov	r0, r6
 8009e6c:	f000 f82e 	bl	8009ecc <_sbrk_r>
 8009e70:	3001      	adds	r0, #1
 8009e72:	d1dd      	bne.n	8009e30 <_malloc_r+0x64>
 8009e74:	e7cf      	b.n	8009e16 <_malloc_r+0x4a>
 8009e76:	bf00      	nop
 8009e78:	200002d4 	.word	0x200002d4
 8009e7c:	200002d8 	.word	0x200002d8

08009e80 <_realloc_r>:
 8009e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e82:	4607      	mov	r7, r0
 8009e84:	4614      	mov	r4, r2
 8009e86:	460e      	mov	r6, r1
 8009e88:	b921      	cbnz	r1, 8009e94 <_realloc_r+0x14>
 8009e8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009e8e:	4611      	mov	r1, r2
 8009e90:	f7ff bf9c 	b.w	8009dcc <_malloc_r>
 8009e94:	b922      	cbnz	r2, 8009ea0 <_realloc_r+0x20>
 8009e96:	f7ff ff4b 	bl	8009d30 <_free_r>
 8009e9a:	4625      	mov	r5, r4
 8009e9c:	4628      	mov	r0, r5
 8009e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ea0:	f000 f830 	bl	8009f04 <_malloc_usable_size_r>
 8009ea4:	42a0      	cmp	r0, r4
 8009ea6:	d20f      	bcs.n	8009ec8 <_realloc_r+0x48>
 8009ea8:	4621      	mov	r1, r4
 8009eaa:	4638      	mov	r0, r7
 8009eac:	f7ff ff8e 	bl	8009dcc <_malloc_r>
 8009eb0:	4605      	mov	r5, r0
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	d0f2      	beq.n	8009e9c <_realloc_r+0x1c>
 8009eb6:	4631      	mov	r1, r6
 8009eb8:	4622      	mov	r2, r4
 8009eba:	f7ff ff11 	bl	8009ce0 <memcpy>
 8009ebe:	4631      	mov	r1, r6
 8009ec0:	4638      	mov	r0, r7
 8009ec2:	f7ff ff35 	bl	8009d30 <_free_r>
 8009ec6:	e7e9      	b.n	8009e9c <_realloc_r+0x1c>
 8009ec8:	4635      	mov	r5, r6
 8009eca:	e7e7      	b.n	8009e9c <_realloc_r+0x1c>

08009ecc <_sbrk_r>:
 8009ecc:	b538      	push	{r3, r4, r5, lr}
 8009ece:	4d06      	ldr	r5, [pc, #24]	; (8009ee8 <_sbrk_r+0x1c>)
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	4604      	mov	r4, r0
 8009ed4:	4608      	mov	r0, r1
 8009ed6:	602b      	str	r3, [r5, #0]
 8009ed8:	f7f6 fe36 	bl	8000b48 <_sbrk>
 8009edc:	1c43      	adds	r3, r0, #1
 8009ede:	d102      	bne.n	8009ee6 <_sbrk_r+0x1a>
 8009ee0:	682b      	ldr	r3, [r5, #0]
 8009ee2:	b103      	cbz	r3, 8009ee6 <_sbrk_r+0x1a>
 8009ee4:	6023      	str	r3, [r4, #0]
 8009ee6:	bd38      	pop	{r3, r4, r5, pc}
 8009ee8:	2000061c 	.word	0x2000061c

08009eec <__malloc_lock>:
 8009eec:	4801      	ldr	r0, [pc, #4]	; (8009ef4 <__malloc_lock+0x8>)
 8009eee:	f000 b811 	b.w	8009f14 <__retarget_lock_acquire_recursive>
 8009ef2:	bf00      	nop
 8009ef4:	20000624 	.word	0x20000624

08009ef8 <__malloc_unlock>:
 8009ef8:	4801      	ldr	r0, [pc, #4]	; (8009f00 <__malloc_unlock+0x8>)
 8009efa:	f000 b80c 	b.w	8009f16 <__retarget_lock_release_recursive>
 8009efe:	bf00      	nop
 8009f00:	20000624 	.word	0x20000624

08009f04 <_malloc_usable_size_r>:
 8009f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f08:	1f18      	subs	r0, r3, #4
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	bfbc      	itt	lt
 8009f0e:	580b      	ldrlt	r3, [r1, r0]
 8009f10:	18c0      	addlt	r0, r0, r3
 8009f12:	4770      	bx	lr

08009f14 <__retarget_lock_acquire_recursive>:
 8009f14:	4770      	bx	lr

08009f16 <__retarget_lock_release_recursive>:
 8009f16:	4770      	bx	lr

08009f18 <_init>:
 8009f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1a:	bf00      	nop
 8009f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f1e:	bc08      	pop	{r3}
 8009f20:	469e      	mov	lr, r3
 8009f22:	4770      	bx	lr

08009f24 <_fini>:
 8009f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f26:	bf00      	nop
 8009f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f2a:	bc08      	pop	{r3}
 8009f2c:	469e      	mov	lr, r3
 8009f2e:	4770      	bx	lr
