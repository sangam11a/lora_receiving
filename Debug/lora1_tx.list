
lora1_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d14  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  08009e54  08009e54  00019e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a330  0800a330  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a330  0800a330  0001a330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a338  0800a338  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a338  0800a338  0001a338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a33c  0800a33c  0001a33c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  20000074  0800a3b4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004dc  0800a3b4  000204dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021a68  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043f4  00000000  00000000  00041b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001860  00000000  00000000  00045f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016c0  00000000  00000000  00047760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fe3b  00000000  00000000  00048e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019207  00000000  00000000  00068c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b770e  00000000  00000000  00081e62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00139570  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000663c  00000000  00000000  001395c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000074 	.word	0x20000074
 800015c:	00000000 	.word	0x00000000
 8000160:	08009e3c 	.word	0x08009e3c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000078 	.word	0x20000078
 800017c:	08009e3c 	.word	0x08009e3c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96c 	b.w	8000510 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	468e      	mov	lr, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	f040 8082 	bne.w	8000366 <__udivmoddi4+0x116>
 8000262:	428a      	cmp	r2, r1
 8000264:	4617      	mov	r7, r2
 8000266:	d946      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000268:	fab2 f282 	clz	r2, r2
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x32>
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa05 f302 	lsl.w	r3, r5, r2
 8000276:	fa20 f101 	lsr.w	r1, r0, r1
 800027a:	4097      	lsls	r7, r2
 800027c:	ea41 0e03 	orr.w	lr, r1, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000286:	0c23      	lsrs	r3, r4, #16
 8000288:	fbbe fcf8 	udiv	ip, lr, r8
 800028c:	b2b9      	uxth	r1, r7
 800028e:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000292:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000296:	fb0c f001 	mul.w	r0, ip, r1
 800029a:	4298      	cmp	r0, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f10c 35ff 	add.w	r5, ip, #4294967295
 80002a4:	f080 8116 	bcs.w	80004d4 <__udivmoddi4+0x284>
 80002a8:	4298      	cmp	r0, r3
 80002aa:	f240 8113 	bls.w	80004d4 <__udivmoddi4+0x284>
 80002ae:	f1ac 0c02 	sub.w	ip, ip, #2
 80002b2:	443b      	add	r3, r7
 80002b4:	1a1b      	subs	r3, r3, r0
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f101 	mul.w	r1, r0, r1
 80002c8:	42a1      	cmp	r1, r4
 80002ca:	d909      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002cc:	193c      	adds	r4, r7, r4
 80002ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d2:	f080 8101 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002d6:	42a1      	cmp	r1, r4
 80002d8:	f240 80fe 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002dc:	3802      	subs	r0, #2
 80002de:	443c      	add	r4, r7
 80002e0:	1a64      	subs	r4, r4, r1
 80002e2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40d4      	lsrs	r4, r2
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d14f      	bne.n	80003a2 <__udivmoddi4+0x152>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c25      	lsrs	r5, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	42ab      	cmp	r3, r5
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	197d      	adds	r5, r7, r5
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	42ab      	cmp	r3, r5
 800032e:	f200 80e7 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000332:	4684      	mov	ip, r0
 8000334:	1aed      	subs	r5, r5, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb5 f0fe 	udiv	r0, r5, lr
 800033c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000340:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d7 	bhi.w	8000508 <__udivmoddi4+0x2b8>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7c0      	b.n	80002e8 <__udivmoddi4+0x98>
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80af 	beq.w	80004ce <__udivmoddi4+0x27e>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d14b      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0x13e>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80b7 	bhi.w	80004fc <__udivmoddi4+0x2ac>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0303 	sbc.w	r3, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	469e      	mov	lr, r3
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0aa      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800039c:	e9c6 4e00 	strd	r4, lr, [r6]
 80003a0:	e7a7      	b.n	80002f2 <__udivmoddi4+0xa2>
 80003a2:	f1c2 0c20 	rsb	ip, r2, #32
 80003a6:	fa01 f302 	lsl.w	r3, r1, r2
 80003aa:	4097      	lsls	r7, r2
 80003ac:	fa20 f00c 	lsr.w	r0, r0, ip
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	fa21 fc0c 	lsr.w	ip, r1, ip
 80003b8:	4318      	orrs	r0, r3
 80003ba:	fbbc f1fe 	udiv	r1, ip, lr
 80003be:	0c05      	lsrs	r5, r0, #16
 80003c0:	fb0e cc11 	mls	ip, lr, r1, ip
 80003c4:	fa1f f887 	uxth.w	r8, r7
 80003c8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80003cc:	fb01 f308 	mul.w	r3, r1, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	197d      	adds	r5, r7, r5
 80003da:	f101 3cff 	add.w	ip, r1, #4294967295
 80003de:	f080 808b 	bcs.w	80004f8 <__udivmoddi4+0x2a8>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	f240 8088 	bls.w	80004f8 <__udivmoddi4+0x2a8>
 80003e8:	3902      	subs	r1, #2
 80003ea:	443d      	add	r5, r7
 80003ec:	1aeb      	subs	r3, r5, r3
 80003ee:	b285      	uxth	r5, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	42ab      	cmp	r3, r5
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	197d      	adds	r5, r7, r5
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d271      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 800040c:	42ab      	cmp	r3, r5
 800040e:	d96f      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000410:	3802      	subs	r0, #2
 8000412:	443d      	add	r5, r7
 8000414:	1aeb      	subs	r3, r5, r3
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c1 0c20 	rsb	ip, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f70c 	lsr.w	r7, r2, ip
 8000426:	431f      	orrs	r7, r3
 8000428:	fa20 f40c 	lsr.w	r4, r0, ip
 800042c:	fa05 f301 	lsl.w	r3, r5, r1
 8000430:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000434:	fa25 f50c 	lsr.w	r5, r5, ip
 8000438:	431c      	orrs	r4, r3
 800043a:	0c23      	lsrs	r3, r4, #16
 800043c:	fbb5 f9fe 	udiv	r9, r5, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 5519 	mls	r5, lr, r9, r5
 8000448:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800044c:	fb09 fa08 	mul.w	sl, r9, r8
 8000450:	45aa      	cmp	sl, r5
 8000452:	fa02 f201 	lsl.w	r2, r2, r1
 8000456:	fa00 f301 	lsl.w	r3, r0, r1
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x21e>
 800045c:	197d      	adds	r5, r7, r5
 800045e:	f109 30ff 	add.w	r0, r9, #4294967295
 8000462:	d247      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 8000464:	45aa      	cmp	sl, r5
 8000466:	d945      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000468:	f1a9 0902 	sub.w	r9, r9, #2
 800046c:	443d      	add	r5, r7
 800046e:	eba5 050a 	sub.w	r5, r5, sl
 8000472:	b2a4      	uxth	r4, r4
 8000474:	fbb5 f0fe 	udiv	r0, r5, lr
 8000478:	fb0e 5510 	mls	r5, lr, r0, r5
 800047c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000480:	fb00 f808 	mul.w	r8, r0, r8
 8000484:	45a0      	cmp	r8, r4
 8000486:	d907      	bls.n	8000498 <__udivmoddi4+0x248>
 8000488:	193c      	adds	r4, r7, r4
 800048a:	f100 35ff 	add.w	r5, r0, #4294967295
 800048e:	d22d      	bcs.n	80004ec <__udivmoddi4+0x29c>
 8000490:	45a0      	cmp	r8, r4
 8000492:	d92b      	bls.n	80004ec <__udivmoddi4+0x29c>
 8000494:	3802      	subs	r0, #2
 8000496:	443c      	add	r4, r7
 8000498:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049c:	eba4 0408 	sub.w	r4, r4, r8
 80004a0:	fba0 8902 	umull	r8, r9, r0, r2
 80004a4:	454c      	cmp	r4, r9
 80004a6:	46c6      	mov	lr, r8
 80004a8:	464d      	mov	r5, r9
 80004aa:	d319      	bcc.n	80004e0 <__udivmoddi4+0x290>
 80004ac:	d016      	beq.n	80004dc <__udivmoddi4+0x28c>
 80004ae:	b15e      	cbz	r6, 80004c8 <__udivmoddi4+0x278>
 80004b0:	ebb3 020e 	subs.w	r2, r3, lr
 80004b4:	eb64 0405 	sbc.w	r4, r4, r5
 80004b8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004bc:	40ca      	lsrs	r2, r1
 80004be:	ea4c 0202 	orr.w	r2, ip, r2
 80004c2:	40cc      	lsrs	r4, r1
 80004c4:	e9c6 2400 	strd	r2, r4, [r6]
 80004c8:	2100      	movs	r1, #0
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	4631      	mov	r1, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e70e      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004d4:	46ac      	mov	ip, r5
 80004d6:	e6ed      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d8:	4618      	mov	r0, r3
 80004da:	e701      	b.n	80002e0 <__udivmoddi4+0x90>
 80004dc:	4543      	cmp	r3, r8
 80004de:	d2e6      	bcs.n	80004ae <__udivmoddi4+0x25e>
 80004e0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e4:	eb69 0507 	sbc.w	r5, r9, r7
 80004e8:	3801      	subs	r0, #1
 80004ea:	e7e0      	b.n	80004ae <__udivmoddi4+0x25e>
 80004ec:	4628      	mov	r0, r5
 80004ee:	e7d3      	b.n	8000498 <__udivmoddi4+0x248>
 80004f0:	4660      	mov	r0, ip
 80004f2:	e78f      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f4:	4681      	mov	r9, r0
 80004f6:	e7ba      	b.n	800046e <__udivmoddi4+0x21e>
 80004f8:	4661      	mov	r1, ip
 80004fa:	e777      	b.n	80003ec <__udivmoddi4+0x19c>
 80004fc:	4608      	mov	r0, r1
 80004fe:	e74b      	b.n	8000398 <__udivmoddi4+0x148>
 8000500:	f1ac 0c02 	sub.w	ip, ip, #2
 8000504:	443d      	add	r5, r7
 8000506:	e715      	b.n	8000334 <__udivmoddi4+0xe4>
 8000508:	3802      	subs	r0, #2
 800050a:	443c      	add	r4, r7
 800050c:	e726      	b.n	800035c <__udivmoddi4+0x10c>
 800050e:	bf00      	nop

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800051c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000520:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000522:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4313      	orrs	r3, r2
 800052a:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800052c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000530:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4013      	ands	r3, r2
 8000536:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000538:	68fb      	ldr	r3, [r7, #12]
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr

08000544 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000548:	2004      	movs	r0, #4
 800054a:	f7ff ffe3 	bl	8000514 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800054e:	2001      	movs	r0, #1
 8000550:	f7ff ffe0 	bl	8000514 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000554:	2200      	movs	r2, #0
 8000556:	2100      	movs	r1, #0
 8000558:	200b      	movs	r0, #11
 800055a:	f000 fe9c 	bl	8001296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800055e:	200b      	movs	r0, #11
 8000560:	f000 feb3 	bl	80012ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000564:	2200      	movs	r2, #0
 8000566:	2100      	movs	r1, #0
 8000568:	200c      	movs	r0, #12
 800056a:	f000 fe94 	bl	8001296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800056e:	200c      	movs	r0, #12
 8000570:	f000 feab 	bl	80012ca <HAL_NVIC_EnableIRQ>

}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}

08000578 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000584:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000586:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4313      	orrs	r3, r2
 800058e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000594:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4013      	ands	r3, r2
 800059a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800059c:	68fb      	ldr	r3, [r7, #12]
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr

080005a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ac:	2004      	movs	r0, #4
 80005ae:	f7ff ffe3 	bl	8000578 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b2:	2002      	movs	r0, #2
 80005b4:	f7ff ffe0 	bl	8000578 <LL_AHB2_GRP1_EnableClock>

}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}

080005bc <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80005c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005cc:	f023 0218 	bic.w	r2, r3, #24
 80005d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4313      	orrs	r3, r2
 80005d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr
	...

080005e8 <DioIrqHndlr>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void DioIrqHndlr(RadioIrqMasks_t radioIrq) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	80fb      	strh	r3, [r7, #6]
	switch (radioIrq) {
 80005f2:	88fb      	ldrh	r3, [r7, #6]
 80005f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005f8:	f000 8090 	beq.w	800071c <DioIrqHndlr+0x134>
 80005fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000600:	f300 8093 	bgt.w	800072a <DioIrqHndlr+0x142>
 8000604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000608:	f000 808a 	beq.w	8000720 <DioIrqHndlr+0x138>
 800060c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000610:	f300 808b 	bgt.w	800072a <DioIrqHndlr+0x142>
 8000614:	2b80      	cmp	r3, #128	; 0x80
 8000616:	f000 8085 	beq.w	8000724 <DioIrqHndlr+0x13c>
 800061a:	2b80      	cmp	r3, #128	; 0x80
 800061c:	f300 8085 	bgt.w	800072a <DioIrqHndlr+0x142>
 8000620:	2b20      	cmp	r3, #32
 8000622:	dc49      	bgt.n	80006b8 <DioIrqHndlr+0xd0>
 8000624:	2b00      	cmp	r3, #0
 8000626:	f2c0 8080 	blt.w	800072a <DioIrqHndlr+0x142>
 800062a:	2b20      	cmp	r3, #32
 800062c:	d87d      	bhi.n	800072a <DioIrqHndlr+0x142>
 800062e:	a201      	add	r2, pc, #4	; (adr r2, 8000634 <DioIrqHndlr+0x4c>)
 8000630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000634:	08000729 	.word	0x08000729
 8000638:	080006f1 	.word	0x080006f1
 800063c:	080006bd 	.word	0x080006bd
 8000640:	0800072b 	.word	0x0800072b
 8000644:	08000729 	.word	0x08000729
 8000648:	0800072b 	.word	0x0800072b
 800064c:	0800072b 	.word	0x0800072b
 8000650:	0800072b 	.word	0x0800072b
 8000654:	08000729 	.word	0x08000729
 8000658:	0800072b 	.word	0x0800072b
 800065c:	0800072b 	.word	0x0800072b
 8000660:	0800072b 	.word	0x0800072b
 8000664:	0800072b 	.word	0x0800072b
 8000668:	0800072b 	.word	0x0800072b
 800066c:	0800072b 	.word	0x0800072b
 8000670:	0800072b 	.word	0x0800072b
 8000674:	08000729 	.word	0x08000729
 8000678:	0800072b 	.word	0x0800072b
 800067c:	0800072b 	.word	0x0800072b
 8000680:	0800072b 	.word	0x0800072b
 8000684:	0800072b 	.word	0x0800072b
 8000688:	0800072b 	.word	0x0800072b
 800068c:	0800072b 	.word	0x0800072b
 8000690:	0800072b 	.word	0x0800072b
 8000694:	0800072b 	.word	0x0800072b
 8000698:	0800072b 	.word	0x0800072b
 800069c:	0800072b 	.word	0x0800072b
 80006a0:	0800072b 	.word	0x0800072b
 80006a4:	0800072b 	.word	0x0800072b
 80006a8:	0800072b 	.word	0x0800072b
 80006ac:	0800072b 	.word	0x0800072b
 80006b0:	0800072b 	.word	0x0800072b
 80006b4:	08000729 	.word	0x08000729
 80006b8:	2b40      	cmp	r3, #64	; 0x40
	case IRQ_HEADER_ERROR:

		break;
	case IRQ_CRC_ERROR:

		break;
 80006ba:	e036      	b.n	800072a <DioIrqHndlr+0x142>
		myprintf("DATA RECEIVED: \n");
 80006bc:	481d      	ldr	r0, [pc, #116]	; (8000734 <DioIrqHndlr+0x14c>)
 80006be:	f000 f85d 	bl	800077c <myprintf>
		SUBGRF_GetPayload(rx_buf, &p_len, PAYLOAD_LENGTH);
 80006c2:	2205      	movs	r2, #5
 80006c4:	491c      	ldr	r1, [pc, #112]	; (8000738 <DioIrqHndlr+0x150>)
 80006c6:	481d      	ldr	r0, [pc, #116]	; (800073c <DioIrqHndlr+0x154>)
 80006c8:	f007 fb2a 	bl	8007d20 <SUBGRF_GetPayload>
		myprintf("%s",rx_buf);
 80006cc:	491b      	ldr	r1, [pc, #108]	; (800073c <DioIrqHndlr+0x154>)
 80006ce:	481c      	ldr	r0, [pc, #112]	; (8000740 <DioIrqHndlr+0x158>)
 80006d0:	f000 f854 	bl	800077c <myprintf>
		HAL_UART_Transmit_IT(&huart1, rx_buf, CMD_LEN);
 80006d4:	2205      	movs	r2, #5
 80006d6:	4919      	ldr	r1, [pc, #100]	; (800073c <DioIrqHndlr+0x154>)
 80006d8:	481a      	ldr	r0, [pc, #104]	; (8000744 <DioIrqHndlr+0x15c>)
 80006da:	f003 fb3f 	bl	8003d5c <HAL_UART_Transmit_IT>
		SUBGRF_SetSwitch(1, RFSWITCH_RX);
 80006de:	2100      	movs	r1, #0
 80006e0:	2001      	movs	r0, #1
 80006e2:	f008 fa4f 	bl	8008b84 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 80006e6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80006ea:	f007 fca5 	bl	8008038 <SUBGRF_SetRxBoosted>
		break;
 80006ee:	e01c      	b.n	800072a <DioIrqHndlr+0x142>
		memset((char*) tx_buf, '\0', PAYLOAD_LENGTH);
 80006f0:	2205      	movs	r2, #5
 80006f2:	2100      	movs	r1, #0
 80006f4:	4814      	ldr	r0, [pc, #80]	; (8000748 <DioIrqHndlr+0x160>)
 80006f6:	f008 ff53 	bl	80095a0 <memset>
		SUBGRF_SetSwitch(1, RFSWITCH_RX); /*Set RF switch*/
 80006fa:	2100      	movs	r1, #0
 80006fc:	2001      	movs	r0, #1
 80006fe:	f008 fa41 	bl	8008b84 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 8000702:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8000706:	f007 fc97 	bl	8008038 <SUBGRF_SetRxBoosted>
		SUBGRF_SetRfFrequency(FREQ_402_MHZ);
 800070a:	4810      	ldr	r0, [pc, #64]	; (800074c <DioIrqHndlr+0x164>)
 800070c:	f007 fe64 	bl	80083d8 <SUBGRF_SetRfFrequency>
		memset(rx_buf, '\0', CMD_LEN); //Clear RX_BUFFER
 8000710:	2205      	movs	r2, #5
 8000712:	2100      	movs	r1, #0
 8000714:	4809      	ldr	r0, [pc, #36]	; (800073c <DioIrqHndlr+0x154>)
 8000716:	f008 ff43 	bl	80095a0 <memset>
		break;
 800071a:	e006      	b.n	800072a <DioIrqHndlr+0x142>
	case IRQ_CAD_DETECTED:

		break;
	case IRQ_RX_TX_TIMEOUT:

		break;
 800071c:	bf00      	nop
 800071e:	e004      	b.n	800072a <DioIrqHndlr+0x142>
		break;
 8000720:	bf00      	nop
 8000722:	e002      	b.n	800072a <DioIrqHndlr+0x142>
		break;
 8000724:	bf00      	nop
 8000726:	e000      	b.n	800072a <DioIrqHndlr+0x142>
		break;
 8000728:	bf00      	nop
	}
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	08009e54 	.word	0x08009e54
 8000738:	20000000 	.word	0x20000000
 800073c:	20000090 	.word	0x20000090
 8000740:	08009e68 	.word	0x08009e68
 8000744:	200003b0 	.word	0x200003b0
 8000748:	200002dc 	.word	0x200002dc
 800074c:	17fbc158 	.word	0x17fbc158

08000750 <buffersize>:


int buffersize(char *buff) {
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]

	while (*buff++ != '\0')
 800075c:	e002      	b.n	8000764 <buffersize+0x14>
		i++;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	3301      	adds	r3, #1
 8000762:	60fb      	str	r3, [r7, #12]
	while (*buff++ != '\0')
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	1c5a      	adds	r2, r3, #1
 8000768:	607a      	str	r2, [r7, #4]
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d1f6      	bne.n	800075e <buffersize+0xe>
	return i;
 8000770:	68fb      	ldr	r3, [r7, #12]
}
 8000772:	4618      	mov	r0, r3
 8000774:	3714      	adds	r7, #20
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr

0800077c <myprintf>:
void myprintf(const char *fmt, ...) {
 800077c:	b40f      	push	{r0, r1, r2, r3}
 800077e:	b580      	push	{r7, lr}
 8000780:	b082      	sub	sp, #8
 8000782:	af00      	add	r7, sp, #0
	static char temp[255];
	va_list args;
	va_start(args, fmt);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	693a      	ldr	r2, [r7, #16]
 800078e:	21ff      	movs	r1, #255	; 0xff
 8000790:	480a      	ldr	r0, [pc, #40]	; (80007bc <myprintf+0x40>)
 8000792:	f008 ff39 	bl	8009608 <vsniprintf>
	va_end(args);
	int len = buffersize(temp);
 8000796:	4809      	ldr	r0, [pc, #36]	; (80007bc <myprintf+0x40>)
 8000798:	f7ff ffda 	bl	8000750 <buffersize>
 800079c:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)temp, len, 5000);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80007a6:	4905      	ldr	r1, [pc, #20]	; (80007bc <myprintf+0x40>)
 80007a8:	4805      	ldr	r0, [pc, #20]	; (80007c0 <myprintf+0x44>)
 80007aa:	f003 fa40 	bl	8003c2e <HAL_UART_Transmit>

}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007b8:	b004      	add	sp, #16
 80007ba:	4770      	bx	lr
 80007bc:	20000098 	.word	0x20000098
 80007c0:	200003b0 	.word	0x200003b0

080007c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b090      	sub	sp, #64	; 0x40
 80007c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ca:	f000 fc21 	bl	8001010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ce:	f000 f8d5 	bl	800097c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d2:	f7ff fee9 	bl	80005a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80007d6:	f7ff feb5 	bl	8000544 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80007da:	f000 fae7 	bl	8000dac <MX_USART1_UART_Init>
  MX_SubGHz_Phy_Init();
 80007de:	f008 fc02 	bl	8008fe6 <MX_SubGHz_Phy_Init>
  /* USER CODE BEGIN 2 */



  PacketParams_t pkt_params;
  	pkt_params.PacketType = PACKET_TYPE_LORA;
 80007e2:	2301      	movs	r3, #1
 80007e4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  	pkt_params.Params.LoRa.PayloadLength = PAYLOAD_LENGTH;
 80007e8:	2305      	movs	r3, #5
 80007ea:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  	pkt_params.Params.LoRa.PreambleLength = 8;
 80007ee:	2308      	movs	r3, #8
 80007f0:	867b      	strh	r3, [r7, #50]	; 0x32
  	pkt_params.Params.LoRa.HeaderType = LORA_PACKET_IMPLICIT;
 80007f2:	2301      	movs	r3, #1
 80007f4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  	pkt_params.Params.LoRa.CrcMode = LORA_CRC_ON;
 80007f8:	2301      	movs	r3, #1
 80007fa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  	pkt_params.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 80007fe:	2300      	movs	r3, #0
 8000800:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  ModulationParams_t mod_params;
  	mod_params.PacketType = PACKET_TYPE_LORA;
 8000804:	2301      	movs	r3, #1
 8000806:	723b      	strb	r3, [r7, #8]
  	mod_params.Params.LoRa.Bandwidth = LORA_BW_031;
 8000808:	2302      	movs	r3, #2
 800080a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  	mod_params.Params.LoRa.SpreadingFactor = LORA_SF10;
 800080e:	230a      	movs	r3, #10
 8000810:	f887 3020 	strb.w	r3, [r7, #32]
  	mod_params.Params.LoRa.CodingRate = LORA_CR_4_8;
 8000814:	2304      	movs	r3, #4
 8000816:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  	mod_params.Params.LoRa.LowDatarateOptimize = 1;
 800081a:	2301      	movs	r3, #1
 800081c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23


	SUBGRF_Init(DioIrqHndlr);
 8000820:	4843      	ldr	r0, [pc, #268]	; (8000930 <main+0x16c>)
 8000822:	f007 fa1f 	bl	8007c64 <SUBGRF_Init>
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8000826:	2100      	movs	r1, #0
 8000828:	2000      	movs	r0, #0
 800082a:	f008 f80d 	bl	8008848 <SUBGRF_SetBufferBaseAddress>
	SUBGRF_SetPayload(tx_buf, CMD_LEN);
 800082e:	2105      	movs	r1, #5
 8000830:	4840      	ldr	r0, [pc, #256]	; (8000934 <main+0x170>)
 8000832:	f007 fa65 	bl	8007d00 <SUBGRF_SetPayload>
	SUBGRF_SetPacketParams(&pkt_params);
 8000836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083a:	4618      	mov	r0, r3
 800083c:	f007 ff66 	bl	800870c <SUBGRF_SetPacketParams>
	SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00,
 8000840:	4a3d      	ldr	r2, [pc, #244]	; (8000938 <main+0x174>)
 8000842:	463b      	mov	r3, r7
 8000844:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000848:	e883 0003 	stmia.w	r3, {r0, r1}
 800084c:	463b      	mov	r3, r7
 800084e:	4618      	mov	r0, r3
 8000850:	f007 fa9b 	bl	8007d8a <SUBGRF_SetSyncWord>
					0x00 });
	SUBGRF_SetWhiteningSeed(0x01FF);
 8000854:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000858:	f007 fae6 	bl	8007e28 <SUBGRF_SetWhiteningSeed>
	SUBGRF_SetRfFrequency(FREQ_402_MHZ);
 800085c:	4837      	ldr	r0, [pc, #220]	; (800093c <main+0x178>)
 800085e:	f007 fdbb 	bl	80083d8 <SUBGRF_SetRfFrequency>
	SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 8000862:	2301      	movs	r3, #1
 8000864:	2200      	movs	r2, #0
 8000866:	2107      	movs	r1, #7
 8000868:	2004      	movs	r0, #4
 800086a:	f007 fd37 	bl	80082dc <SUBGRF_SetPaConfig>
	SUBGRF_SetTxParams(RFO_HP, POWER, RAMP_TIME);
 800086e:	2205      	movs	r2, #5
 8000870:	2115      	movs	r1, #21
 8000872:	2002      	movs	r0, #2
 8000874:	f007 fe18 	bl	80084a8 <SUBGRF_SetTxParams>
	SUBGRF_SetModulationParams(&mod_params);
 8000878:	f107 0308 	add.w	r3, r7, #8
 800087c:	4618      	mov	r0, r3
 800087e:	f007 fe79 	bl	8008574 <SUBGRF_SetModulationParams>
	SUBGRF_SetDioIrqParams(
 8000882:	2300      	movs	r3, #0
 8000884:	2200      	movs	r2, #0
 8000886:	f240 210f 	movw	r1, #527	; 0x20f
 800088a:	f240 200f 	movw	r0, #527	; 0x20f
 800088e:	f007 fd47 	bl	8008320 <SUBGRF_SetDioIrqParams>
			IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID, IRQ_RADIO_NONE,
			IRQ_RADIO_NONE);


	myprintf("########## MUNAL SATELLITE COM: BEGIN ##########\r\n");
 8000892:	482b      	ldr	r0, [pc, #172]	; (8000940 <main+0x17c>)
 8000894:	f7ff ff72 	bl	800077c <myprintf>

	myprintf("########## COMMUNICATION PARAMETERS:  ##########\r\n");
 8000898:	482a      	ldr	r0, [pc, #168]	; (8000944 <main+0x180>)
 800089a:	f7ff ff6f 	bl	800077c <myprintf>
	myprintf("Modulation  LoRa PACKET	./\r\n");
 800089e:	482a      	ldr	r0, [pc, #168]	; (8000948 <main+0x184>)
 80008a0:	f7ff ff6c 	bl	800077c <myprintf>
	myprintf("FREQUENCY MODS: UPLINK FREQ: %lu\r\n DOWNLINK FREQ: %lu\r\n",
 80008a4:	4a29      	ldr	r2, [pc, #164]	; (800094c <main+0x188>)
 80008a6:	4925      	ldr	r1, [pc, #148]	; (800093c <main+0x178>)
 80008a8:	4829      	ldr	r0, [pc, #164]	; (8000950 <main+0x18c>)
 80008aa:	f7ff ff67 	bl	800077c <myprintf>
	FREQ_402_MHZ, FREQ_401_MHZ);
	myprintf(
 80008ae:	2315      	movs	r3, #21
 80008b0:	9300      	str	r3, [sp, #0]
 80008b2:	2300      	movs	r3, #0
 80008b4:	2207      	movs	r2, #7
 80008b6:	2104      	movs	r1, #4
 80008b8:	4826      	ldr	r0, [pc, #152]	; (8000954 <main+0x190>)
 80008ba:	f7ff ff5f 	bl	800077c <myprintf>
			"POWER CONFIG: PA_DUTY_CYCLE : %x, HP_MAX: %x,PA_SEL : %x \n\r POWER TX: %u dBm\n\r",
			PA_DUTY_CYCLE, HP_MAX, PA_SEL, POWER);
	myprintf("RECEVING BANDWIDTH: 	%d\n\r", mod_params.Params.LoRa.Bandwidth);
 80008be:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80008c2:	4619      	mov	r1, r3
 80008c4:	4824      	ldr	r0, [pc, #144]	; (8000958 <main+0x194>)
 80008c6:	f7ff ff59 	bl	800077c <myprintf>
	myprintf("Packet Type 			%d\n\r  ", pkt_params.PacketType);
 80008ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008ce:	4619      	mov	r1, r3
 80008d0:	4822      	ldr	r0, [pc, #136]	; (800095c <main+0x198>)
 80008d2:	f7ff ff53 	bl	800077c <myprintf>
	myprintf("PayloadLength 			%d\n\r  ", pkt_params.Params.LoRa.PayloadLength);
 80008d6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80008da:	4619      	mov	r1, r3
 80008dc:	4820      	ldr	r0, [pc, #128]	; (8000960 <main+0x19c>)
 80008de:	f7ff ff4d 	bl	800077c <myprintf>
	myprintf("PreambleLength 		%d\n\r", pkt_params.Params.LoRa.PreambleLength);
 80008e2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80008e4:	4619      	mov	r1, r3
 80008e6:	481f      	ldr	r0, [pc, #124]	; (8000964 <main+0x1a0>)
 80008e8:	f7ff ff48 	bl	800077c <myprintf>
	myprintf("PreambleMinDetect		%d\n\r",
			pkt_params.Params.Gfsk.PreambleMinDetect);
 80008ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
	myprintf("PreambleMinDetect		%d\n\r",
 80008f0:	4619      	mov	r1, r3
 80008f2:	481d      	ldr	r0, [pc, #116]	; (8000968 <main+0x1a4>)
 80008f4:	f7ff ff42 	bl	800077c <myprintf>
	myprintf("HeaderType 			%d\n\r", pkt_params.Params.LoRa.HeaderType);
 80008f8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80008fc:	4619      	mov	r1, r3
 80008fe:	481b      	ldr	r0, [pc, #108]	; (800096c <main+0x1a8>)
 8000900:	f7ff ff3c 	bl	800077c <myprintf>
	myprintf("__________________________________________________\r\n");
 8000904:	481a      	ldr	r0, [pc, #104]	; (8000970 <main+0x1ac>)
 8000906:	f7ff ff39 	bl	800077c <myprintf>
	myprintf("________________Waiting OBC DATA____________\r\n");
 800090a:	481a      	ldr	r0, [pc, #104]	; (8000974 <main+0x1b0>)
 800090c:	f7ff ff36 	bl	800077c <myprintf>

	SUBGRF_SetSwitch(RFO_HP, RFSWITCH_RX); /*Set RF switch*/
 8000910:	2100      	movs	r1, #0
 8000912:	2002      	movs	r0, #2
 8000914:	f008 f936 	bl	8008b84 <SUBGRF_SetSwitch>
	SUBGRF_SetRxBoosted(0xFFFFFF);
 8000918:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800091c:	f007 fb8c 	bl	8008038 <SUBGRF_SetRxBoosted>
	HAL_UART_Receive_IT(&huart1,tx_buf,sizeof(tx_buf));
 8000920:	2205      	movs	r2, #5
 8000922:	4904      	ldr	r1, [pc, #16]	; (8000934 <main+0x170>)
 8000924:	4814      	ldr	r0, [pc, #80]	; (8000978 <main+0x1b4>)
 8000926:	f003 fac1 	bl	8003eac <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 800092a:	f008 fb64 	bl	8008ff6 <MX_SubGHz_Phy_Process>
 800092e:	e7fc      	b.n	800092a <main+0x166>
 8000930:	080005e9 	.word	0x080005e9
 8000934:	200002dc 	.word	0x200002dc
 8000938:	0800a074 	.word	0x0800a074
 800093c:	17fbc158 	.word	0x17fbc158
 8000940:	08009e6c 	.word	0x08009e6c
 8000944:	08009ea0 	.word	0x08009ea0
 8000948:	08009ed4 	.word	0x08009ed4
 800094c:	17ec7f18 	.word	0x17ec7f18
 8000950:	08009ef4 	.word	0x08009ef4
 8000954:	08009f2c 	.word	0x08009f2c
 8000958:	08009f7c 	.word	0x08009f7c
 800095c:	08009f98 	.word	0x08009f98
 8000960:	08009fb0 	.word	0x08009fb0
 8000964:	08009fc8 	.word	0x08009fc8
 8000968:	08009fe0 	.word	0x08009fe0
 800096c:	08009ff8 	.word	0x08009ff8
 8000970:	0800a00c 	.word	0x0800a00c
 8000974:	0800a044 	.word	0x0800a044
 8000978:	200003b0 	.word	0x200003b0

0800097c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b09a      	sub	sp, #104	; 0x68
 8000980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000982:	f107 0320 	add.w	r3, r7, #32
 8000986:	2248      	movs	r2, #72	; 0x48
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f008 fe08 	bl	80095a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]
 800099e:	615a      	str	r2, [r3, #20]
 80009a0:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009a2:	f001 f8d5 	bl	8001b50 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f7ff fe08 	bl	80005bc <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ac:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <SystemClock_Config+0xac>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80009b4:	4a1c      	ldr	r2, [pc, #112]	; (8000a28 <SystemClock_Config+0xac>)
 80009b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ba:	6013      	str	r3, [r2, #0]
 80009bc:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <SystemClock_Config+0xac>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80009c8:	2324      	movs	r3, #36	; 0x24
 80009ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009cc:	2381      	movs	r3, #129	; 0x81
 80009ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009d0:	2301      	movs	r3, #1
 80009d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80009d8:	23b0      	movs	r3, #176	; 0xb0
 80009da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009dc:	2300      	movs	r3, #0
 80009de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e0:	f107 0320 	add.w	r3, r7, #32
 80009e4:	4618      	mov	r0, r3
 80009e6:	f001 fb85 	bl	80020f4 <HAL_RCC_OscConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80009f0:	f000 f848 	bl	8000a84 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80009f4:	234f      	movs	r3, #79	; 0x4f
 80009f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2102      	movs	r1, #2
 8000a10:	4618      	mov	r0, r3
 8000a12:	f001 ff09 	bl	8002828 <HAL_RCC_ClockConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000a1c:	f000 f832 	bl	8000a84 <Error_Handler>
  }
}
 8000a20:	bf00      	nop
 8000a22:	3768      	adds	r7, #104	; 0x68
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	58000400 	.word	0x58000400

08000a2c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart1,"received",8);
 8000a34:	2208      	movs	r2, #8
 8000a36:	490f      	ldr	r1, [pc, #60]	; (8000a74 <HAL_UART_RxCpltCallback+0x48>)
 8000a38:	480f      	ldr	r0, [pc, #60]	; (8000a78 <HAL_UART_RxCpltCallback+0x4c>)
 8000a3a:	f003 f98f 	bl	8003d5c <HAL_UART_Transmit_IT>
	SUBGRF_SetSwitch(1, RFSWITCH_TX);
 8000a3e:	2101      	movs	r1, #1
 8000a40:	2001      	movs	r0, #1
 8000a42:	f008 f89f 	bl	8008b84 <SUBGRF_SetSwitch>
	SUBGRF_SendPayload("lorada", 6, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2106      	movs	r1, #6
 8000a4a:	480c      	ldr	r0, [pc, #48]	; (8000a7c <HAL_UART_RxCpltCallback+0x50>)
 8000a4c:	f007 f98a 	bl	8007d64 <SUBGRF_SendPayload>
	SUBGRF_SendPayload(tx_buf, sizeof(tx_buf), 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2105      	movs	r1, #5
 8000a54:	480a      	ldr	r0, [pc, #40]	; (8000a80 <HAL_UART_RxCpltCallback+0x54>)
 8000a56:	f007 f985 	bl	8007d64 <SUBGRF_SendPayload>
	SUBGRF_SetSwitch(1, RFSWITCH_RX);
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f008 f891 	bl	8008b84 <SUBGRF_SetSwitch>
	HAL_UART_Receive_IT(&huart1,tx_buf,sizeof(tx_buf));
 8000a62:	2205      	movs	r2, #5
 8000a64:	4906      	ldr	r1, [pc, #24]	; (8000a80 <HAL_UART_RxCpltCallback+0x54>)
 8000a66:	4804      	ldr	r0, [pc, #16]	; (8000a78 <HAL_UART_RxCpltCallback+0x4c>)
 8000a68:	f003 fa20 	bl	8003eac <HAL_UART_Receive_IT>
}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	0800a07c 	.word	0x0800a07c
 8000a78:	200003b0 	.word	0x200003b0
 8000a7c:	0800a088 	.word	0x0800a088
 8000a80:	200002dc 	.word	0x200002dc

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <Error_Handler+0x8>

08000a8e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr

08000a9a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <NMI_Handler+0x4>

08000aa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <HardFault_Handler+0x4>

08000aa6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <MemManage_Handler+0x4>

08000aac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <BusFault_Handler+0x4>

08000ab2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <UsageFault_Handler+0x4>

08000ab8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr

08000ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae0:	f000 faf0 	bl	80010c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <DMA1_Channel1_IRQHandler+0x10>)
 8000aee:	f000 fd6d 	bl	80015cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000350 	.word	0x20000350

08000afc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000b00:	4802      	ldr	r0, [pc, #8]	; (8000b0c <DMA1_Channel2_IRQHandler+0x10>)
 8000b02:	f000 fd63 	bl	80015cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200002f0 	.word	0x200002f0

08000b10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b14:	4802      	ldr	r0, [pc, #8]	; (8000b20 <USART1_IRQHandler+0x10>)
 8000b16:	f003 fa1f 	bl	8003f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200003b0 	.word	0x200003b0

08000b24 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000b2a:	f002 fe71 	bl	8003810 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	200002e4 	.word	0x200002e4

08000b38 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b44:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000b46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b54:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
}
 8000b5e:	bf00      	nop
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr

08000b68 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_SUBGHZ_Init+0x20>)
 8000b6e:	2208      	movs	r2, #8
 8000b70:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_SUBGHZ_Init+0x20>)
 8000b74:	f002 fbd0 	bl	8003318 <HAL_SUBGHZ_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000b7e:	f7ff ff81 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200002e4 	.word	0x200002e4

08000b8c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000b94:	2001      	movs	r0, #1
 8000b96:	f7ff ffcf 	bl	8000b38 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	2032      	movs	r0, #50	; 0x32
 8000ba0:	f000 fb79 	bl	8001296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000ba4:	2032      	movs	r0, #50	; 0x32
 8000ba6:	f000 fb90 	bl	80012ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr

08000bbe <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	af00      	add	r7, sp, #0
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 8000bc2:	f000 f88c 	bl	8000cde <TIMER_IF_GetTimerValue>
 8000bc6:	4603      	mov	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 f8af 	bl	8000d3a <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bec:	4a14      	ldr	r2, [pc, #80]	; (8000c40 <_sbrk+0x5c>)
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <_sbrk+0x60>)
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <_sbrk+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d102      	bne.n	8000c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <_sbrk+0x64>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <_sbrk+0x68>)
 8000c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <_sbrk+0x64>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d207      	bcs.n	8000c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c14:	f008 fc9a 	bl	800954c <__errno>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c22:	e009      	b.n	8000c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <_sbrk+0x64>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2a:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <_sbrk+0x64>)
 8000c34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c36:	68fb      	ldr	r3, [r7, #12]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20008000 	.word	0x20008000
 8000c44:	00000400 	.word	0x00000400
 8000c48:	20000198 	.word	0x20000198
 8000c4c:	200004e0 	.word	0x200004e0

08000c50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr

08000c5c <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000c62:	2300      	movs	r3, #0
 8000c64:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 8000c66:	79fb      	ldrb	r3, [r7, #7]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr

08000c72 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b085      	sub	sp, #20
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3714      	adds	r7, #20
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr

08000c8a <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000c90:	2300      	movs	r3, #0
 8000c92:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8000c94:	79fb      	ldrb	r3, [r7, #7]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8000ca4:	4b02      	ldr	r3, [pc, #8]	; (8000cb0 <TIMER_IF_SetTimerContext+0x10>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr
 8000cb0:	2000019c 	.word	0x2000019c

08000cb4 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8000cb8:	4b02      	ldr	r3, [pc, #8]	; (8000cc4 <TIMER_IF_GetTimerContext+0x10>)
 8000cba:	681b      	ldr	r3, [r3, #0]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr
 8000cc4:	2000019c 	.word	0x2000019c

08000cc8 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8000cd2:	687b      	ldr	r3, [r7, #4]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr

08000cde <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8000ce8:	687b      	ldr	r3, [r7, #4]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr

08000cf4 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 8000cfe:	687b      	ldr	r3, [r7, #4]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr

08000d0a <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b085      	sub	sp, #20
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 8000d16:	68fb      	ldr	r3, [r7, #12]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr

08000d22 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b085      	sub	sp, #20
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr

08000d3a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr

08000d4c <LL_AHB2_GRP1_EnableClock>:
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d70:	68fb      	ldr	r3, [r7, #12]
}
 8000d72:	bf00      	nop
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr

08000d7c <LL_APB2_GRP1_EnableClock>:
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000da0:	68fb      	ldr	r3, [r7, #12]
}
 8000da2:	bf00      	nop
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr

08000dac <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000db0:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <MX_USART1_UART_Init+0x90>)
 8000db2:	4a23      	ldr	r2, [pc, #140]	; (8000e40 <MX_USART1_UART_Init+0x94>)
 8000db4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000db6:	4b21      	ldr	r3, [pc, #132]	; (8000e3c <MX_USART1_UART_Init+0x90>)
 8000db8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dbe:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <MX_USART1_UART_Init+0x90>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <MX_USART1_UART_Init+0x90>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dca:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <MX_USART1_UART_Init+0x90>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dd0:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <MX_USART1_UART_Init+0x90>)
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd6:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <MX_USART1_UART_Init+0x90>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ddc:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <MX_USART1_UART_Init+0x90>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000de2:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <MX_USART1_UART_Init+0x90>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <MX_USART1_UART_Init+0x90>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dee:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <MX_USART1_UART_Init+0x90>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000df4:	4811      	ldr	r0, [pc, #68]	; (8000e3c <MX_USART1_UART_Init+0x90>)
 8000df6:	f002 feca 	bl	8003b8e <HAL_UART_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e00:	f7ff fe40 	bl	8000a84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e04:	2100      	movs	r1, #0
 8000e06:	480d      	ldr	r0, [pc, #52]	; (8000e3c <MX_USART1_UART_Init+0x90>)
 8000e08:	f004 ffd5 	bl	8005db6 <HAL_UARTEx_SetTxFifoThreshold>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e12:	f7ff fe37 	bl	8000a84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e16:	2100      	movs	r1, #0
 8000e18:	4808      	ldr	r0, [pc, #32]	; (8000e3c <MX_USART1_UART_Init+0x90>)
 8000e1a:	f005 f80a 	bl	8005e32 <HAL_UARTEx_SetRxFifoThreshold>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e24:	f7ff fe2e 	bl	8000a84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e28:	4804      	ldr	r0, [pc, #16]	; (8000e3c <MX_USART1_UART_Init+0x90>)
 8000e2a:	f004 ff8c 	bl	8005d46 <HAL_UARTEx_DisableFifoMode>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e34:	f7ff fe26 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	200003b0 	.word	0x200003b0
 8000e40:	40013800 	.word	0x40013800

08000e44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b096      	sub	sp, #88	; 0x58
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	2238      	movs	r2, #56	; 0x38
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f008 fb9b 	bl	80095a0 <memset>
  if(uartHandle->Instance==USART1)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a4d      	ldr	r2, [pc, #308]	; (8000fa4 <HAL_UART_MspInit+0x160>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	f040 8092 	bne.w	8000f9a <HAL_UART_MspInit+0x156>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e76:	2301      	movs	r3, #1
 8000e78:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e7a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000e7e:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	4618      	mov	r0, r3
 8000e86:	f002 f893 	bl	8002fb0 <HAL_RCCEx_PeriphCLKConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000e90:	f7ff fdf8 	bl	8000a84 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e94:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e98:	f7ff ff70 	bl	8000d7c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9c:	2002      	movs	r0, #2
 8000e9e:	f7ff ff55 	bl	8000d4c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000ea2:	23c0      	movs	r3, #192	; 0xc0
 8000ea4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000eb2:	2307      	movs	r3, #7
 8000eb4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000eba:	4619      	mov	r1, r3
 8000ebc:	483a      	ldr	r0, [pc, #232]	; (8000fa8 <HAL_UART_MspInit+0x164>)
 8000ebe:	f000 fce7 	bl	8001890 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000ec2:	4b3a      	ldr	r3, [pc, #232]	; (8000fac <HAL_UART_MspInit+0x168>)
 8000ec4:	4a3a      	ldr	r2, [pc, #232]	; (8000fb0 <HAL_UART_MspInit+0x16c>)
 8000ec6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000ec8:	4b38      	ldr	r3, [pc, #224]	; (8000fac <HAL_UART_MspInit+0x168>)
 8000eca:	2211      	movs	r2, #17
 8000ecc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ece:	4b37      	ldr	r3, [pc, #220]	; (8000fac <HAL_UART_MspInit+0x168>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ed4:	4b35      	ldr	r3, [pc, #212]	; (8000fac <HAL_UART_MspInit+0x168>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eda:	4b34      	ldr	r3, [pc, #208]	; (8000fac <HAL_UART_MspInit+0x168>)
 8000edc:	2280      	movs	r2, #128	; 0x80
 8000ede:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ee0:	4b32      	ldr	r3, [pc, #200]	; (8000fac <HAL_UART_MspInit+0x168>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ee6:	4b31      	ldr	r3, [pc, #196]	; (8000fac <HAL_UART_MspInit+0x168>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000eec:	4b2f      	ldr	r3, [pc, #188]	; (8000fac <HAL_UART_MspInit+0x168>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ef2:	4b2e      	ldr	r3, [pc, #184]	; (8000fac <HAL_UART_MspInit+0x168>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000ef8:	482c      	ldr	r0, [pc, #176]	; (8000fac <HAL_UART_MspInit+0x168>)
 8000efa:	f000 fa01 	bl	8001300 <HAL_DMA_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000f04:	f7ff fdbe 	bl	8000a84 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000f08:	2110      	movs	r1, #16
 8000f0a:	4828      	ldr	r0, [pc, #160]	; (8000fac <HAL_UART_MspInit+0x168>)
 8000f0c:	f000 fc24 	bl	8001758 <HAL_DMA_ConfigChannelAttributes>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_UART_MspInit+0xd6>
    {
      Error_Handler();
 8000f16:	f7ff fdb5 	bl	8000a84 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a23      	ldr	r2, [pc, #140]	; (8000fac <HAL_UART_MspInit+0x168>)
 8000f1e:	67da      	str	r2, [r3, #124]	; 0x7c
 8000f20:	4a22      	ldr	r2, [pc, #136]	; (8000fac <HAL_UART_MspInit+0x168>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000f26:	4b23      	ldr	r3, [pc, #140]	; (8000fb4 <HAL_UART_MspInit+0x170>)
 8000f28:	4a23      	ldr	r2, [pc, #140]	; (8000fb8 <HAL_UART_MspInit+0x174>)
 8000f2a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000f2c:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <HAL_UART_MspInit+0x170>)
 8000f2e:	2212      	movs	r2, #18
 8000f30:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f32:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <HAL_UART_MspInit+0x170>)
 8000f34:	2210      	movs	r2, #16
 8000f36:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f38:	4b1e      	ldr	r3, [pc, #120]	; (8000fb4 <HAL_UART_MspInit+0x170>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <HAL_UART_MspInit+0x170>)
 8000f40:	2280      	movs	r2, #128	; 0x80
 8000f42:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f44:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <HAL_UART_MspInit+0x170>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <HAL_UART_MspInit+0x170>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000f50:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <HAL_UART_MspInit+0x170>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f56:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <HAL_UART_MspInit+0x170>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000f5c:	4815      	ldr	r0, [pc, #84]	; (8000fb4 <HAL_UART_MspInit+0x170>)
 8000f5e:	f000 f9cf 	bl	8001300 <HAL_DMA_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8000f68:	f7ff fd8c 	bl	8000a84 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000f6c:	2110      	movs	r1, #16
 8000f6e:	4811      	ldr	r0, [pc, #68]	; (8000fb4 <HAL_UART_MspInit+0x170>)
 8000f70:	f000 fbf2 	bl	8001758 <HAL_DMA_ConfigChannelAttributes>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8000f7a:	f7ff fd83 	bl	8000a84 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a0c      	ldr	r2, [pc, #48]	; (8000fb4 <HAL_UART_MspInit+0x170>)
 8000f82:	679a      	str	r2, [r3, #120]	; 0x78
 8000f84:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <HAL_UART_MspInit+0x170>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	2024      	movs	r0, #36	; 0x24
 8000f90:	f000 f981 	bl	8001296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f94:	2024      	movs	r0, #36	; 0x24
 8000f96:	f000 f998 	bl	80012ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	3758      	adds	r7, #88	; 0x58
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40013800 	.word	0x40013800
 8000fa8:	48000400 	.word	0x48000400
 8000fac:	20000350 	.word	0x20000350
 8000fb0:	40020008 	.word	0x40020008
 8000fb4:	200002f0 	.word	0x200002f0
 8000fb8:	4002001c 	.word	0x4002001c

08000fbc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fbc:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fbe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fc0:	f7ff fe46 	bl	8000c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc4:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fc6:	490d      	ldr	r1, [pc, #52]	; (8000ffc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <LoopForever+0xe>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fcc:	e002      	b.n	8000fd4 <LoopCopyDataInit>

08000fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd2:	3304      	adds	r3, #4

08000fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd8:	d3f9      	bcc.n	8000fce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fdc:	4c0a      	ldr	r4, [pc, #40]	; (8001008 <LoopForever+0x16>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe0:	e001      	b.n	8000fe6 <LoopFillZerobss>

08000fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe4:	3204      	adds	r2, #4

08000fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe8:	d3fb      	bcc.n	8000fe2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fea:	f008 fab5 	bl	8009558 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fee:	f7ff fbe9 	bl	80007c4 <main>

08000ff2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ff2:	e7fe      	b.n	8000ff2 <LoopForever>
  ldr   r0, =_estack
 8000ff4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ffc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001000:	0800a340 	.word	0x0800a340
  ldr r2, =_sbss
 8001004:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001008:	200004dc 	.word	0x200004dc

0800100c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC_IRQHandler>
	...

08001010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101a:	2003      	movs	r0, #3
 800101c:	f000 f930 	bl	8001280 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001020:	f001 fde4 	bl	8002bec <HAL_RCC_GetHCLKFreq>
 8001024:	4603      	mov	r3, r0
 8001026:	4a09      	ldr	r2, [pc, #36]	; (800104c <HAL_Init+0x3c>)
 8001028:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800102a:	200f      	movs	r0, #15
 800102c:	f000 f810 	bl	8001050 <HAL_InitTick>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d002      	beq.n	800103c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	71fb      	strb	r3, [r7, #7]
 800103a:	e001      	b.n	8001040 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800103c:	f7ff fd27 	bl	8000a8e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001040:	79fb      	ldrb	r3, [r7, #7]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000004 	.word	0x20000004

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <HAL_InitTick+0x6c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d024      	beq.n	80010ae <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001064:	f001 fdc2 	bl	8002bec <HAL_RCC_GetHCLKFreq>
 8001068:	4602      	mov	r2, r0
 800106a:	4b14      	ldr	r3, [pc, #80]	; (80010bc <HAL_InitTick+0x6c>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	4619      	mov	r1, r3
 8001070:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001074:	fbb3 f3f1 	udiv	r3, r3, r1
 8001078:	fbb2 f3f3 	udiv	r3, r2, r3
 800107c:	4618      	mov	r0, r3
 800107e:	f000 f932 	bl	80012e6 <HAL_SYSTICK_Config>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d10f      	bne.n	80010a8 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b0f      	cmp	r3, #15
 800108c:	d809      	bhi.n	80010a2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800108e:	2200      	movs	r2, #0
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	f04f 30ff 	mov.w	r0, #4294967295
 8001096:	f000 f8fe 	bl	8001296 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800109a:	4a09      	ldr	r2, [pc, #36]	; (80010c0 <HAL_InitTick+0x70>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	e007      	b.n	80010b2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	73fb      	strb	r3, [r7, #15]
 80010a6:	e004      	b.n	80010b2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	e001      	b.n	80010b2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	2000000c 	.word	0x2000000c
 80010c0:	20000008 	.word	0x20000008

080010c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <HAL_IncTick+0x1c>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <HAL_IncTick+0x20>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	4a03      	ldr	r2, [pc, #12]	; (80010e4 <HAL_IncTick+0x20>)
 80010d6:	6013      	str	r3, [r2, #0]
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	2000000c 	.word	0x2000000c
 80010e4:	20000440 	.word	0x20000440

080010e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <__NVIC_SetPriorityGrouping+0x44>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001104:	4013      	ands	r3, r2
 8001106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001110:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111a:	4a04      	ldr	r2, [pc, #16]	; (800112c <__NVIC_SetPriorityGrouping+0x44>)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	60d3      	str	r3, [r2, #12]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <__NVIC_GetPriorityGrouping+0x18>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	0a1b      	lsrs	r3, r3, #8
 800113a:	f003 0307 	and.w	r3, r3, #7
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	2b00      	cmp	r3, #0
 800115c:	db0b      	blt.n	8001176 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	f003 021f 	and.w	r2, r3, #31
 8001164:	4906      	ldr	r1, [pc, #24]	; (8001180 <__NVIC_EnableIRQ+0x34>)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	095b      	lsrs	r3, r3, #5
 800116c:	2001      	movs	r0, #1
 800116e:	fa00 f202 	lsl.w	r2, r0, r2
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100

08001184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	2b00      	cmp	r3, #0
 8001196:	db0a      	blt.n	80011ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	490c      	ldr	r1, [pc, #48]	; (80011d0 <__NVIC_SetPriority+0x4c>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	0112      	lsls	r2, r2, #4
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	440b      	add	r3, r1
 80011a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ac:	e00a      	b.n	80011c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4908      	ldr	r1, [pc, #32]	; (80011d4 <__NVIC_SetPriority+0x50>)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	f003 030f 	and.w	r3, r3, #15
 80011ba:	3b04      	subs	r3, #4
 80011bc:	0112      	lsls	r2, r2, #4
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	440b      	add	r3, r1
 80011c2:	761a      	strb	r2, [r3, #24]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000e100 	.word	0xe000e100
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	; 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f1c3 0307 	rsb	r3, r3, #7
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	bf28      	it	cs
 80011f6:	2304      	movcs	r3, #4
 80011f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3304      	adds	r3, #4
 80011fe:	2b06      	cmp	r3, #6
 8001200:	d902      	bls.n	8001208 <NVIC_EncodePriority+0x30>
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3b03      	subs	r3, #3
 8001206:	e000      	b.n	800120a <NVIC_EncodePriority+0x32>
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	f04f 32ff 	mov.w	r2, #4294967295
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43da      	mvns	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	401a      	ands	r2, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001220:	f04f 31ff 	mov.w	r1, #4294967295
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	fa01 f303 	lsl.w	r3, r1, r3
 800122a:	43d9      	mvns	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	4313      	orrs	r3, r2
         );
}
 8001232:	4618      	mov	r0, r3
 8001234:	3724      	adds	r7, #36	; 0x24
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800124c:	d301      	bcc.n	8001252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124e:	2301      	movs	r3, #1
 8001250:	e00f      	b.n	8001272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <SysTick_Config+0x40>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3b01      	subs	r3, #1
 8001258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125a:	210f      	movs	r1, #15
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f7ff ff90 	bl	8001184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <SysTick_Config+0x40>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <SysTick_Config+0x40>)
 800126c:	2207      	movs	r2, #7
 800126e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	e000e010 	.word	0xe000e010

08001280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff ff2d 	bl	80010e8 <__NVIC_SetPriorityGrouping>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b086      	sub	sp, #24
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012a4:	f7ff ff44 	bl	8001130 <__NVIC_GetPriorityGrouping>
 80012a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	6978      	ldr	r0, [r7, #20]
 80012b0:	f7ff ff92 	bl	80011d8 <NVIC_EncodePriority>
 80012b4:	4602      	mov	r2, r0
 80012b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ba:	4611      	mov	r1, r2
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff61 	bl	8001184 <__NVIC_SetPriority>
}
 80012c2:	bf00      	nop
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff37 	bl	800114c <__NVIC_EnableIRQ>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ffa4 	bl	800123c <SysTick_Config>
 80012f4:	4603      	mov	r3, r0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e08e      	b.n	8001430 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	461a      	mov	r2, r3
 8001318:	4b47      	ldr	r3, [pc, #284]	; (8001438 <HAL_DMA_Init+0x138>)
 800131a:	429a      	cmp	r2, r3
 800131c:	d80f      	bhi.n	800133e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	4b45      	ldr	r3, [pc, #276]	; (800143c <HAL_DMA_Init+0x13c>)
 8001326:	4413      	add	r3, r2
 8001328:	4a45      	ldr	r2, [pc, #276]	; (8001440 <HAL_DMA_Init+0x140>)
 800132a:	fba2 2303 	umull	r2, r3, r2, r3
 800132e:	091b      	lsrs	r3, r3, #4
 8001330:	009a      	lsls	r2, r3, #2
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a42      	ldr	r2, [pc, #264]	; (8001444 <HAL_DMA_Init+0x144>)
 800133a:	641a      	str	r2, [r3, #64]	; 0x40
 800133c:	e00e      	b.n	800135c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	461a      	mov	r2, r3
 8001344:	4b40      	ldr	r3, [pc, #256]	; (8001448 <HAL_DMA_Init+0x148>)
 8001346:	4413      	add	r3, r2
 8001348:	4a3d      	ldr	r2, [pc, #244]	; (8001440 <HAL_DMA_Init+0x140>)
 800134a:	fba2 2303 	umull	r2, r3, r2, r3
 800134e:	091b      	lsrs	r3, r3, #4
 8001350:	009a      	lsls	r2, r3, #2
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a3c      	ldr	r2, [pc, #240]	; (800144c <HAL_DMA_Init+0x14c>)
 800135a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2202      	movs	r2, #2
 8001360:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	6812      	ldr	r2, [r2, #0]
 800136e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001376:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6819      	ldr	r1, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689a      	ldr	r2, [r3, #8]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	431a      	orrs	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	431a      	orrs	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	431a      	orrs	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	431a      	orrs	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	431a      	orrs	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	431a      	orrs	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 fa02 	bl	80017b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013bc:	d102      	bne.n	80013c4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80013d0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013da:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d010      	beq.n	8001406 <HAL_DMA_Init+0x106>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d80c      	bhi.n	8001406 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 fa2b 	bl	8001848 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	e008      	b.n	8001418 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40020407 	.word	0x40020407
 800143c:	bffdfff8 	.word	0xbffdfff8
 8001440:	cccccccd 	.word	0xcccccccd
 8001444:	40020000 	.word	0x40020000
 8001448:	bffdfbf8 	.word	0xbffdfbf8
 800144c:	40020400 	.word	0x40020400

08001450 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e04f      	b.n	8001502 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d008      	beq.n	8001480 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2204      	movs	r2, #4
 8001472:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e040      	b.n	8001502 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 020e 	bic.w	r2, r2, #14
 800148e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800149a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800149e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 0201 	bic.w	r2, r2, #1
 80014ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b4:	f003 021c 	and.w	r2, r3, #28
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	2101      	movs	r1, #1
 80014be:	fa01 f202 	lsl.w	r2, r1, r2
 80014c2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00c      	beq.n	80014f0 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80014ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2201      	movs	r2, #1
 80014f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr

0800150c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001514:	2300      	movs	r3, #0
 8001516:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d005      	beq.n	8001530 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2204      	movs	r2, #4
 8001528:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	73fb      	strb	r3, [r7, #15]
 800152e:	e047      	b.n	80015c0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 020e 	bic.w	r2, r2, #14
 800153e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 0201 	bic.w	r2, r2, #1
 800154e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800155a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800155e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001564:	f003 021c 	and.w	r2, r3, #28
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	2101      	movs	r1, #1
 800156e:	fa01 f202 	lsl.w	r2, r1, r2
 8001572:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800157c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00c      	beq.n	80015a0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001590:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001594:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800159e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	4798      	blx	r3
    }
  }
  return status;
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e8:	f003 031c 	and.w	r3, r3, #28
 80015ec:	2204      	movs	r2, #4
 80015ee:	409a      	lsls	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d027      	beq.n	8001648 <HAL_DMA_IRQHandler+0x7c>
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d022      	beq.n	8001648 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0320 	and.w	r3, r3, #32
 800160c:	2b00      	cmp	r3, #0
 800160e:	d107      	bne.n	8001620 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 0204 	bic.w	r2, r2, #4
 800161e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001624:	f003 021c 	and.w	r2, r3, #28
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	2104      	movs	r1, #4
 800162e:	fa01 f202 	lsl.w	r2, r1, r2
 8001632:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 8081 	beq.w	8001740 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001646:	e07b      	b.n	8001740 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164c:	f003 031c 	and.w	r3, r3, #28
 8001650:	2202      	movs	r2, #2
 8001652:	409a      	lsls	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4013      	ands	r3, r2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d03d      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x10c>
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d038      	beq.n	80016d8 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0320 	and.w	r3, r3, #32
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10b      	bne.n	800168c <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 020a 	bic.w	r2, r2, #10
 8001682:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b2e      	ldr	r3, [pc, #184]	; (800174c <HAL_DMA_IRQHandler+0x180>)
 8001694:	429a      	cmp	r2, r3
 8001696:	d909      	bls.n	80016ac <HAL_DMA_IRQHandler+0xe0>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169c:	f003 031c 	and.w	r3, r3, #28
 80016a0:	4a2b      	ldr	r2, [pc, #172]	; (8001750 <HAL_DMA_IRQHandler+0x184>)
 80016a2:	2102      	movs	r1, #2
 80016a4:	fa01 f303 	lsl.w	r3, r1, r3
 80016a8:	6053      	str	r3, [r2, #4]
 80016aa:	e008      	b.n	80016be <HAL_DMA_IRQHandler+0xf2>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b0:	f003 031c 	and.w	r3, r3, #28
 80016b4:	4a27      	ldr	r2, [pc, #156]	; (8001754 <HAL_DMA_IRQHandler+0x188>)
 80016b6:	2102      	movs	r1, #2
 80016b8:	fa01 f303 	lsl.w	r3, r1, r3
 80016bc:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d038      	beq.n	8001740 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80016d6:	e033      	b.n	8001740 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016dc:	f003 031c 	and.w	r3, r3, #28
 80016e0:	2208      	movs	r2, #8
 80016e2:	409a      	lsls	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d02a      	beq.n	8001742 <HAL_DMA_IRQHandler+0x176>
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d025      	beq.n	8001742 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 020e 	bic.w	r2, r2, #14
 8001704:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	f003 021c 	and.w	r2, r3, #28
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	2101      	movs	r1, #1
 8001714:	fa01 f202 	lsl.w	r2, r1, r2
 8001718:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001734:	2b00      	cmp	r3, #0
 8001736:	d004      	beq.n	8001742 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001740:	bf00      	nop
 8001742:	bf00      	nop
}
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40020080 	.word	0x40020080
 8001750:	40020400 	.word	0x40020400
 8001754:	40020000 	.word	0x40020000

08001758 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d103      	bne.n	8001774 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	72fb      	strb	r3, [r7, #11]
    return status;
 8001770:	7afb      	ldrb	r3, [r7, #11]
 8001772:	e01b      	b.n	80017ac <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00d      	beq.n	80017a2 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d004      	beq.n	800179a <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	e003      	b.n	80017a2 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80017a0:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	601a      	str	r2, [r3, #0]

  return status;
 80017aa:	7afb      	ldrb	r3, [r7, #11]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr
	...

080017b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d813      	bhi.n	80017f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d0:	089b      	lsrs	r3, r3, #2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80017d8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	3b08      	subs	r3, #8
 80017e8:	4a14      	ldr	r2, [pc, #80]	; (800183c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80017ea:	fba2 2303 	umull	r2, r3, r2, r3
 80017ee:	091b      	lsrs	r3, r3, #4
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	e011      	b.n	8001818 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f8:	089b      	lsrs	r3, r3, #2
 80017fa:	009a      	lsls	r2, r3, #2
 80017fc:	4b10      	ldr	r3, [pc, #64]	; (8001840 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80017fe:	4413      	add	r3, r2
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	3b08      	subs	r3, #8
 800180c:	4a0b      	ldr	r2, [pc, #44]	; (800183c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800180e:	fba2 2303 	umull	r2, r3, r2, r3
 8001812:	091b      	lsrs	r3, r3, #4
 8001814:	3307      	adds	r3, #7
 8001816:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 800181c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f003 031f 	and.w	r3, r3, #31
 8001824:	2201      	movs	r2, #1
 8001826:	409a      	lsls	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800182c:	bf00      	nop
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40020407 	.word	0x40020407
 800183c:	cccccccd 	.word	0xcccccccd
 8001840:	4002081c 	.word	0x4002081c
 8001844:	40020880 	.word	0x40020880

08001848 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001858:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800185e:	4413      	add	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	461a      	mov	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a08      	ldr	r2, [pc, #32]	; (800188c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800186c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	3b01      	subs	r3, #1
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	2201      	movs	r2, #1
 8001878:	409a      	lsls	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800187e:	bf00      	nop
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	1000823f 	.word	0x1000823f
 800188c:	40020940 	.word	0x40020940

08001890 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001890:	b480      	push	{r7}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189e:	e140      	b.n	8001b22 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	2101      	movs	r1, #1
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ac:	4013      	ands	r3, r2
 80018ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 8132 	beq.w	8001b1c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d005      	beq.n	80018d0 <HAL_GPIO_Init+0x40>
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d130      	bne.n	8001932 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	2203      	movs	r2, #3
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001906:	2201      	movs	r2, #1
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	4013      	ands	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	091b      	lsrs	r3, r3, #4
 800191c:	f003 0201 	and.w	r2, r3, #1
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4313      	orrs	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	2b03      	cmp	r3, #3
 800193c:	d017      	beq.n	800196e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	2203      	movs	r2, #3
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	4013      	ands	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4313      	orrs	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d123      	bne.n	80019c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	08da      	lsrs	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3208      	adds	r2, #8
 8001982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001986:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	220f      	movs	r2, #15
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4013      	ands	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	691a      	ldr	r2, [r3, #16]
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	08da      	lsrs	r2, r3, #3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3208      	adds	r2, #8
 80019bc:	6939      	ldr	r1, [r7, #16]
 80019be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	2203      	movs	r2, #3
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4013      	ands	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 0203 	and.w	r2, r3, #3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 808c 	beq.w	8001b1c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001a04:	4a4e      	ldr	r2, [pc, #312]	; (8001b40 <HAL_GPIO_Init+0x2b0>)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	089b      	lsrs	r3, r3, #2
 8001a0a:	3302      	adds	r3, #2
 8001a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	f003 0303 	and.w	r3, r3, #3
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	2207      	movs	r2, #7
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a2e:	d00d      	beq.n	8001a4c <HAL_GPIO_Init+0x1bc>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a44      	ldr	r2, [pc, #272]	; (8001b44 <HAL_GPIO_Init+0x2b4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d007      	beq.n	8001a48 <HAL_GPIO_Init+0x1b8>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a43      	ldr	r2, [pc, #268]	; (8001b48 <HAL_GPIO_Init+0x2b8>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d101      	bne.n	8001a44 <HAL_GPIO_Init+0x1b4>
 8001a40:	2302      	movs	r3, #2
 8001a42:	e004      	b.n	8001a4e <HAL_GPIO_Init+0x1be>
 8001a44:	2307      	movs	r3, #7
 8001a46:	e002      	b.n	8001a4e <HAL_GPIO_Init+0x1be>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <HAL_GPIO_Init+0x1be>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	f002 0203 	and.w	r2, r2, #3
 8001a54:	0092      	lsls	r2, r2, #2
 8001a56:	4093      	lsls	r3, r2
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a5e:	4938      	ldr	r1, [pc, #224]	; (8001b40 <HAL_GPIO_Init+0x2b0>)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	089b      	lsrs	r3, r3, #2
 8001a64:	3302      	adds	r3, #2
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001a6c:	4b37      	ldr	r3, [pc, #220]	; (8001b4c <HAL_GPIO_Init+0x2bc>)
 8001a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a72:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001a92:	4a2e      	ldr	r2, [pc, #184]	; (8001b4c <HAL_GPIO_Init+0x2bc>)
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001a9a:	4b2c      	ldr	r3, [pc, #176]	; (8001b4c <HAL_GPIO_Init+0x2bc>)
 8001a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001aa0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001ac0:	4a22      	ldr	r2, [pc, #136]	; (8001b4c <HAL_GPIO_Init+0x2bc>)
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ac8:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <HAL_GPIO_Init+0x2bc>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001aec:	4a17      	ldr	r2, [pc, #92]	; (8001b4c <HAL_GPIO_Init+0x2bc>)
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001af2:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <HAL_GPIO_Init+0x2bc>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4013      	ands	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b16:	4a0d      	ldr	r2, [pc, #52]	; (8001b4c <HAL_GPIO_Init+0x2bc>)
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f47f aeb7 	bne.w	80018a0 <HAL_GPIO_Init+0x10>
  }
}
 8001b32:	bf00      	nop
 8001b34:	bf00      	nop
 8001b36:	371c      	adds	r7, #28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40010000 	.word	0x40010000
 8001b44:	48000400 	.word	0x48000400
 8001b48:	48000800 	.word	0x48000800
 8001b4c:	58000800 	.word	0x58000800

08001b50 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a03      	ldr	r2, [pc, #12]	; (8001b68 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5e:	6013      	str	r3, [r2, #0]
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	58000400 	.word	0x58000400

08001b6c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001b70:	4b03      	ldr	r3, [pc, #12]	; (8001b80 <HAL_PWREx_GetVoltageRange+0x14>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	58000400 	.word	0x58000400

08001b84 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b94:	d101      	bne.n	8001b9a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr
 8001ba4:	58000400 	.word	0x58000400

08001ba8 <LL_RCC_HSE_EnableTcxo>:
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bba:	6013      	str	r3, [r2, #0]
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <LL_RCC_HSE_DisableTcxo>:
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001bd6:	6013      	str	r3, [r2, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bf2:	d101      	bne.n	8001bf8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e000      	b.n	8001bfa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr

08001c02 <LL_RCC_HSE_Enable>:
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c14:	6013      	str	r3, [r2, #0]
}
 8001c16:	bf00      	nop
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr

08001c1e <LL_RCC_HSE_Disable>:
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c30:	6013      	str	r3, [r2, #0]
}
 8001c32:	bf00      	nop
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr

08001c3a <LL_RCC_HSE_IsReady>:
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c4c:	d101      	bne.n	8001c52 <LL_RCC_HSE_IsReady+0x18>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <LL_RCC_HSE_IsReady+0x1a>
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr

08001c5c <LL_RCC_HSI_Enable>:
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6e:	6013      	str	r3, [r2, #0]
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <LL_RCC_HSI_Disable>:
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c8a:	6013      	str	r3, [r2, #0]
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <LL_RCC_HSI_IsReady>:
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ca6:	d101      	bne.n	8001cac <LL_RCC_HSI_IsReady+0x18>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <LL_RCC_HSI_IsReady+0x1a>
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr

08001cb6 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	061b      	lsls	r3, r3, #24
 8001ccc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d101      	bne.n	8001cf6 <LL_RCC_LSE_IsReady+0x18>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <LL_RCC_LSE_IsReady+0x1a>
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr

08001d00 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d30:	f023 0301 	bic.w	r3, r3, #1
 8001d34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d101      	bne.n	8001d58 <LL_RCC_LSI_IsReady+0x18>
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <LL_RCC_LSI_IsReady+0x1a>
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr

08001d62 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	6013      	str	r3, [r2, #0]
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr

08001d7e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d8c:	f023 0301 	bic.w	r3, r3, #1
 8001d90:	6013      	str	r3, [r2, #0]
}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr

08001d9a <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d101      	bne.n	8001db0 <LL_RCC_MSI_IsReady+0x16>
 8001dac:	2301      	movs	r3, #1
 8001dae:	e000      	b.n	8001db2 <LL_RCC_MSI_IsReady+0x18>
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr

08001dba <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0308 	and.w	r3, r3, #8
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d101      	bne.n	8001dd0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e000      	b.n	8001dd2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr

08001dda <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dfc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr

08001e08 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	021b      	lsls	r3, r3, #8
 8001e1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e22:	4313      	orrs	r3, r2
 8001e24:	604b      	str	r3, [r1, #4]
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr

08001e30 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f023 0203 	bic.w	r2, r3, #3
 8001e42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	608b      	str	r3, [r1, #8]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr

08001e56 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 030c 	and.w	r3, r3, #12
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	608b      	str	r3, [r1, #8]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr

08001e92 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e9e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ea2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ecc:	f023 020f 	bic.w	r2, r3, #15
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	091b      	lsrs	r3, r3, #4
 8001ed4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr

08001ee8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001efa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	608b      	str	r3, [r1, #8]
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr

08001f0e <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	608b      	str	r3, [r1, #8]
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr

08001f34 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr

08001f4a <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f52:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f56:	011b      	lsls	r3, r3, #4
 8001f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr

08001f7a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fa2:	6013      	str	r3, [r2, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr

08001fac <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fbe:	6013      	str	r3, [r2, #0]
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fda:	d101      	bne.n	8001fe0 <LL_RCC_PLL_IsReady+0x18>
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <LL_RCC_PLL_IsReady+0x1a>
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr

08001fea <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001fea:	b480      	push	{r7}
 8001fec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr

08002002 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002002:	b480      	push	{r7}
 8002004:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr

08002018 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800201c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002026:	4618      	mov	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr

0800202e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f003 0303 	and.w	r3, r3, #3
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr

08002044 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002056:	d101      	bne.n	800205c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr

08002066 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800206a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800207a:	d101      	bne.n	8002080 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr

0800208a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800208e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002092:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209e:	d101      	bne.n	80020a4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr

080020ae <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80020b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020c0:	d101      	bne.n	80020c6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80020d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020e2:	d101      	bne.n	80020e8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr
	...

080020f4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b088      	sub	sp, #32
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e38a      	b.n	800281c <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002106:	f7ff fea6 	bl	8001e56 <LL_RCC_GetSysClkSource>
 800210a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800210c:	f7ff ff8f 	bl	800202e <LL_RCC_PLL_GetMainSource>
 8002110:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0320 	and.w	r3, r3, #32
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 80c9 	beq.w	80022b2 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d005      	beq.n	8002132 <HAL_RCC_OscConfig+0x3e>
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	2b0c      	cmp	r3, #12
 800212a:	d17b      	bne.n	8002224 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d178      	bne.n	8002224 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002132:	f7ff fe32 	bl	8001d9a <LL_RCC_MSI_IsReady>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d005      	beq.n	8002148 <HAL_RCC_OscConfig+0x54>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e369      	b.n	800281c <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800214c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b00      	cmp	r3, #0
 8002158:	d005      	beq.n	8002166 <HAL_RCC_OscConfig+0x72>
 800215a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002164:	e006      	b.n	8002174 <HAL_RCC_OscConfig+0x80>
 8002166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800216e:	091b      	lsrs	r3, r3, #4
 8002170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002174:	4293      	cmp	r3, r2
 8002176:	d222      	bcs.n	80021be <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217c:	4618      	mov	r0, r3
 800217e:	f000 fd6d 	bl	8002c5c <RCC_SetFlashLatencyFromMSIRange>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e347      	b.n	800281c <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800218c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002196:	f043 0308 	orr.w	r3, r3, #8
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021ae:	4313      	orrs	r3, r2
 80021b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fe26 	bl	8001e08 <LL_RCC_MSI_SetCalibTrimming>
 80021bc:	e021      	b.n	8002202 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021c8:	f043 0308 	orr.w	r3, r3, #8
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021e0:	4313      	orrs	r3, r2
 80021e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fe0d 	bl	8001e08 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 fd32 	bl	8002c5c <RCC_SetFlashLatencyFromMSIRange>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e30c      	b.n	800281c <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002202:	f000 fcf3 	bl	8002bec <HAL_RCC_GetHCLKFreq>
 8002206:	4603      	mov	r3, r0
 8002208:	4ab4      	ldr	r2, [pc, #720]	; (80024dc <HAL_RCC_OscConfig+0x3e8>)
 800220a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800220c:	4bb4      	ldr	r3, [pc, #720]	; (80024e0 <HAL_RCC_OscConfig+0x3ec>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe ff1d 	bl	8001050 <HAL_InitTick>
 8002216:	4603      	mov	r3, r0
 8002218:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800221a:	7cfb      	ldrb	r3, [r7, #19]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d047      	beq.n	80022b0 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8002220:	7cfb      	ldrb	r3, [r7, #19]
 8002222:	e2fb      	b.n	800281c <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d02c      	beq.n	8002286 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800222c:	f7ff fd99 	bl	8001d62 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002230:	f7fe fcc5 	bl	8000bbe <HAL_GetTick>
 8002234:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002238:	f7fe fcc1 	bl	8000bbe <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e2e8      	b.n	800281c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 800224a:	f7ff fda6 	bl	8001d9a <LL_RCC_MSI_IsReady>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0f1      	beq.n	8002238 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800225e:	f043 0308 	orr.w	r3, r3, #8
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002272:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002276:	4313      	orrs	r3, r2
 8002278:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fdc2 	bl	8001e08 <LL_RCC_MSI_SetCalibTrimming>
 8002284:	e015      	b.n	80022b2 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002286:	f7ff fd7a 	bl	8001d7e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800228a:	f7fe fc98 	bl	8000bbe <HAL_GetTick>
 800228e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002292:	f7fe fc94 	bl	8000bbe <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e2bb      	b.n	800281c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 80022a4:	f7ff fd79 	bl	8001d9a <LL_RCC_MSI_IsReady>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f1      	bne.n	8002292 <HAL_RCC_OscConfig+0x19e>
 80022ae:	e000      	b.n	80022b2 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022b0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d05f      	beq.n	800237e <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d005      	beq.n	80022d0 <HAL_RCC_OscConfig+0x1dc>
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	2b0c      	cmp	r3, #12
 80022c8:	d10d      	bne.n	80022e6 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	2b03      	cmp	r3, #3
 80022ce:	d10a      	bne.n	80022e6 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d0:	f7ff fcb3 	bl	8001c3a <LL_RCC_HSE_IsReady>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d050      	beq.n	800237c <HAL_RCC_OscConfig+0x288>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d14c      	bne.n	800237c <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e29a      	b.n	800281c <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80022e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022f8:	4313      	orrs	r3, r2
 80022fa:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002304:	d102      	bne.n	800230c <HAL_RCC_OscConfig+0x218>
 8002306:	f7ff fc7c 	bl	8001c02 <LL_RCC_HSE_Enable>
 800230a:	e00d      	b.n	8002328 <HAL_RCC_OscConfig+0x234>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002314:	d104      	bne.n	8002320 <HAL_RCC_OscConfig+0x22c>
 8002316:	f7ff fc47 	bl	8001ba8 <LL_RCC_HSE_EnableTcxo>
 800231a:	f7ff fc72 	bl	8001c02 <LL_RCC_HSE_Enable>
 800231e:	e003      	b.n	8002328 <HAL_RCC_OscConfig+0x234>
 8002320:	f7ff fc7d 	bl	8001c1e <LL_RCC_HSE_Disable>
 8002324:	f7ff fc4e 	bl	8001bc4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d012      	beq.n	8002356 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002330:	f7fe fc45 	bl	8000bbe <HAL_GetTick>
 8002334:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002338:	f7fe fc41 	bl	8000bbe <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b64      	cmp	r3, #100	; 0x64
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e268      	b.n	800281c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 800234a:	f7ff fc76 	bl	8001c3a <LL_RCC_HSE_IsReady>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0f1      	beq.n	8002338 <HAL_RCC_OscConfig+0x244>
 8002354:	e013      	b.n	800237e <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002356:	f7fe fc32 	bl	8000bbe <HAL_GetTick>
 800235a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800235e:	f7fe fc2e 	bl	8000bbe <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b64      	cmp	r3, #100	; 0x64
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e255      	b.n	800281c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002370:	f7ff fc63 	bl	8001c3a <LL_RCC_HSE_IsReady>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f1      	bne.n	800235e <HAL_RCC_OscConfig+0x26a>
 800237a:	e000      	b.n	800237e <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d04b      	beq.n	8002422 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	2b04      	cmp	r3, #4
 800238e:	d005      	beq.n	800239c <HAL_RCC_OscConfig+0x2a8>
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	2b0c      	cmp	r3, #12
 8002394:	d113      	bne.n	80023be <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	2b02      	cmp	r3, #2
 800239a:	d110      	bne.n	80023be <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800239c:	f7ff fc7a 	bl	8001c94 <LL_RCC_HSI_IsReady>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d005      	beq.n	80023b2 <HAL_RCC_OscConfig+0x2be>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e234      	b.n	800281c <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fc7d 	bl	8001cb6 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023bc:	e031      	b.n	8002422 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d019      	beq.n	80023fa <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c6:	f7ff fc49 	bl	8001c5c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ca:	f7fe fbf8 	bl	8000bbe <HAL_GetTick>
 80023ce:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d2:	f7fe fbf4 	bl	8000bbe <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e21b      	b.n	800281c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 80023e4:	f7ff fc56 	bl	8001c94 <LL_RCC_HSI_IsReady>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f1      	beq.n	80023d2 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fc5f 	bl	8001cb6 <LL_RCC_HSI_SetCalibTrimming>
 80023f8:	e013      	b.n	8002422 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023fa:	f7ff fc3d 	bl	8001c78 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fe:	f7fe fbde 	bl	8000bbe <HAL_GetTick>
 8002402:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002406:	f7fe fbda 	bl	8000bbe <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e201      	b.n	800281c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002418:	f7ff fc3c 	bl	8001c94 <LL_RCC_HSI_IsReady>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f1      	bne.n	8002406 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d06e      	beq.n	800250c <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d056      	beq.n	80024e4 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 8002436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800243a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800243e:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69da      	ldr	r2, [r3, #28]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	429a      	cmp	r2, r3
 800244c:	d031      	beq.n	80024b2 <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d006      	beq.n	8002466 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e1da      	b.n	800281c <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	d013      	beq.n	8002498 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8002470:	f7ff fc56 	bl	8001d20 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002474:	f7fe fba3 	bl	8000bbe <HAL_GetTick>
 8002478:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800247c:	f7fe fb9f 	bl	8000bbe <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b11      	cmp	r3, #17
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e1c6      	b.n	800281c <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 800248e:	f7ff fc57 	bl	8001d40 <LL_RCC_LSI_IsReady>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1f1      	bne.n	800247c <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024a0:	f023 0210 	bic.w	r2, r3, #16
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024ac:	4313      	orrs	r3, r2
 80024ae:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024b2:	f7ff fc25 	bl	8001d00 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b6:	f7fe fb82 	bl	8000bbe <HAL_GetTick>
 80024ba:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024be:	f7fe fb7e 	bl	8000bbe <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b11      	cmp	r3, #17
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e1a5      	b.n	800281c <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 80024d0:	f7ff fc36 	bl	8001d40 <LL_RCC_LSI_IsReady>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f1      	beq.n	80024be <HAL_RCC_OscConfig+0x3ca>
 80024da:	e017      	b.n	800250c <HAL_RCC_OscConfig+0x418>
 80024dc:	20000004 	.word	0x20000004
 80024e0:	20000008 	.word	0x20000008
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024e4:	f7ff fc1c 	bl	8001d20 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e8:	f7fe fb69 	bl	8000bbe <HAL_GetTick>
 80024ec:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f0:	f7fe fb65 	bl	8000bbe <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b11      	cmp	r3, #17
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e18c      	b.n	800281c <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002502:	f7ff fc1d 	bl	8001d40 <LL_RCC_LSI_IsReady>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1f1      	bne.n	80024f0 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 80d8 	beq.w	80026ca <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800251a:	f7ff fb33 	bl	8001b84 <LL_PWR_IsEnabledBkUpAccess>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d113      	bne.n	800254c <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002524:	f7ff fb14 	bl	8001b50 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002528:	f7fe fb49 	bl	8000bbe <HAL_GetTick>
 800252c:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002530:	f7fe fb45 	bl	8000bbe <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e16c      	b.n	800281c <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002542:	f7ff fb1f 	bl	8001b84 <LL_PWR_IsEnabledBkUpAccess>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f1      	beq.n	8002530 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d07b      	beq.n	800264c <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	2b85      	cmp	r3, #133	; 0x85
 800255a:	d003      	beq.n	8002564 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	2b05      	cmp	r3, #5
 8002562:	d109      	bne.n	8002578 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002570:	f043 0304 	orr.w	r3, r3, #4
 8002574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002578:	f7fe fb21 	bl	8000bbe <HAL_GetTick>
 800257c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800257e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002586:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002592:	e00a      	b.n	80025aa <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002594:	f7fe fb13 	bl	8000bbe <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e138      	b.n	800281c <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 80025aa:	f7ff fb98 	bl	8001cde <LL_RCC_LSE_IsReady>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0ef      	beq.n	8002594 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	2b81      	cmp	r3, #129	; 0x81
 80025ba:	d003      	beq.n	80025c4 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	2b85      	cmp	r3, #133	; 0x85
 80025c2:	d121      	bne.n	8002608 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c4:	f7fe fafb 	bl	8000bbe <HAL_GetTick>
 80025c8:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80025ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80025de:	e00a      	b.n	80025f6 <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e0:	f7fe faed 	bl	8000bbe <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e112      	b.n	800281c <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80025f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0ec      	beq.n	80025e0 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002606:	e060      	b.n	80026ca <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002608:	f7fe fad9 	bl	8000bbe <HAL_GetTick>
 800260c:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800260e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002616:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800261a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800261e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002622:	e00a      	b.n	800263a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002624:	f7fe facb 	bl	8000bbe <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002632:	4293      	cmp	r3, r2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e0f0      	b.n	800281c <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800263a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800263e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1ec      	bne.n	8002624 <HAL_RCC_OscConfig+0x530>
 800264a:	e03e      	b.n	80026ca <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264c:	f7fe fab7 	bl	8000bbe <HAL_GetTick>
 8002650:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800265e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002662:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002666:	e00a      	b.n	800267e <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002668:	f7fe faa9 	bl	8000bbe <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	f241 3288 	movw	r2, #5000	; 0x1388
 8002676:	4293      	cmp	r3, r2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e0ce      	b.n	800281c <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800267e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002686:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1ec      	bne.n	8002668 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268e:	f7fe fa96 	bl	8000bbe <HAL_GetTick>
 8002692:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026a0:	f023 0301 	bic.w	r3, r3, #1
 80026a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80026a8:	e00a      	b.n	80026c0 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026aa:	f7fe fa88 	bl	8000bbe <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e0ad      	b.n	800281c <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 80026c0:	f7ff fb0d 	bl	8001cde <LL_RCC_LSE_IsReady>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1ef      	bne.n	80026aa <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 80a3 	beq.w	800281a <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	2b0c      	cmp	r3, #12
 80026d8:	d076      	beq.n	80027c8 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d14b      	bne.n	800277a <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e2:	f7ff fc63 	bl	8001fac <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e6:	f7fe fa6a 	bl	8000bbe <HAL_GetTick>
 80026ea:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ee:	f7fe fa66 	bl	8000bbe <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b0a      	cmp	r3, #10
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e08d      	b.n	800281c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002700:	f7ff fc62 	bl	8001fc8 <LL_RCC_PLL_IsReady>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f1      	bne.n	80026ee <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800270a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	4b44      	ldr	r3, [pc, #272]	; (8002824 <HAL_RCC_OscConfig+0x730>)
 8002712:	4013      	ands	r3, r2
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800271c:	4311      	orrs	r1, r2
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002722:	0212      	lsls	r2, r2, #8
 8002724:	4311      	orrs	r1, r2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800272a:	4311      	orrs	r1, r2
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002730:	4311      	orrs	r1, r2
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002736:	430a      	orrs	r2, r1
 8002738:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800273c:	4313      	orrs	r3, r2
 800273e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002740:	f7ff fc26 	bl	8001f90 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800274e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002752:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe fa33 	bl	8000bbe <HAL_GetTick>
 8002758:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275c:	f7fe fa2f 	bl	8000bbe <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b0a      	cmp	r3, #10
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e056      	b.n	800281c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 800276e:	f7ff fc2b 	bl	8001fc8 <LL_RCC_PLL_IsReady>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0f1      	beq.n	800275c <HAL_RCC_OscConfig+0x668>
 8002778:	e04f      	b.n	800281a <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277a:	f7ff fc17 	bl	8001fac <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800277e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002788:	f023 0303 	bic.w	r3, r3, #3
 800278c:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 800278e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002798:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800279c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a0:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a2:	f7fe fa0c 	bl	8000bbe <HAL_GetTick>
 80027a6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027aa:	f7fe fa08 	bl	8000bbe <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b0a      	cmp	r3, #10
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e02f      	b.n	800281c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 80027bc:	f7ff fc04 	bl	8001fc8 <LL_RCC_PLL_IsReady>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f1      	bne.n	80027aa <HAL_RCC_OscConfig+0x6b6>
 80027c6:	e028      	b.n	800281a <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e023      	b.n	800281c <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	f003 0203 	and.w	r2, r3, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d115      	bne.n	8002816 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d10e      	bne.n	8002816 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002802:	021b      	lsls	r3, r3, #8
 8002804:	429a      	cmp	r2, r3
 8002806:	d106      	bne.n	8002816 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	429a      	cmp	r2, r3
 8002814:	d001      	beq.n	800281a <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3720      	adds	r7, #32
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	11c1808c 	.word	0x11c1808c

08002828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e12c      	b.n	8002a96 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800283c:	4b98      	ldr	r3, [pc, #608]	; (8002aa0 <HAL_RCC_ClockConfig+0x278>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d91b      	bls.n	8002882 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284a:	4b95      	ldr	r3, [pc, #596]	; (8002aa0 <HAL_RCC_ClockConfig+0x278>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f023 0207 	bic.w	r2, r3, #7
 8002852:	4993      	ldr	r1, [pc, #588]	; (8002aa0 <HAL_RCC_ClockConfig+0x278>)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	4313      	orrs	r3, r2
 8002858:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800285a:	f7fe f9b0 	bl	8000bbe <HAL_GetTick>
 800285e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002860:	e008      	b.n	8002874 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002862:	f7fe f9ac 	bl	8000bbe <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e110      	b.n	8002a96 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002874:	4b8a      	ldr	r3, [pc, #552]	; (8002aa0 <HAL_RCC_ClockConfig+0x278>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d1ef      	bne.n	8002862 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d016      	beq.n	80028bc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff faea 	bl	8001e6c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002898:	f7fe f991 	bl	8000bbe <HAL_GetTick>
 800289c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028a0:	f7fe f98d 	bl	8000bbe <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e0f1      	b.n	8002a96 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80028b2:	f7ff fbc7 	bl	8002044 <LL_RCC_IsActiveFlag_HPRE>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f1      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0320 	and.w	r3, r3, #32
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d016      	beq.n	80028f6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fae0 	bl	8001e92 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028d2:	f7fe f974 	bl	8000bbe <HAL_GetTick>
 80028d6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028da:	f7fe f970 	bl	8000bbe <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e0d4      	b.n	8002a96 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80028ec:	f7ff fbbb 	bl	8002066 <LL_RCC_IsActiveFlag_C2HPRE>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0f1      	beq.n	80028da <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d016      	beq.n	8002930 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff fad8 	bl	8001ebc <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800290c:	f7fe f957 	bl	8000bbe <HAL_GetTick>
 8002910:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002912:	e008      	b.n	8002926 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002914:	f7fe f953 	bl	8000bbe <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e0b7      	b.n	8002a96 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002926:	f7ff fbb0 	bl	800208a <LL_RCC_IsActiveFlag_SHDHPRE>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0f1      	beq.n	8002914 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d016      	beq.n	800296a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff fad1 	bl	8001ee8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002946:	f7fe f93a 	bl	8000bbe <HAL_GetTick>
 800294a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800294c:	e008      	b.n	8002960 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800294e:	f7fe f936 	bl	8000bbe <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e09a      	b.n	8002a96 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002960:	f7ff fba5 	bl	80020ae <LL_RCC_IsActiveFlag_PPRE1>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f1      	beq.n	800294e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d017      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff fac6 	bl	8001f0e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002982:	f7fe f91c 	bl	8000bbe <HAL_GetTick>
 8002986:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002988:	e008      	b.n	800299c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800298a:	f7fe f918 	bl	8000bbe <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e07c      	b.n	8002a96 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800299c:	f7ff fb98 	bl	80020d0 <LL_RCC_IsActiveFlag_PPRE2>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f1      	beq.n	800298a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d043      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d106      	bne.n	80029c8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80029ba:	f7ff f93e 	bl	8001c3a <LL_RCC_HSE_IsReady>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d11e      	bne.n	8002a02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e066      	b.n	8002a96 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d106      	bne.n	80029de <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80029d0:	f7ff fafa 	bl	8001fc8 <LL_RCC_PLL_IsReady>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d113      	bne.n	8002a02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e05b      	b.n	8002a96 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d106      	bne.n	80029f4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80029e6:	f7ff f9d8 	bl	8001d9a <LL_RCC_MSI_IsReady>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d108      	bne.n	8002a02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e050      	b.n	8002a96 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80029f4:	f7ff f94e 	bl	8001c94 <LL_RCC_HSI_IsReady>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e049      	b.n	8002a96 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff fa12 	bl	8001e30 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a0c:	f7fe f8d7 	bl	8000bbe <HAL_GetTick>
 8002a10:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a12:	e00a      	b.n	8002a2a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a14:	f7fe f8d3 	bl	8000bbe <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e035      	b.n	8002a96 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2a:	f7ff fa14 	bl	8001e56 <LL_RCC_GetSysClkSource>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d1ec      	bne.n	8002a14 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a3a:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <HAL_RCC_ClockConfig+0x278>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d21b      	bcs.n	8002a80 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a48:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <HAL_RCC_ClockConfig+0x278>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f023 0207 	bic.w	r2, r3, #7
 8002a50:	4913      	ldr	r1, [pc, #76]	; (8002aa0 <HAL_RCC_ClockConfig+0x278>)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a58:	f7fe f8b1 	bl	8000bbe <HAL_GetTick>
 8002a5c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a60:	f7fe f8ad 	bl	8000bbe <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e011      	b.n	8002a96 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a72:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_RCC_ClockConfig+0x278>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d1ef      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002a80:	f000 f8b4 	bl	8002bec <HAL_RCC_GetHCLKFreq>
 8002a84:	4603      	mov	r3, r0
 8002a86:	4a07      	ldr	r2, [pc, #28]	; (8002aa4 <HAL_RCC_ClockConfig+0x27c>)
 8002a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a8a:	4b07      	ldr	r3, [pc, #28]	; (8002aa8 <HAL_RCC_ClockConfig+0x280>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fe fade 	bl	8001050 <HAL_InitTick>
 8002a94:	4603      	mov	r3, r0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	58004000 	.word	0x58004000
 8002aa4:	20000004 	.word	0x20000004
 8002aa8:	20000008 	.word	0x20000008

08002aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aac:	b590      	push	{r4, r7, lr}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aba:	f7ff f9cc 	bl	8001e56 <LL_RCC_GetSysClkSource>
 8002abe:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ac0:	f7ff fab5 	bl	800202e <LL_RCC_PLL_GetMainSource>
 8002ac4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d005      	beq.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x2c>
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b0c      	cmp	r3, #12
 8002ad0:	d139      	bne.n	8002b46 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d136      	bne.n	8002b46 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002ad8:	f7ff f96f 	bl	8001dba <LL_RCC_MSI_IsEnabledRangeSelect>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d115      	bne.n	8002b0e <HAL_RCC_GetSysClockFreq+0x62>
 8002ae2:	f7ff f96a 	bl	8001dba <LL_RCC_MSI_IsEnabledRangeSelect>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d106      	bne.n	8002afa <HAL_RCC_GetSysClockFreq+0x4e>
 8002aec:	f7ff f975 	bl	8001dda <LL_RCC_MSI_GetRange>
 8002af0:	4603      	mov	r3, r0
 8002af2:	0a1b      	lsrs	r3, r3, #8
 8002af4:	f003 030f 	and.w	r3, r3, #15
 8002af8:	e005      	b.n	8002b06 <HAL_RCC_GetSysClockFreq+0x5a>
 8002afa:	f7ff f979 	bl	8001df0 <LL_RCC_MSI_GetRangeAfterStandby>
 8002afe:	4603      	mov	r3, r0
 8002b00:	0a1b      	lsrs	r3, r3, #8
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	4a36      	ldr	r2, [pc, #216]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x134>)
 8002b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b0c:	e014      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0x8c>
 8002b0e:	f7ff f954 	bl	8001dba <LL_RCC_MSI_IsEnabledRangeSelect>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d106      	bne.n	8002b26 <HAL_RCC_GetSysClockFreq+0x7a>
 8002b18:	f7ff f95f 	bl	8001dda <LL_RCC_MSI_GetRange>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	091b      	lsrs	r3, r3, #4
 8002b20:	f003 030f 	and.w	r3, r3, #15
 8002b24:	e005      	b.n	8002b32 <HAL_RCC_GetSysClockFreq+0x86>
 8002b26:	f7ff f963 	bl	8001df0 <LL_RCC_MSI_GetRangeAfterStandby>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	091b      	lsrs	r3, r3, #4
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	4a2b      	ldr	r2, [pc, #172]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x134>)
 8002b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b38:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d115      	bne.n	8002b6c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b44:	e012      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d102      	bne.n	8002b52 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b4c:	4b25      	ldr	r3, [pc, #148]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	e00c      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d109      	bne.n	8002b6c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002b58:	f7ff f842 	bl	8001be0 <LL_RCC_HSE_IsEnabledDiv2>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d102      	bne.n	8002b68 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002b62:	4b20      	ldr	r3, [pc, #128]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	e001      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002b68:	4b1f      	ldr	r3, [pc, #124]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002b6a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b6c:	f7ff f973 	bl	8001e56 <LL_RCC_GetSysClkSource>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b0c      	cmp	r3, #12
 8002b74:	d12f      	bne.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002b76:	f7ff fa5a 	bl	800202e <LL_RCC_PLL_GetMainSource>
 8002b7a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d003      	beq.n	8002b8a <HAL_RCC_GetSysClockFreq+0xde>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d003      	beq.n	8002b90 <HAL_RCC_GetSysClockFreq+0xe4>
 8002b88:	e00d      	b.n	8002ba6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002b8a:	4b16      	ldr	r3, [pc, #88]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002b8c:	60fb      	str	r3, [r7, #12]
        break;
 8002b8e:	e00d      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002b90:	f7ff f826 	bl	8001be0 <LL_RCC_HSE_IsEnabledDiv2>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d102      	bne.n	8002ba0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002b9a:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002b9c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002b9e:	e005      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002ba0:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002ba2:	60fb      	str	r3, [r7, #12]
        break;
 8002ba4:	e002      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	60fb      	str	r3, [r7, #12]
        break;
 8002baa:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002bac:	f7ff fa1d 	bl	8001fea <LL_RCC_PLL_GetN>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	fb03 f402 	mul.w	r4, r3, r2
 8002bb8:	f7ff fa2e 	bl	8002018 <LL_RCC_PLL_GetDivider>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	091b      	lsrs	r3, r3, #4
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	fbb4 f4f3 	udiv	r4, r4, r3
 8002bc6:	f7ff fa1c 	bl	8002002 <LL_RCC_PLL_GetR>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	0f5b      	lsrs	r3, r3, #29
 8002bce:	3301      	adds	r3, #1
 8002bd0:	fbb4 f3f3 	udiv	r3, r4, r3
 8002bd4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002bd6:	697b      	ldr	r3, [r7, #20]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	371c      	adds	r7, #28
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd90      	pop	{r4, r7, pc}
 8002be0:	0800a130 	.word	0x0800a130
 8002be4:	00f42400 	.word	0x00f42400
 8002be8:	01e84800 	.word	0x01e84800

08002bec <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bec:	b598      	push	{r3, r4, r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002bf0:	f7ff ff5c 	bl	8002aac <HAL_RCC_GetSysClockFreq>
 8002bf4:	4604      	mov	r4, r0
 8002bf6:	f7ff f99d 	bl	8001f34 <LL_RCC_GetAHBPrescaler>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	4a03      	ldr	r2, [pc, #12]	; (8002c10 <HAL_RCC_GetHCLKFreq+0x24>)
 8002c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c08:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	bd98      	pop	{r3, r4, r7, pc}
 8002c10:	0800a0d0 	.word	0x0800a0d0

08002c14 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c14:	b598      	push	{r3, r4, r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002c18:	f7ff ffe8 	bl	8002bec <HAL_RCC_GetHCLKFreq>
 8002c1c:	4604      	mov	r4, r0
 8002c1e:	f7ff f9a1 	bl	8001f64 <LL_RCC_GetAPB1Prescaler>
 8002c22:	4603      	mov	r3, r0
 8002c24:	0a1b      	lsrs	r3, r3, #8
 8002c26:	4a03      	ldr	r2, [pc, #12]	; (8002c34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c2c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	bd98      	pop	{r3, r4, r7, pc}
 8002c34:	0800a110 	.word	0x0800a110

08002c38 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c38:	b598      	push	{r3, r4, r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002c3c:	f7ff ffd6 	bl	8002bec <HAL_RCC_GetHCLKFreq>
 8002c40:	4604      	mov	r4, r0
 8002c42:	f7ff f99a 	bl	8001f7a <LL_RCC_GetAPB2Prescaler>
 8002c46:	4603      	mov	r3, r0
 8002c48:	0adb      	lsrs	r3, r3, #11
 8002c4a:	4a03      	ldr	r2, [pc, #12]	; (8002c58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c50:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	bd98      	pop	{r3, r4, r7, pc}
 8002c58:	0800a110 	.word	0x0800a110

08002c5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002c5c:	b590      	push	{r4, r7, lr}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	091b      	lsrs	r3, r3, #4
 8002c68:	f003 030f 	and.w	r3, r3, #15
 8002c6c:	4a10      	ldr	r2, [pc, #64]	; (8002cb0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c72:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002c74:	f7ff f969 	bl	8001f4a <LL_RCC_GetAHB3Prescaler>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	091b      	lsrs	r3, r3, #4
 8002c7c:	f003 030f 	and.w	r3, r3, #15
 8002c80:	4a0c      	ldr	r2, [pc, #48]	; (8002cb4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	4a09      	ldr	r2, [pc, #36]	; (8002cb8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002c92:	fba2 2303 	umull	r2, r3, r2, r3
 8002c96:	0c9c      	lsrs	r4, r3, #18
 8002c98:	f7fe ff68 	bl	8001b6c <HAL_PWREx_GetVoltageRange>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	f000 f80b 	bl	8002cbc <RCC_SetFlashLatency>
 8002ca6:	4603      	mov	r3, r0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd90      	pop	{r4, r7, pc}
 8002cb0:	0800a130 	.word	0x0800a130
 8002cb4:	0800a0d0 	.word	0x0800a0d0
 8002cb8:	431bde83 	.word	0x431bde83

08002cbc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08e      	sub	sp, #56	; 0x38
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002cc6:	4a3c      	ldr	r2, [pc, #240]	; (8002db8 <RCC_SetFlashLatency+0xfc>)
 8002cc8:	f107 0320 	add.w	r3, r7, #32
 8002ccc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cd0:	6018      	str	r0, [r3, #0]
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002cd6:	4a39      	ldr	r2, [pc, #228]	; (8002dbc <RCC_SetFlashLatency+0x100>)
 8002cd8:	f107 0318 	add.w	r3, r7, #24
 8002cdc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ce0:	6018      	str	r0, [r3, #0]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002ce6:	4a36      	ldr	r2, [pc, #216]	; (8002dc0 <RCC_SetFlashLatency+0x104>)
 8002ce8:	f107 030c 	add.w	r3, r7, #12
 8002cec:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cee:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cfc:	d11d      	bne.n	8002d3a <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002cfe:	2300      	movs	r3, #0
 8002d00:	633b      	str	r3, [r7, #48]	; 0x30
 8002d02:	e016      	b.n	8002d32 <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002d12:	461a      	mov	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d808      	bhi.n	8002d2c <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d22:	4413      	add	r3, r2
 8002d24:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002d28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d2a:	e023      	b.n	8002d74 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2e:	3301      	adds	r3, #1
 8002d30:	633b      	str	r3, [r7, #48]	; 0x30
 8002d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d9e5      	bls.n	8002d04 <RCC_SetFlashLatency+0x48>
 8002d38:	e01c      	b.n	8002d74 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d3e:	e016      	b.n	8002d6e <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d48:	4413      	add	r3, r2
 8002d4a:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d808      	bhi.n	8002d68 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002d5e:	4413      	add	r3, r2
 8002d60:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002d64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d66:	e005      	b.n	8002d74 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d9e5      	bls.n	8002d40 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d74:	4b13      	ldr	r3, [pc, #76]	; (8002dc4 <RCC_SetFlashLatency+0x108>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f023 0207 	bic.w	r2, r3, #7
 8002d7c:	4911      	ldr	r1, [pc, #68]	; (8002dc4 <RCC_SetFlashLatency+0x108>)
 8002d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d80:	4313      	orrs	r3, r2
 8002d82:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002d84:	f7fd ff1b 	bl	8000bbe <HAL_GetTick>
 8002d88:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002d8a:	e008      	b.n	8002d9e <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002d8c:	f7fd ff17 	bl	8000bbe <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e007      	b.n	8002dae <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002d9e:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <RCC_SetFlashLatency+0x108>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d1ef      	bne.n	8002d8c <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3738      	adds	r7, #56	; 0x38
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	0800a090 	.word	0x0800a090
 8002dbc:	0800a098 	.word	0x0800a098
 8002dc0:	0800a0a0 	.word	0x0800a0a0
 8002dc4:	58004000 	.word	0x58004000

08002dc8 <LL_RCC_LSE_IsReady>:
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d101      	bne.n	8002de0 <LL_RCC_LSE_IsReady+0x18>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e000      	b.n	8002de2 <LL_RCC_LSE_IsReady+0x1a>
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bc80      	pop	{r7}
 8002de8:	4770      	bx	lr

08002dea <LL_RCC_SetUSARTClockSource>:
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	0c1b      	lsrs	r3, r3, #16
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	401a      	ands	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr

08002e1a <LL_RCC_SetI2SClockSource>:
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <LL_RCC_SetLPUARTClockSource>:
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e54:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr

08002e6e <LL_RCC_SetI2CClockSource>:
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e7a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	091b      	lsrs	r3, r3, #4
 8002e82:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002e86:	43db      	mvns	r3, r3
 8002e88:	401a      	ands	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002e92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr

08002ea6 <LL_RCC_SetLPTIMClockSource>:
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	0c1b      	lsrs	r3, r3, #16
 8002eba:	041b      	lsls	r3, r3, #16
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	041b      	lsls	r3, r3, #16
 8002ec4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr

08002ed8 <LL_RCC_SetRNGClockSource>:
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002eec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr

08002f02 <LL_RCC_SetADCClockSource>:
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f12:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr

08002f2c <LL_RCC_SetRTCClockSource>:
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr

08002f56 <LL_RCC_GetRTCClockSource>:
{
 8002f56:	b480      	push	{r7}
 8002f58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bc80      	pop	{r7}
 8002f6c:	4770      	bx	lr

08002f6e <LL_RCC_ForceBackupDomainReset>:
{
 8002f6e:	b480      	push	{r7}
 8002f70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f86:	bf00      	nop
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr

08002f8e <LL_RCC_ReleaseBackupDomainReset>:
{
 8002f8e:	b480      	push	{r7}
 8002f90:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002fa6:	bf00      	nop
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr
	...

08002fb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d058      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002fd0:	f7fe fdbe 	bl	8001b50 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fd4:	f7fd fdf3 	bl	8000bbe <HAL_GetTick>
 8002fd8:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002fda:	e009      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fdc:	f7fd fdef 	bl	8000bbe <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d902      	bls.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	74fb      	strb	r3, [r7, #19]
        break;
 8002fee:	e006      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002ff0:	4b7b      	ldr	r3, [pc, #492]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ffc:	d1ee      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002ffe:	7cfb      	ldrb	r3, [r7, #19]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d13c      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003004:	f7ff ffa7 	bl	8002f56 <LL_RCC_GetRTCClockSource>
 8003008:	4602      	mov	r2, r0
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300e:	429a      	cmp	r2, r3
 8003010:	d00f      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800301e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003020:	f7ff ffa5 	bl	8002f6e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003024:	f7ff ffb3 	bl	8002f8e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003028:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d014      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303c:	f7fd fdbf 	bl	8000bbe <HAL_GetTick>
 8003040:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003042:	e00b      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003044:	f7fd fdbb 	bl	8000bbe <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003052:	4293      	cmp	r3, r2
 8003054:	d902      	bls.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	74fb      	strb	r3, [r7, #19]
            break;
 800305a:	e004      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800305c:	f7ff feb4 	bl	8002dc8 <LL_RCC_LSE_IsReady>
 8003060:	4603      	mov	r3, r0
 8003062:	2b01      	cmp	r3, #1
 8003064:	d1ee      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003066:	7cfb      	ldrb	r3, [r7, #19]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d105      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff ff5b 	bl	8002f2c <LL_RCC_SetRTCClockSource>
 8003076:	e004      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003078:	7cfb      	ldrb	r3, [r7, #19]
 800307a:	74bb      	strb	r3, [r7, #18]
 800307c:	e001      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800307e:	7cfb      	ldrb	r3, [r7, #19]
 8003080:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d004      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff fea9 	bl	8002dea <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d004      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff fe9e 	bl	8002dea <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0320 	and.w	r3, r3, #32
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d004      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff fec0 	bl	8002e44 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d004      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff fee6 	bl	8002ea6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d004      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff fedb 	bl	8002ea6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d004      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff fed0 	bl	8002ea6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310e:	2b00      	cmp	r3, #0
 8003110:	d004      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fea9 	bl	8002e6e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003124:	2b00      	cmp	r3, #0
 8003126:	d004      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff fe9e 	bl	8002e6e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313a:	2b00      	cmp	r3, #0
 800313c:	d004      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff fe93 	bl	8002e6e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0310 	and.w	r3, r3, #16
 8003150:	2b00      	cmp	r3, #0
 8003152:	d011      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff fe5e 	bl	8002e1a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003166:	d107      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003176:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d010      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fea5 	bl	8002ed8 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	2b00      	cmp	r3, #0
 8003194:	d107      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031a4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d011      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff fea3 	bl	8002f02 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031c4:	d107      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80031c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80031d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	58000400 	.word	0x58000400

080031e4 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80031ec:	4b06      	ldr	r3, [pc, #24]	; (8003208 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80031f4:	4904      	ldr	r1, [pc, #16]	; (8003208 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	608b      	str	r3, [r1, #8]
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	58000400 	.word	0x58000400

0800320c <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003210:	4b05      	ldr	r3, [pc, #20]	; (8003228 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003216:	4a04      	ldr	r2, [pc, #16]	; (8003228 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8003218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800321c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003220:	bf00      	nop
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr
 8003228:	58000400 	.word	0x58000400

0800322c <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8003230:	4b05      	ldr	r3, [pc, #20]	; (8003248 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003236:	4a04      	ldr	r2, [pc, #16]	; (8003248 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8003238:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800323c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003240:	bf00      	nop
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr
 8003248:	58000400 	.word	0x58000400

0800324c <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8003250:	4b03      	ldr	r3, [pc, #12]	; (8003260 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8003252:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003256:	619a      	str	r2, [r3, #24]
}
 8003258:	bf00      	nop
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr
 8003260:	58000400 	.word	0x58000400

08003264 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8003268:	4b06      	ldr	r3, [pc, #24]	; (8003284 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b02      	cmp	r3, #2
 8003272:	d101      	bne.n	8003278 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8003274:	2301      	movs	r3, #1
 8003276:	e000      	b.n	800327a <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	bc80      	pop	{r7}
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	58000400 	.word	0x58000400

08003288 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800328c:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b04      	cmp	r3, #4
 8003296:	d101      	bne.n	800329c <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	58000400 	.word	0x58000400

080032ac <LL_RCC_RF_DisableReset>:
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80032b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80032c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80032c4:	bf00      	nop
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr

080032cc <LL_RCC_IsRFUnderReset>:
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80032d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032e0:	d101      	bne.n	80032e6 <LL_RCC_IsRFUnderReset+0x1a>
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <LL_RCC_IsRFUnderReset+0x1c>
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr

080032f0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80032f8:	4b06      	ldr	r3, [pc, #24]	; (8003314 <LL_EXTI_EnableIT_32_63+0x24>)
 80032fa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80032fe:	4905      	ldr	r1, [pc, #20]	; (8003314 <LL_EXTI_EnableIT_32_63+0x24>)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4313      	orrs	r3, r2
 8003304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	bc80      	pop	{r7}
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	58000800 	.word	0x58000800

08003318 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d103      	bne.n	800332e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	73fb      	strb	r3, [r7, #15]
    return status;
 800332a:	7bfb      	ldrb	r3, [r7, #15]
 800332c:	e04b      	b.n	80033c6 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 800332e:	2300      	movs	r3, #0
 8003330:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	799b      	ldrb	r3, [r3, #6]
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d105      	bne.n	8003348 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7fd fc22 	bl	8000b8c <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 800334e:	f7ff ffad 	bl	80032ac <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003352:	4b1f      	ldr	r3, [pc, #124]	; (80033d0 <HAL_SUBGHZ_Init+0xb8>)
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	4613      	mov	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	0cdb      	lsrs	r3, r3, #19
 8003360:	2264      	movs	r2, #100	; 0x64
 8003362:	fb02 f303 	mul.w	r3, r2, r3
 8003366:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d105      	bne.n	800337a <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	609a      	str	r2, [r3, #8]
      break;
 8003378:	e007      	b.n	800338a <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	3b01      	subs	r3, #1
 800337e:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8003380:	f7ff ffa4 	bl	80032cc <LL_RCC_IsRFUnderReset>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1ee      	bne.n	8003368 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 800338a:	f7ff ff3f 	bl	800320c <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800338e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003392:	f7ff ffad 	bl	80032f0 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8003396:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800339a:	f7ff ff23 	bl	80031e4 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800339e:	f7ff ff55 	bl	800324c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80033a2:	7bfb      	ldrb	r3, [r7, #15]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10a      	bne.n	80033be <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 faad 	bl	800390c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	719a      	strb	r2, [r3, #6]

  return status;
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20000004 	.word	0x20000004

080033d4 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	607a      	str	r2, [r7, #4]
 80033de:	461a      	mov	r2, r3
 80033e0:	460b      	mov	r3, r1
 80033e2:	817b      	strh	r3, [r7, #10]
 80033e4:	4613      	mov	r3, r2
 80033e6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	799b      	ldrb	r3, [r3, #6]
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d14a      	bne.n	8003488 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	795b      	ldrb	r3, [r3, #5]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d101      	bne.n	80033fe <HAL_SUBGHZ_WriteRegisters+0x2a>
 80033fa:	2302      	movs	r3, #2
 80033fc:	e045      	b.n	800348a <HAL_SUBGHZ_WriteRegisters+0xb6>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2201      	movs	r2, #1
 8003402:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2202      	movs	r2, #2
 8003408:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 fb4c 	bl	8003aa8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003410:	f7ff ff0c 	bl	800322c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8003414:	210d      	movs	r1, #13
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 fa98 	bl	800394c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800341c:	897b      	ldrh	r3, [r7, #10]
 800341e:	0a1b      	lsrs	r3, r3, #8
 8003420:	b29b      	uxth	r3, r3
 8003422:	b2db      	uxtb	r3, r3
 8003424:	4619      	mov	r1, r3
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 fa90 	bl	800394c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800342c:	897b      	ldrh	r3, [r7, #10]
 800342e:	b2db      	uxtb	r3, r3
 8003430:	4619      	mov	r1, r3
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 fa8a 	bl	800394c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003438:	2300      	movs	r3, #0
 800343a:	82bb      	strh	r3, [r7, #20]
 800343c:	e00a      	b.n	8003454 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800343e:	8abb      	ldrh	r3, [r7, #20]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	4413      	add	r3, r2
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	4619      	mov	r1, r3
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 fa7f 	bl	800394c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800344e:	8abb      	ldrh	r3, [r7, #20]
 8003450:	3301      	adds	r3, #1
 8003452:	82bb      	strh	r3, [r7, #20]
 8003454:	8aba      	ldrh	r2, [r7, #20]
 8003456:	893b      	ldrh	r3, [r7, #8]
 8003458:	429a      	cmp	r2, r3
 800345a:	d3f0      	bcc.n	800343e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800345c:	f7ff fed6 	bl	800320c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 fb45 	bl	8003af0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	75fb      	strb	r3, [r7, #23]
 8003472:	e001      	b.n	8003478 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8003474:	2300      	movs	r3, #0
 8003476:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2201      	movs	r2, #1
 800347c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	715a      	strb	r2, [r3, #5]

    return status;
 8003484:	7dfb      	ldrb	r3, [r7, #23]
 8003486:	e000      	b.n	800348a <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003488:	2302      	movs	r3, #2
  }
}
 800348a:	4618      	mov	r0, r3
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b088      	sub	sp, #32
 8003496:	af00      	add	r7, sp, #0
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	607a      	str	r2, [r7, #4]
 800349c:	461a      	mov	r2, r3
 800349e:	460b      	mov	r3, r1
 80034a0:	817b      	strh	r3, [r7, #10]
 80034a2:	4613      	mov	r3, r2
 80034a4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	799b      	ldrb	r3, [r3, #6]
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d14a      	bne.n	800354a <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	795b      	ldrb	r3, [r3, #5]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_SUBGHZ_ReadRegisters+0x2e>
 80034bc:	2302      	movs	r3, #2
 80034be:	e045      	b.n	800354c <HAL_SUBGHZ_ReadRegisters+0xba>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2201      	movs	r2, #1
 80034c4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 faee 	bl	8003aa8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80034cc:	f7ff feae 	bl	800322c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80034d0:	211d      	movs	r1, #29
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 fa3a 	bl	800394c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80034d8:	897b      	ldrh	r3, [r7, #10]
 80034da:	0a1b      	lsrs	r3, r3, #8
 80034dc:	b29b      	uxth	r3, r3
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	4619      	mov	r1, r3
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 fa32 	bl	800394c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80034e8:	897b      	ldrh	r3, [r7, #10]
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	4619      	mov	r1, r3
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 fa2c 	bl	800394c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80034f4:	2100      	movs	r1, #0
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 fa28 	bl	800394c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80034fc:	2300      	movs	r3, #0
 80034fe:	82fb      	strh	r3, [r7, #22]
 8003500:	e009      	b.n	8003516 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003502:	69b9      	ldr	r1, [r7, #24]
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 fa77 	bl	80039f8 <SUBGHZSPI_Receive>
      pData++;
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	3301      	adds	r3, #1
 800350e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003510:	8afb      	ldrh	r3, [r7, #22]
 8003512:	3301      	adds	r3, #1
 8003514:	82fb      	strh	r3, [r7, #22]
 8003516:	8afa      	ldrh	r2, [r7, #22]
 8003518:	893b      	ldrh	r3, [r7, #8]
 800351a:	429a      	cmp	r2, r3
 800351c:	d3f1      	bcc.n	8003502 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800351e:	f7ff fe75 	bl	800320c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 fae4 	bl	8003af0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d002      	beq.n	8003536 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	77fb      	strb	r3, [r7, #31]
 8003534:	e001      	b.n	800353a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2201      	movs	r2, #1
 800353e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	715a      	strb	r2, [r3, #5]

    return status;
 8003546:	7ffb      	ldrb	r3, [r7, #31]
 8003548:	e000      	b.n	800354c <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800354a:	2302      	movs	r3, #2
  }
}
 800354c:	4618      	mov	r0, r3
 800354e:	3720      	adds	r7, #32
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	607a      	str	r2, [r7, #4]
 800355e:	461a      	mov	r2, r3
 8003560:	460b      	mov	r3, r1
 8003562:	72fb      	strb	r3, [r7, #11]
 8003564:	4613      	mov	r3, r2
 8003566:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	799b      	ldrb	r3, [r3, #6]
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b01      	cmp	r3, #1
 8003570:	d14a      	bne.n	8003608 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	795b      	ldrb	r3, [r3, #5]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800357a:	2302      	movs	r3, #2
 800357c:	e045      	b.n	800360a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2201      	movs	r2, #1
 8003582:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 fa8f 	bl	8003aa8 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800358a:	7afb      	ldrb	r3, [r7, #11]
 800358c:	2b84      	cmp	r3, #132	; 0x84
 800358e:	d002      	beq.n	8003596 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8003590:	7afb      	ldrb	r3, [r7, #11]
 8003592:	2b94      	cmp	r3, #148	; 0x94
 8003594:	d103      	bne.n	800359e <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2201      	movs	r2, #1
 800359a:	711a      	strb	r2, [r3, #4]
 800359c:	e002      	b.n	80035a4 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80035a4:	f7ff fe42 	bl	800322c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80035a8:	7afb      	ldrb	r3, [r7, #11]
 80035aa:	4619      	mov	r1, r3
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 f9cd 	bl	800394c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80035b2:	2300      	movs	r3, #0
 80035b4:	82bb      	strh	r3, [r7, #20]
 80035b6:	e00a      	b.n	80035ce <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80035b8:	8abb      	ldrh	r3, [r7, #20]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	4413      	add	r3, r2
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	4619      	mov	r1, r3
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 f9c2 	bl	800394c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80035c8:	8abb      	ldrh	r3, [r7, #20]
 80035ca:	3301      	adds	r3, #1
 80035cc:	82bb      	strh	r3, [r7, #20]
 80035ce:	8aba      	ldrh	r2, [r7, #20]
 80035d0:	893b      	ldrh	r3, [r7, #8]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d3f0      	bcc.n	80035b8 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80035d6:	f7ff fe19 	bl	800320c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80035da:	7afb      	ldrb	r3, [r7, #11]
 80035dc:	2b84      	cmp	r3, #132	; 0x84
 80035de:	d002      	beq.n	80035e6 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 fa85 	bl	8003af0 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	75fb      	strb	r3, [r7, #23]
 80035f2:	e001      	b.n	80035f8 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2201      	movs	r2, #1
 80035fc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	715a      	strb	r2, [r3, #5]

    return status;
 8003604:	7dfb      	ldrb	r3, [r7, #23]
 8003606:	e000      	b.n	800360a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003608:	2302      	movs	r3, #2
  }
}
 800360a:	4618      	mov	r0, r3
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b088      	sub	sp, #32
 8003616:	af00      	add	r7, sp, #0
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	607a      	str	r2, [r7, #4]
 800361c:	461a      	mov	r2, r3
 800361e:	460b      	mov	r3, r1
 8003620:	72fb      	strb	r3, [r7, #11]
 8003622:	4613      	mov	r3, r2
 8003624:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	799b      	ldrb	r3, [r3, #6]
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b01      	cmp	r3, #1
 8003632:	d13d      	bne.n	80036b0 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	795b      	ldrb	r3, [r3, #5]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d101      	bne.n	8003640 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800363c:	2302      	movs	r3, #2
 800363e:	e038      	b.n	80036b2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2201      	movs	r2, #1
 8003644:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 fa2e 	bl	8003aa8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800364c:	f7ff fdee 	bl	800322c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003650:	7afb      	ldrb	r3, [r7, #11]
 8003652:	4619      	mov	r1, r3
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 f979 	bl	800394c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800365a:	2100      	movs	r1, #0
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 f975 	bl	800394c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003662:	2300      	movs	r3, #0
 8003664:	82fb      	strh	r3, [r7, #22]
 8003666:	e009      	b.n	800367c <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003668:	69b9      	ldr	r1, [r7, #24]
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 f9c4 	bl	80039f8 <SUBGHZSPI_Receive>
      pData++;
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	3301      	adds	r3, #1
 8003674:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003676:	8afb      	ldrh	r3, [r7, #22]
 8003678:	3301      	adds	r3, #1
 800367a:	82fb      	strh	r3, [r7, #22]
 800367c:	8afa      	ldrh	r2, [r7, #22]
 800367e:	893b      	ldrh	r3, [r7, #8]
 8003680:	429a      	cmp	r2, r3
 8003682:	d3f1      	bcc.n	8003668 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003684:	f7ff fdc2 	bl	800320c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 fa31 	bl	8003af0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	77fb      	strb	r3, [r7, #31]
 800369a:	e001      	b.n	80036a0 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2201      	movs	r2, #1
 80036a4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	715a      	strb	r2, [r3, #5]

    return status;
 80036ac:	7ffb      	ldrb	r3, [r7, #31]
 80036ae:	e000      	b.n	80036b2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80036b0:	2302      	movs	r3, #2
  }
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3720      	adds	r7, #32
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b086      	sub	sp, #24
 80036be:	af00      	add	r7, sp, #0
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	461a      	mov	r2, r3
 80036c6:	460b      	mov	r3, r1
 80036c8:	72fb      	strb	r3, [r7, #11]
 80036ca:	4613      	mov	r3, r2
 80036cc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	799b      	ldrb	r3, [r3, #6]
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d13e      	bne.n	8003756 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	795b      	ldrb	r3, [r3, #5]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_SUBGHZ_WriteBuffer+0x2a>
 80036e0:	2302      	movs	r3, #2
 80036e2:	e039      	b.n	8003758 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2201      	movs	r2, #1
 80036e8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f9dc 	bl	8003aa8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80036f0:	f7ff fd9c 	bl	800322c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80036f4:	210e      	movs	r1, #14
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 f928 	bl	800394c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80036fc:	7afb      	ldrb	r3, [r7, #11]
 80036fe:	4619      	mov	r1, r3
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 f923 	bl	800394c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003706:	2300      	movs	r3, #0
 8003708:	82bb      	strh	r3, [r7, #20]
 800370a:	e00a      	b.n	8003722 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800370c:	8abb      	ldrh	r3, [r7, #20]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	4413      	add	r3, r2
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	4619      	mov	r1, r3
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 f918 	bl	800394c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800371c:	8abb      	ldrh	r3, [r7, #20]
 800371e:	3301      	adds	r3, #1
 8003720:	82bb      	strh	r3, [r7, #20]
 8003722:	8aba      	ldrh	r2, [r7, #20]
 8003724:	893b      	ldrh	r3, [r7, #8]
 8003726:	429a      	cmp	r2, r3
 8003728:	d3f0      	bcc.n	800370c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800372a:	f7ff fd6f 	bl	800320c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 f9de 	bl	8003af0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d002      	beq.n	8003742 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	75fb      	strb	r3, [r7, #23]
 8003740:	e001      	b.n	8003746 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2201      	movs	r2, #1
 800374a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	715a      	strb	r2, [r3, #5]

    return status;
 8003752:	7dfb      	ldrb	r3, [r7, #23]
 8003754:	e000      	b.n	8003758 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003756:	2302      	movs	r3, #2
  }
}
 8003758:	4618      	mov	r0, r3
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	607a      	str	r2, [r7, #4]
 800376a:	461a      	mov	r2, r3
 800376c:	460b      	mov	r3, r1
 800376e:	72fb      	strb	r3, [r7, #11]
 8003770:	4613      	mov	r3, r2
 8003772:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	799b      	ldrb	r3, [r3, #6]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b01      	cmp	r3, #1
 8003780:	d141      	bne.n	8003806 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	795b      	ldrb	r3, [r3, #5]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_SUBGHZ_ReadBuffer+0x2e>
 800378a:	2302      	movs	r3, #2
 800378c:	e03c      	b.n	8003808 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2201      	movs	r2, #1
 8003792:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 f987 	bl	8003aa8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800379a:	f7ff fd47 	bl	800322c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800379e:	211e      	movs	r1, #30
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 f8d3 	bl	800394c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80037a6:	7afb      	ldrb	r3, [r7, #11]
 80037a8:	4619      	mov	r1, r3
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 f8ce 	bl	800394c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80037b0:	2100      	movs	r1, #0
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f000 f8ca 	bl	800394c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80037b8:	2300      	movs	r3, #0
 80037ba:	82fb      	strh	r3, [r7, #22]
 80037bc:	e009      	b.n	80037d2 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80037be:	69b9      	ldr	r1, [r7, #24]
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 f919 	bl	80039f8 <SUBGHZSPI_Receive>
      pData++;
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	3301      	adds	r3, #1
 80037ca:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80037cc:	8afb      	ldrh	r3, [r7, #22]
 80037ce:	3301      	adds	r3, #1
 80037d0:	82fb      	strh	r3, [r7, #22]
 80037d2:	8afa      	ldrh	r2, [r7, #22]
 80037d4:	893b      	ldrh	r3, [r7, #8]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d3f1      	bcc.n	80037be <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80037da:	f7ff fd17 	bl	800320c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 f986 	bl	8003af0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d002      	beq.n	80037f2 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	77fb      	strb	r3, [r7, #31]
 80037f0:	e001      	b.n	80037f6 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2201      	movs	r2, #1
 80037fa:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	715a      	strb	r2, [r3, #5]

    return status;
 8003802:	7ffb      	ldrb	r3, [r7, #31]
 8003804:	e000      	b.n	8003808 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003806:	2302      	movs	r3, #2
  }
}
 8003808:	4618      	mov	r0, r3
 800380a:	3720      	adds	r7, #32
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 8003818:	2300      	movs	r3, #0
 800381a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 800381c:	f107 020c 	add.w	r2, r7, #12
 8003820:	2302      	movs	r3, #2
 8003822:	2112      	movs	r1, #18
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7ff fef4 	bl	8003612 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 800382a:	7b3b      	ldrb	r3, [r7, #12]
 800382c:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 800382e:	89fb      	ldrh	r3, [r7, #14]
 8003830:	021b      	lsls	r3, r3, #8
 8003832:	b21a      	sxth	r2, r3
 8003834:	7b7b      	ldrb	r3, [r7, #13]
 8003836:	b21b      	sxth	r3, r3
 8003838:	4313      	orrs	r3, r2
 800383a:	b21b      	sxth	r3, r3
 800383c:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800383e:	89fb      	ldrh	r3, [r7, #14]
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f005 f9ff 	bl	8008c4c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800384e:	89fb      	ldrh	r3, [r7, #14]
 8003850:	085b      	lsrs	r3, r3, #1
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f005 fa04 	bl	8008c68 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8003860:	89fb      	ldrh	r3, [r7, #14]
 8003862:	089b      	lsrs	r3, r3, #2
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f005 fa53 	bl	8008d18 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8003872:	89fb      	ldrh	r3, [r7, #14]
 8003874:	08db      	lsrs	r3, r3, #3
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f005 fa58 	bl	8008d34 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8003884:	89fb      	ldrh	r3, [r7, #14]
 8003886:	091b      	lsrs	r3, r3, #4
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f005 fa5d 	bl	8008d50 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8003896:	89fb      	ldrh	r3, [r7, #14]
 8003898:	095b      	lsrs	r3, r3, #5
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f005 fa2a 	bl	8008cfc <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80038a8:	89fb      	ldrh	r3, [r7, #14]
 80038aa:	099b      	lsrs	r3, r3, #6
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f005 f9e5 	bl	8008c84 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80038ba:	89fb      	ldrh	r3, [r7, #14]
 80038bc:	09db      	lsrs	r3, r3, #7
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00e      	beq.n	80038e4 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80038c6:	89fb      	ldrh	r3, [r7, #14]
 80038c8:	0a1b      	lsrs	r3, r3, #8
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d004      	beq.n	80038dc <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80038d2:	2101      	movs	r1, #1
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f005 f9e3 	bl	8008ca0 <HAL_SUBGHZ_CADStatusCallback>
 80038da:	e003      	b.n	80038e4 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80038dc:	2100      	movs	r1, #0
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f005 f9de 	bl	8008ca0 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80038e4:	89fb      	ldrh	r3, [r7, #14]
 80038e6:	0a5b      	lsrs	r3, r3, #9
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d002      	beq.n	80038f6 <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f005 f9f3 	bl	8008cdc <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 80038f6:	f107 020c 	add.w	r2, r7, #12
 80038fa:	2302      	movs	r3, #2
 80038fc:	2102      	movs	r1, #2
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff fe28 	bl	8003554 <HAL_SUBGHZ_ExecSetCmd>
}
 8003904:	bf00      	nop
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003914:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <SUBGHZSPI_Init+0x3c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a0b      	ldr	r2, [pc, #44]	; (8003948 <SUBGHZSPI_Init+0x3c>)
 800391a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800391e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8003920:	4a09      	ldr	r2, [pc, #36]	; (8003948 <SUBGHZSPI_Init+0x3c>)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8003928:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800392a:	4b07      	ldr	r3, [pc, #28]	; (8003948 <SUBGHZSPI_Init+0x3c>)
 800392c:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8003930:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8003932:	4b05      	ldr	r3, [pc, #20]	; (8003948 <SUBGHZSPI_Init+0x3c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a04      	ldr	r2, [pc, #16]	; (8003948 <SUBGHZSPI_Init+0x3c>)
 8003938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800393c:	6013      	str	r3, [r2, #0]
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr
 8003948:	58010000 	.word	0x58010000

0800394c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	460b      	mov	r3, r1
 8003956:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800395c:	4b23      	ldr	r3, [pc, #140]	; (80039ec <SUBGHZSPI_Transmit+0xa0>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	4613      	mov	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	1a9b      	subs	r3, r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	0cdb      	lsrs	r3, r3, #19
 800396a:	2264      	movs	r2, #100	; 0x64
 800396c:	fb02 f303 	mul.w	r3, r2, r3
 8003970:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d105      	bne.n	8003984 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	609a      	str	r2, [r3, #8]
      break;
 8003982:	e008      	b.n	8003996 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	3b01      	subs	r3, #1
 8003988:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800398a:	4b19      	ldr	r3, [pc, #100]	; (80039f0 <SUBGHZSPI_Transmit+0xa4>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b02      	cmp	r3, #2
 8003994:	d1ed      	bne.n	8003972 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003996:	4b17      	ldr	r3, [pc, #92]	; (80039f4 <SUBGHZSPI_Transmit+0xa8>)
 8003998:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	78fa      	ldrb	r2, [r7, #3]
 800399e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80039a0:	4b12      	ldr	r3, [pc, #72]	; (80039ec <SUBGHZSPI_Transmit+0xa0>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	4613      	mov	r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	0cdb      	lsrs	r3, r3, #19
 80039ae:	2264      	movs	r2, #100	; 0x64
 80039b0:	fb02 f303 	mul.w	r3, r2, r3
 80039b4:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d105      	bne.n	80039c8 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	609a      	str	r2, [r3, #8]
      break;
 80039c6:	e008      	b.n	80039da <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80039ce:	4b08      	ldr	r3, [pc, #32]	; (80039f0 <SUBGHZSPI_Transmit+0xa4>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d1ed      	bne.n	80039b6 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <SUBGHZSPI_Transmit+0xa4>)
 80039dc:	68db      	ldr	r3, [r3, #12]

  return status;
 80039de:	7dfb      	ldrb	r3, [r7, #23]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	371c      	adds	r7, #28
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bc80      	pop	{r7}
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	20000004 	.word	0x20000004
 80039f0:	58010000 	.word	0x58010000
 80039f4:	5801000c 	.word	0x5801000c

080039f8 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003a06:	4b25      	ldr	r3, [pc, #148]	; (8003a9c <SUBGHZSPI_Receive+0xa4>)
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	1a9b      	subs	r3, r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	0cdb      	lsrs	r3, r3, #19
 8003a14:	2264      	movs	r2, #100	; 0x64
 8003a16:	fb02 f303 	mul.w	r3, r2, r3
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d105      	bne.n	8003a2e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	609a      	str	r2, [r3, #8]
      break;
 8003a2c:	e008      	b.n	8003a40 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	3b01      	subs	r3, #1
 8003a32:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003a34:	4b1a      	ldr	r3, [pc, #104]	; (8003aa0 <SUBGHZSPI_Receive+0xa8>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d1ed      	bne.n	8003a1c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8003a40:	4b18      	ldr	r3, [pc, #96]	; (8003aa4 <SUBGHZSPI_Receive+0xac>)
 8003a42:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	22ff      	movs	r2, #255	; 0xff
 8003a48:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003a4a:	4b14      	ldr	r3, [pc, #80]	; (8003a9c <SUBGHZSPI_Receive+0xa4>)
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	1a9b      	subs	r3, r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	0cdb      	lsrs	r3, r3, #19
 8003a58:	2264      	movs	r2, #100	; 0x64
 8003a5a:	fb02 f303 	mul.w	r3, r2, r3
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d105      	bne.n	8003a72 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	609a      	str	r2, [r3, #8]
      break;
 8003a70:	e008      	b.n	8003a84 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	3b01      	subs	r3, #1
 8003a76:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003a78:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <SUBGHZSPI_Receive+0xa8>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d1ed      	bne.n	8003a60 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8003a84:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <SUBGHZSPI_Receive+0xa8>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	701a      	strb	r2, [r3, #0]

  return status;
 8003a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	371c      	adds	r7, #28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	20000004 	.word	0x20000004
 8003aa0:	58010000 	.word	0x58010000
 8003aa4:	5801000c 	.word	0x5801000c

08003aa8 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	791b      	ldrb	r3, [r3, #4]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d111      	bne.n	8003adc <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8003ab8:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <SUBGHZ_CheckDeviceReady+0x44>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4613      	mov	r3, r2
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	4413      	add	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	0c1b      	lsrs	r3, r3, #16
 8003ac6:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003ac8:	f7ff fbb0 	bl	800322c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1f9      	bne.n	8003acc <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003ad8:	f7ff fb98 	bl	800320c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f807 	bl	8003af0 <SUBGHZ_WaitOnBusy>
 8003ae2:	4603      	mov	r3, r0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	20000004 	.word	0x20000004

08003af0 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8003af8:	2300      	movs	r3, #0
 8003afa:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8003afc:	4b12      	ldr	r3, [pc, #72]	; (8003b48 <SUBGHZ_WaitOnBusy+0x58>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	4613      	mov	r3, r2
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	4413      	add	r3, r2
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	0d1b      	lsrs	r3, r3, #20
 8003b0a:	2264      	movs	r2, #100	; 0x64
 8003b0c:	fb02 f303 	mul.w	r3, r2, r3
 8003b10:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8003b12:	f7ff fbb9 	bl	8003288 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8003b16:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d105      	bne.n	8003b2a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2202      	movs	r2, #2
 8003b26:	609a      	str	r2, [r3, #8]
      break;
 8003b28:	e009      	b.n	8003b3e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8003b30:	f7ff fb98 	bl	8003264 <LL_PWR_IsActiveFlag_RFBUSYS>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d0e9      	beq.n	8003b12 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8003b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	20000004 	.word	0x20000004

08003b4c <LL_RCC_GetUSARTClockSource>:
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b58:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	401a      	ands	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	041b      	lsls	r3, r3, #16
 8003b64:	4313      	orrs	r3, r2
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr

08003b70 <LL_RCC_GetLPUARTClockSource>:
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4013      	ands	r3, r2
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc80      	pop	{r7}
 8003b8c:	4770      	bx	lr

08003b8e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b082      	sub	sp, #8
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e042      	b.n	8003c26 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7fd f946 	bl	8000e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2224      	movs	r2, #36	; 0x24
 8003bbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0201 	bic.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 fcf7 	bl	80045c4 <UART_SetConfig>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e022      	b.n	8003c26 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 ff3b 	bl	8004a64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bfc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c0c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f042 0201 	orr.w	r2, r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 ffc1 	bl	8004ba6 <UART_CheckIdleState>
 8003c24:	4603      	mov	r3, r0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b08a      	sub	sp, #40	; 0x28
 8003c32:	af02      	add	r7, sp, #8
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	603b      	str	r3, [r7, #0]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c44:	2b20      	cmp	r3, #32
 8003c46:	f040 8083 	bne.w	8003d50 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d002      	beq.n	8003c56 <HAL_UART_Transmit+0x28>
 8003c50:	88fb      	ldrh	r3, [r7, #6]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e07b      	b.n	8003d52 <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <HAL_UART_Transmit+0x3a>
 8003c64:	2302      	movs	r3, #2
 8003c66:	e074      	b.n	8003d52 <HAL_UART_Transmit+0x124>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2221      	movs	r2, #33	; 0x21
 8003c7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c80:	f7fc ff9d 	bl	8000bbe <HAL_GetTick>
 8003c84:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	88fa      	ldrh	r2, [r7, #6]
 8003c8a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	88fa      	ldrh	r2, [r7, #6]
 8003c92:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c9e:	d108      	bne.n	8003cb2 <HAL_UART_Transmit+0x84>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d104      	bne.n	8003cb2 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	61bb      	str	r3, [r7, #24]
 8003cb0:	e003      	b.n	8003cba <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003cc2:	e02c      	b.n	8003d1e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	2180      	movs	r1, #128	; 0x80
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 ffb4 	bl	8004c3c <UART_WaitOnFlagUntilTimeout>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e039      	b.n	8003d52 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10b      	bne.n	8003cfc <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cf2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	3302      	adds	r3, #2
 8003cf8:	61bb      	str	r3, [r7, #24]
 8003cfa:	e007      	b.n	8003d0c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	781a      	ldrb	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1cc      	bne.n	8003cc4 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2200      	movs	r2, #0
 8003d32:	2140      	movs	r1, #64	; 0x40
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 ff81 	bl	8004c3c <UART_WaitOnFlagUntilTimeout>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e006      	b.n	8003d52 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	e000      	b.n	8003d52 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003d50:	2302      	movs	r3, #2
  }
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3720      	adds	r7, #32
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
	...

08003d5c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b091      	sub	sp, #68	; 0x44
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	4613      	mov	r3, r2
 8003d68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	f040 808c 	bne.w	8003e8e <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <HAL_UART_Transmit_IT+0x26>
 8003d7c:	88fb      	ldrh	r3, [r7, #6]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e084      	b.n	8003e90 <HAL_UART_Transmit_IT+0x134>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_UART_Transmit_IT+0x38>
 8003d90:	2302      	movs	r3, #2
 8003d92:	e07d      	b.n	8003e90 <HAL_UART_Transmit_IT+0x134>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	88fa      	ldrh	r2, [r7, #6]
 8003da6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	88fa      	ldrh	r2, [r7, #6]
 8003dae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2221      	movs	r2, #33	; 0x21
 8003dc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dd0:	d12e      	bne.n	8003e30 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dda:	d107      	bne.n	8003dec <HAL_UART_Transmit_IT+0x90>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d103      	bne.n	8003dec <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4a2d      	ldr	r2, [pc, #180]	; (8003e9c <HAL_UART_Transmit_IT+0x140>)
 8003de8:	675a      	str	r2, [r3, #116]	; 0x74
 8003dea:	e002      	b.n	8003df2 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4a2c      	ldr	r2, [pc, #176]	; (8003ea0 <HAL_UART_Transmit_IT+0x144>)
 8003df0:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3308      	adds	r3, #8
 8003e00:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e04:	e853 3f00 	ldrex	r3, [r3]
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e10:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3308      	adds	r3, #8
 8003e18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e1a:	637a      	str	r2, [r7, #52]	; 0x34
 8003e1c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e22:	e841 2300 	strex	r3, r2, [r1]
 8003e26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1e5      	bne.n	8003dfa <HAL_UART_Transmit_IT+0x9e>
 8003e2e:	e02c      	b.n	8003e8a <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e38:	d107      	bne.n	8003e4a <HAL_UART_Transmit_IT+0xee>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d103      	bne.n	8003e4a <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4a17      	ldr	r2, [pc, #92]	; (8003ea4 <HAL_UART_Transmit_IT+0x148>)
 8003e46:	675a      	str	r2, [r3, #116]	; 0x74
 8003e48:	e002      	b.n	8003e50 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4a16      	ldr	r2, [pc, #88]	; (8003ea8 <HAL_UART_Transmit_IT+0x14c>)
 8003e4e:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	e853 3f00 	ldrex	r3, [r3]
 8003e64:	613b      	str	r3, [r7, #16]
   return(result);
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	461a      	mov	r2, r3
 8003e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e76:	623b      	str	r3, [r7, #32]
 8003e78:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7a:	69f9      	ldr	r1, [r7, #28]
 8003e7c:	6a3a      	ldr	r2, [r7, #32]
 8003e7e:	e841 2300 	strex	r3, r2, [r1]
 8003e82:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1e6      	bne.n	8003e58 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	e000      	b.n	8003e90 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8003e8e:	2302      	movs	r3, #2
  }
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3744      	adds	r7, #68	; 0x44
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bc80      	pop	{r7}
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	0800531b 	.word	0x0800531b
 8003ea0:	0800523d 	.word	0x0800523d
 8003ea4:	0800517d 	.word	0x0800517d
 8003ea8:	080050c7 	.word	0x080050c7

08003eac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08a      	sub	sp, #40	; 0x28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec0:	2b20      	cmp	r3, #32
 8003ec2:	d142      	bne.n	8003f4a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <HAL_UART_Receive_IT+0x24>
 8003eca:	88fb      	ldrh	r3, [r7, #6]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e03b      	b.n	8003f4c <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d101      	bne.n	8003ee2 <HAL_UART_Receive_IT+0x36>
 8003ede:	2302      	movs	r3, #2
 8003ee0:	e034      	b.n	8003f4c <HAL_UART_Receive_IT+0xa0>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a17      	ldr	r2, [pc, #92]	; (8003f54 <HAL_UART_Receive_IT+0xa8>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d01f      	beq.n	8003f3a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d018      	beq.n	8003f3a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	e853 3f00 	ldrex	r3, [r3]
 8003f14:	613b      	str	r3, [r7, #16]
   return(result);
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	623b      	str	r3, [r7, #32]
 8003f28:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2a:	69f9      	ldr	r1, [r7, #28]
 8003f2c:	6a3a      	ldr	r2, [r7, #32]
 8003f2e:	e841 2300 	strex	r3, r2, [r1]
 8003f32:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1e6      	bne.n	8003f08 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003f3a:	88fb      	ldrh	r3, [r7, #6]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	68b9      	ldr	r1, [r7, #8]
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 ff43 	bl	8004dcc <UART_Start_Receive_IT>
 8003f46:	4603      	mov	r3, r0
 8003f48:	e000      	b.n	8003f4c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003f4a:	2302      	movs	r3, #2
  }
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3728      	adds	r7, #40	; 0x28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40008000 	.word	0x40008000

08003f58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b0ba      	sub	sp, #232	; 0xe8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003f82:	f640 030f 	movw	r3, #2063	; 0x80f
 8003f86:	4013      	ands	r3, r2
 8003f88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003f8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d11b      	bne.n	8003fcc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f98:	f003 0320 	and.w	r3, r3, #32
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d015      	beq.n	8003fcc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fa4:	f003 0320 	and.w	r3, r3, #32
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d105      	bne.n	8003fb8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003fac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d009      	beq.n	8003fcc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 82d6 	beq.w	800456e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	4798      	blx	r3
      }
      return;
 8003fca:	e2d0      	b.n	800456e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003fcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 811f 	beq.w	8004214 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003fd6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003fda:	4b8b      	ldr	r3, [pc, #556]	; (8004208 <HAL_UART_IRQHandler+0x2b0>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d106      	bne.n	8003ff0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003fe2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003fe6:	4b89      	ldr	r3, [pc, #548]	; (800420c <HAL_UART_IRQHandler+0x2b4>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 8112 	beq.w	8004214 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d011      	beq.n	8004020 <HAL_UART_IRQHandler+0xc8>
 8003ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00b      	beq.n	8004020 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2201      	movs	r2, #1
 800400e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004016:	f043 0201 	orr.w	r2, r3, #1
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d011      	beq.n	8004050 <HAL_UART_IRQHandler+0xf8>
 800402c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00b      	beq.n	8004050 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2202      	movs	r2, #2
 800403e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004046:	f043 0204 	orr.w	r2, r3, #4
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b00      	cmp	r3, #0
 800405a:	d011      	beq.n	8004080 <HAL_UART_IRQHandler+0x128>
 800405c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00b      	beq.n	8004080 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2204      	movs	r2, #4
 800406e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004076:	f043 0202 	orr.w	r2, r3, #2
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004084:	f003 0308 	and.w	r3, r3, #8
 8004088:	2b00      	cmp	r3, #0
 800408a:	d017      	beq.n	80040bc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800408c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004090:	f003 0320 	and.w	r3, r3, #32
 8004094:	2b00      	cmp	r3, #0
 8004096:	d105      	bne.n	80040a4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004098:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800409c:	4b5a      	ldr	r3, [pc, #360]	; (8004208 <HAL_UART_IRQHandler+0x2b0>)
 800409e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00b      	beq.n	80040bc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2208      	movs	r2, #8
 80040aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040b2:	f043 0208 	orr.w	r2, r3, #8
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80040bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d012      	beq.n	80040ee <HAL_UART_IRQHandler+0x196>
 80040c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00c      	beq.n	80040ee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040e4:	f043 0220 	orr.w	r2, r3, #32
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f000 823c 	beq.w	8004572 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80040fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040fe:	f003 0320 	and.w	r3, r3, #32
 8004102:	2b00      	cmp	r3, #0
 8004104:	d013      	beq.n	800412e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800410a:	f003 0320 	and.w	r3, r3, #32
 800410e:	2b00      	cmp	r3, #0
 8004110:	d105      	bne.n	800411e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d007      	beq.n	800412e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004134:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004142:	2b40      	cmp	r3, #64	; 0x40
 8004144:	d005      	beq.n	8004152 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004146:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800414a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800414e:	2b00      	cmp	r3, #0
 8004150:	d04f      	beq.n	80041f2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 ff3c 	bl	8004fd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004162:	2b40      	cmp	r3, #64	; 0x40
 8004164:	d141      	bne.n	80041ea <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	3308      	adds	r3, #8
 800416c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004174:	e853 3f00 	ldrex	r3, [r3]
 8004178:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800417c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004184:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3308      	adds	r3, #8
 800418e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004192:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004196:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800419e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80041a2:	e841 2300 	strex	r3, r2, [r1]
 80041a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80041aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1d9      	bne.n	8004166 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d013      	beq.n	80041e2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041be:	4a14      	ldr	r2, [pc, #80]	; (8004210 <HAL_UART_IRQHandler+0x2b8>)
 80041c0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fd f9a0 	bl	800150c <HAL_DMA_Abort_IT>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d017      	beq.n	8004202 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80041dc:	4610      	mov	r0, r2
 80041de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e0:	e00f      	b.n	8004202 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f9d9 	bl	800459a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e8:	e00b      	b.n	8004202 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f9d5 	bl	800459a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f0:	e007      	b.n	8004202 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f9d1 	bl	800459a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004200:	e1b7      	b.n	8004572 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004202:	bf00      	nop
    return;
 8004204:	e1b5      	b.n	8004572 <HAL_UART_IRQHandler+0x61a>
 8004206:	bf00      	nop
 8004208:	10000001 	.word	0x10000001
 800420c:	04000120 	.word	0x04000120
 8004210:	0800509b 	.word	0x0800509b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004218:	2b01      	cmp	r3, #1
 800421a:	f040 814a 	bne.w	80044b2 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800421e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004222:	f003 0310 	and.w	r3, r3, #16
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 8143 	beq.w	80044b2 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800422c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004230:	f003 0310 	and.w	r3, r3, #16
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 813c 	beq.w	80044b2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2210      	movs	r2, #16
 8004240:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424c:	2b40      	cmp	r3, #64	; 0x40
 800424e:	f040 80b5 	bne.w	80043bc <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 800425e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 8187 	beq.w	8004576 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800426e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004272:	429a      	cmp	r2, r3
 8004274:	f080 817f 	bcs.w	8004576 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800427e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b00      	cmp	r3, #0
 8004290:	f040 8086 	bne.w	80043a0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042a0:	e853 3f00 	ldrex	r3, [r3]
 80042a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80042a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	461a      	mov	r2, r3
 80042ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80042be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80042c2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80042ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80042ce:	e841 2300 	strex	r3, r2, [r1]
 80042d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80042d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1da      	bne.n	8004294 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3308      	adds	r3, #8
 80042e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042e8:	e853 3f00 	ldrex	r3, [r3]
 80042ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80042ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042f0:	f023 0301 	bic.w	r3, r3, #1
 80042f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3308      	adds	r3, #8
 80042fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004302:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004306:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004308:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800430a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800430e:	e841 2300 	strex	r3, r2, [r1]
 8004312:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004314:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1e1      	bne.n	80042de <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	3308      	adds	r3, #8
 8004320:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004322:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004324:	e853 3f00 	ldrex	r3, [r3]
 8004328:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800432a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800432c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004330:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3308      	adds	r3, #8
 800433a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800433e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004340:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004342:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004344:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004346:	e841 2300 	strex	r3, r2, [r1]
 800434a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800434c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1e3      	bne.n	800431a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2220      	movs	r2, #32
 8004356:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004368:	e853 3f00 	ldrex	r3, [r3]
 800436c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800436e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004370:	f023 0310 	bic.w	r3, r3, #16
 8004374:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	461a      	mov	r2, r3
 800437e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004382:	65bb      	str	r3, [r7, #88]	; 0x58
 8004384:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004386:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004388:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800438a:	e841 2300 	strex	r3, r2, [r1]
 800438e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1e4      	bne.n	8004360 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800439a:	4618      	mov	r0, r3
 800439c:	f7fd f858 	bl	8001450 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	4619      	mov	r1, r3
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f8f9 	bl	80045ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80043ba:	e0dc      	b.n	8004576 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 80ce 	beq.w	800457a <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 80043de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 80c9 	beq.w	800457a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f0:	e853 3f00 	ldrex	r3, [r3]
 80043f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	461a      	mov	r2, r3
 8004406:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800440a:	647b      	str	r3, [r7, #68]	; 0x44
 800440c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004410:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004412:	e841 2300 	strex	r3, r2, [r1]
 8004416:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1e4      	bne.n	80043e8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3308      	adds	r3, #8
 8004424:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	e853 3f00 	ldrex	r3, [r3]
 800442c:	623b      	str	r3, [r7, #32]
   return(result);
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004434:	f023 0301 	bic.w	r3, r3, #1
 8004438:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3308      	adds	r3, #8
 8004442:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004446:	633a      	str	r2, [r7, #48]	; 0x30
 8004448:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800444c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800444e:	e841 2300 	strex	r3, r2, [r1]
 8004452:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1e1      	bne.n	800441e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2220      	movs	r2, #32
 800445e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	e853 3f00 	ldrex	r3, [r3]
 800447a:	60fb      	str	r3, [r7, #12]
   return(result);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f023 0310 	bic.w	r3, r3, #16
 8004482:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004490:	61fb      	str	r3, [r7, #28]
 8004492:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004494:	69b9      	ldr	r1, [r7, #24]
 8004496:	69fa      	ldr	r2, [r7, #28]
 8004498:	e841 2300 	strex	r3, r2, [r1]
 800449c:	617b      	str	r3, [r7, #20]
   return(result);
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1e4      	bne.n	800446e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044a8:	4619      	mov	r1, r3
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f87e 	bl	80045ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80044b0:	e063      	b.n	800457a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80044b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00e      	beq.n	80044dc <HAL_UART_IRQHandler+0x584>
 80044be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d008      	beq.n	80044dc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80044d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f001 fc1b 	bl	8005d10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80044da:	e051      	b.n	8004580 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80044dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d014      	beq.n	8004512 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80044e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d105      	bne.n	8004500 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80044f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d008      	beq.n	8004512 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004504:	2b00      	cmp	r3, #0
 8004506:	d03a      	beq.n	800457e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	4798      	blx	r3
    }
    return;
 8004510:	e035      	b.n	800457e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451a:	2b00      	cmp	r3, #0
 800451c:	d009      	beq.n	8004532 <HAL_UART_IRQHandler+0x5da>
 800451e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 ff69 	bl	8005402 <UART_EndTransmit_IT>
    return;
 8004530:	e026      	b.n	8004580 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004536:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d009      	beq.n	8004552 <HAL_UART_IRQHandler+0x5fa>
 800453e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004542:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f001 fbf2 	bl	8005d34 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004550:	e016      	b.n	8004580 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004556:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d010      	beq.n	8004580 <HAL_UART_IRQHandler+0x628>
 800455e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004562:	2b00      	cmp	r3, #0
 8004564:	da0c      	bge.n	8004580 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f001 fbdb 	bl	8005d22 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800456c:	e008      	b.n	8004580 <HAL_UART_IRQHandler+0x628>
      return;
 800456e:	bf00      	nop
 8004570:	e006      	b.n	8004580 <HAL_UART_IRQHandler+0x628>
    return;
 8004572:	bf00      	nop
 8004574:	e004      	b.n	8004580 <HAL_UART_IRQHandler+0x628>
      return;
 8004576:	bf00      	nop
 8004578:	e002      	b.n	8004580 <HAL_UART_IRQHandler+0x628>
      return;
 800457a:	bf00      	nop
 800457c:	e000      	b.n	8004580 <HAL_UART_IRQHandler+0x628>
    return;
 800457e:	bf00      	nop
  }
}
 8004580:	37e8      	adds	r7, #232	; 0xe8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop

08004588 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	bc80      	pop	{r7}
 8004598:	4770      	bx	lr

0800459a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr

080045ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	460b      	mov	r3, r1
 80045b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	bc80      	pop	{r7}
 80045c0:	4770      	bx	lr
	...

080045c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045c4:	b5b0      	push	{r4, r5, r7, lr}
 80045c6:	b088      	sub	sp, #32
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045cc:	2300      	movs	r3, #0
 80045ce:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	431a      	orrs	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	4bab      	ldr	r3, [pc, #684]	; (800489c <UART_SetConfig+0x2d8>)
 80045f0:	4013      	ands	r3, r2
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6812      	ldr	r2, [r2, #0]
 80045f6:	69f9      	ldr	r1, [r7, #28]
 80045f8:	430b      	orrs	r3, r1
 80045fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68da      	ldr	r2, [r3, #12]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4aa0      	ldr	r2, [pc, #640]	; (80048a0 <UART_SetConfig+0x2dc>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d004      	beq.n	800462c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	69fa      	ldr	r2, [r7, #28]
 8004628:	4313      	orrs	r3, r2
 800462a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004636:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6812      	ldr	r2, [r2, #0]
 800463e:	69f9      	ldr	r1, [r7, #28]
 8004640:	430b      	orrs	r3, r1
 8004642:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	f023 010f 	bic.w	r1, r3, #15
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a91      	ldr	r2, [pc, #580]	; (80048a4 <UART_SetConfig+0x2e0>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d122      	bne.n	80046aa <UART_SetConfig+0xe6>
 8004664:	2003      	movs	r0, #3
 8004666:	f7ff fa71 	bl	8003b4c <LL_RCC_GetUSARTClockSource>
 800466a:	4603      	mov	r3, r0
 800466c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004670:	2b03      	cmp	r3, #3
 8004672:	d817      	bhi.n	80046a4 <UART_SetConfig+0xe0>
 8004674:	a201      	add	r2, pc, #4	; (adr r2, 800467c <UART_SetConfig+0xb8>)
 8004676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467a:	bf00      	nop
 800467c:	0800468d 	.word	0x0800468d
 8004680:	08004699 	.word	0x08004699
 8004684:	08004693 	.word	0x08004693
 8004688:	0800469f 	.word	0x0800469f
 800468c:	2301      	movs	r3, #1
 800468e:	76fb      	strb	r3, [r7, #27]
 8004690:	e072      	b.n	8004778 <UART_SetConfig+0x1b4>
 8004692:	2302      	movs	r3, #2
 8004694:	76fb      	strb	r3, [r7, #27]
 8004696:	e06f      	b.n	8004778 <UART_SetConfig+0x1b4>
 8004698:	2304      	movs	r3, #4
 800469a:	76fb      	strb	r3, [r7, #27]
 800469c:	e06c      	b.n	8004778 <UART_SetConfig+0x1b4>
 800469e:	2308      	movs	r3, #8
 80046a0:	76fb      	strb	r3, [r7, #27]
 80046a2:	e069      	b.n	8004778 <UART_SetConfig+0x1b4>
 80046a4:	2310      	movs	r3, #16
 80046a6:	76fb      	strb	r3, [r7, #27]
 80046a8:	e066      	b.n	8004778 <UART_SetConfig+0x1b4>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a7e      	ldr	r2, [pc, #504]	; (80048a8 <UART_SetConfig+0x2e4>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d134      	bne.n	800471e <UART_SetConfig+0x15a>
 80046b4:	200c      	movs	r0, #12
 80046b6:	f7ff fa49 	bl	8003b4c <LL_RCC_GetUSARTClockSource>
 80046ba:	4603      	mov	r3, r0
 80046bc:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80046c0:	2b0c      	cmp	r3, #12
 80046c2:	d829      	bhi.n	8004718 <UART_SetConfig+0x154>
 80046c4:	a201      	add	r2, pc, #4	; (adr r2, 80046cc <UART_SetConfig+0x108>)
 80046c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ca:	bf00      	nop
 80046cc:	08004701 	.word	0x08004701
 80046d0:	08004719 	.word	0x08004719
 80046d4:	08004719 	.word	0x08004719
 80046d8:	08004719 	.word	0x08004719
 80046dc:	0800470d 	.word	0x0800470d
 80046e0:	08004719 	.word	0x08004719
 80046e4:	08004719 	.word	0x08004719
 80046e8:	08004719 	.word	0x08004719
 80046ec:	08004707 	.word	0x08004707
 80046f0:	08004719 	.word	0x08004719
 80046f4:	08004719 	.word	0x08004719
 80046f8:	08004719 	.word	0x08004719
 80046fc:	08004713 	.word	0x08004713
 8004700:	2300      	movs	r3, #0
 8004702:	76fb      	strb	r3, [r7, #27]
 8004704:	e038      	b.n	8004778 <UART_SetConfig+0x1b4>
 8004706:	2302      	movs	r3, #2
 8004708:	76fb      	strb	r3, [r7, #27]
 800470a:	e035      	b.n	8004778 <UART_SetConfig+0x1b4>
 800470c:	2304      	movs	r3, #4
 800470e:	76fb      	strb	r3, [r7, #27]
 8004710:	e032      	b.n	8004778 <UART_SetConfig+0x1b4>
 8004712:	2308      	movs	r3, #8
 8004714:	76fb      	strb	r3, [r7, #27]
 8004716:	e02f      	b.n	8004778 <UART_SetConfig+0x1b4>
 8004718:	2310      	movs	r3, #16
 800471a:	76fb      	strb	r3, [r7, #27]
 800471c:	e02c      	b.n	8004778 <UART_SetConfig+0x1b4>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a5f      	ldr	r2, [pc, #380]	; (80048a0 <UART_SetConfig+0x2dc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d125      	bne.n	8004774 <UART_SetConfig+0x1b0>
 8004728:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800472c:	f7ff fa20 	bl	8003b70 <LL_RCC_GetLPUARTClockSource>
 8004730:	4603      	mov	r3, r0
 8004732:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004736:	d017      	beq.n	8004768 <UART_SetConfig+0x1a4>
 8004738:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800473c:	d817      	bhi.n	800476e <UART_SetConfig+0x1aa>
 800473e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004742:	d00b      	beq.n	800475c <UART_SetConfig+0x198>
 8004744:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004748:	d811      	bhi.n	800476e <UART_SetConfig+0x1aa>
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <UART_SetConfig+0x192>
 800474e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004752:	d006      	beq.n	8004762 <UART_SetConfig+0x19e>
 8004754:	e00b      	b.n	800476e <UART_SetConfig+0x1aa>
 8004756:	2300      	movs	r3, #0
 8004758:	76fb      	strb	r3, [r7, #27]
 800475a:	e00d      	b.n	8004778 <UART_SetConfig+0x1b4>
 800475c:	2302      	movs	r3, #2
 800475e:	76fb      	strb	r3, [r7, #27]
 8004760:	e00a      	b.n	8004778 <UART_SetConfig+0x1b4>
 8004762:	2304      	movs	r3, #4
 8004764:	76fb      	strb	r3, [r7, #27]
 8004766:	e007      	b.n	8004778 <UART_SetConfig+0x1b4>
 8004768:	2308      	movs	r3, #8
 800476a:	76fb      	strb	r3, [r7, #27]
 800476c:	e004      	b.n	8004778 <UART_SetConfig+0x1b4>
 800476e:	2310      	movs	r3, #16
 8004770:	76fb      	strb	r3, [r7, #27]
 8004772:	e001      	b.n	8004778 <UART_SetConfig+0x1b4>
 8004774:	2310      	movs	r3, #16
 8004776:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a48      	ldr	r2, [pc, #288]	; (80048a0 <UART_SetConfig+0x2dc>)
 800477e:	4293      	cmp	r3, r2
 8004780:	f040 8098 	bne.w	80048b4 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004784:	7efb      	ldrb	r3, [r7, #27]
 8004786:	2b08      	cmp	r3, #8
 8004788:	d823      	bhi.n	80047d2 <UART_SetConfig+0x20e>
 800478a:	a201      	add	r2, pc, #4	; (adr r2, 8004790 <UART_SetConfig+0x1cc>)
 800478c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004790:	080047b5 	.word	0x080047b5
 8004794:	080047d3 	.word	0x080047d3
 8004798:	080047bd 	.word	0x080047bd
 800479c:	080047d3 	.word	0x080047d3
 80047a0:	080047c3 	.word	0x080047c3
 80047a4:	080047d3 	.word	0x080047d3
 80047a8:	080047d3 	.word	0x080047d3
 80047ac:	080047d3 	.word	0x080047d3
 80047b0:	080047cb 	.word	0x080047cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047b4:	f7fe fa2e 	bl	8002c14 <HAL_RCC_GetPCLK1Freq>
 80047b8:	6178      	str	r0, [r7, #20]
        break;
 80047ba:	e00f      	b.n	80047dc <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047bc:	4b3b      	ldr	r3, [pc, #236]	; (80048ac <UART_SetConfig+0x2e8>)
 80047be:	617b      	str	r3, [r7, #20]
        break;
 80047c0:	e00c      	b.n	80047dc <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047c2:	f7fe f973 	bl	8002aac <HAL_RCC_GetSysClockFreq>
 80047c6:	6178      	str	r0, [r7, #20]
        break;
 80047c8:	e008      	b.n	80047dc <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ce:	617b      	str	r3, [r7, #20]
        break;
 80047d0:	e004      	b.n	80047dc <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	76bb      	strb	r3, [r7, #26]
        break;
 80047da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 8128 	beq.w	8004a34 <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	4a31      	ldr	r2, [pc, #196]	; (80048b0 <UART_SetConfig+0x2ec>)
 80047ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047ee:	461a      	mov	r2, r3
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80047f6:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	4613      	mov	r3, r2
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	4413      	add	r3, r2
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	429a      	cmp	r2, r3
 8004806:	d305      	bcc.n	8004814 <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	429a      	cmp	r2, r3
 8004812:	d902      	bls.n	800481a <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	76bb      	strb	r3, [r7, #26]
 8004818:	e10c      	b.n	8004a34 <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	4618      	mov	r0, r3
 800481e:	f04f 0100 	mov.w	r1, #0
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	4a22      	ldr	r2, [pc, #136]	; (80048b0 <UART_SetConfig+0x2ec>)
 8004828:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800482c:	b29a      	uxth	r2, r3
 800482e:	f04f 0300 	mov.w	r3, #0
 8004832:	f7fb fcf5 	bl	8000220 <__aeabi_uldivmod>
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	4610      	mov	r0, r2
 800483c:	4619      	mov	r1, r3
 800483e:	f04f 0200 	mov.w	r2, #0
 8004842:	f04f 0300 	mov.w	r3, #0
 8004846:	020b      	lsls	r3, r1, #8
 8004848:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800484c:	0202      	lsls	r2, r0, #8
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	6849      	ldr	r1, [r1, #4]
 8004852:	0849      	lsrs	r1, r1, #1
 8004854:	4608      	mov	r0, r1
 8004856:	f04f 0100 	mov.w	r1, #0
 800485a:	1814      	adds	r4, r2, r0
 800485c:	eb43 0501 	adc.w	r5, r3, r1
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	461a      	mov	r2, r3
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	4620      	mov	r0, r4
 800486c:	4629      	mov	r1, r5
 800486e:	f7fb fcd7 	bl	8000220 <__aeabi_uldivmod>
 8004872:	4602      	mov	r2, r0
 8004874:	460b      	mov	r3, r1
 8004876:	4613      	mov	r3, r2
 8004878:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004880:	d308      	bcc.n	8004894 <UART_SetConfig+0x2d0>
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004888:	d204      	bcs.n	8004894 <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	60da      	str	r2, [r3, #12]
 8004892:	e0cf      	b.n	8004a34 <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	76bb      	strb	r3, [r7, #26]
 8004898:	e0cc      	b.n	8004a34 <UART_SetConfig+0x470>
 800489a:	bf00      	nop
 800489c:	cfff69f3 	.word	0xcfff69f3
 80048a0:	40008000 	.word	0x40008000
 80048a4:	40013800 	.word	0x40013800
 80048a8:	40004400 	.word	0x40004400
 80048ac:	00f42400 	.word	0x00f42400
 80048b0:	0800a19c 	.word	0x0800a19c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048bc:	d165      	bne.n	800498a <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 80048be:	7efb      	ldrb	r3, [r7, #27]
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d828      	bhi.n	8004916 <UART_SetConfig+0x352>
 80048c4:	a201      	add	r2, pc, #4	; (adr r2, 80048cc <UART_SetConfig+0x308>)
 80048c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ca:	bf00      	nop
 80048cc:	080048f1 	.word	0x080048f1
 80048d0:	080048f9 	.word	0x080048f9
 80048d4:	08004901 	.word	0x08004901
 80048d8:	08004917 	.word	0x08004917
 80048dc:	08004907 	.word	0x08004907
 80048e0:	08004917 	.word	0x08004917
 80048e4:	08004917 	.word	0x08004917
 80048e8:	08004917 	.word	0x08004917
 80048ec:	0800490f 	.word	0x0800490f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048f0:	f7fe f990 	bl	8002c14 <HAL_RCC_GetPCLK1Freq>
 80048f4:	6178      	str	r0, [r7, #20]
        break;
 80048f6:	e013      	b.n	8004920 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048f8:	f7fe f99e 	bl	8002c38 <HAL_RCC_GetPCLK2Freq>
 80048fc:	6178      	str	r0, [r7, #20]
        break;
 80048fe:	e00f      	b.n	8004920 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004900:	4b56      	ldr	r3, [pc, #344]	; (8004a5c <UART_SetConfig+0x498>)
 8004902:	617b      	str	r3, [r7, #20]
        break;
 8004904:	e00c      	b.n	8004920 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004906:	f7fe f8d1 	bl	8002aac <HAL_RCC_GetSysClockFreq>
 800490a:	6178      	str	r0, [r7, #20]
        break;
 800490c:	e008      	b.n	8004920 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800490e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004912:	617b      	str	r3, [r7, #20]
        break;
 8004914:	e004      	b.n	8004920 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	76bb      	strb	r3, [r7, #26]
        break;
 800491e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 8086 	beq.w	8004a34 <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	4a4c      	ldr	r2, [pc, #304]	; (8004a60 <UART_SetConfig+0x49c>)
 800492e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004932:	461a      	mov	r2, r3
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	fbb3 f3f2 	udiv	r3, r3, r2
 800493a:	005a      	lsls	r2, r3, #1
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	085b      	lsrs	r3, r3, #1
 8004942:	441a      	add	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	fbb2 f3f3 	udiv	r3, r2, r3
 800494c:	b29b      	uxth	r3, r3
 800494e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	2b0f      	cmp	r3, #15
 8004954:	d916      	bls.n	8004984 <UART_SetConfig+0x3c0>
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800495c:	d212      	bcs.n	8004984 <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	b29b      	uxth	r3, r3
 8004962:	f023 030f 	bic.w	r3, r3, #15
 8004966:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	085b      	lsrs	r3, r3, #1
 800496c:	b29b      	uxth	r3, r3
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	b29a      	uxth	r2, r3
 8004974:	89fb      	ldrh	r3, [r7, #14]
 8004976:	4313      	orrs	r3, r2
 8004978:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	89fa      	ldrh	r2, [r7, #14]
 8004980:	60da      	str	r2, [r3, #12]
 8004982:	e057      	b.n	8004a34 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	76bb      	strb	r3, [r7, #26]
 8004988:	e054      	b.n	8004a34 <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 800498a:	7efb      	ldrb	r3, [r7, #27]
 800498c:	2b08      	cmp	r3, #8
 800498e:	d828      	bhi.n	80049e2 <UART_SetConfig+0x41e>
 8004990:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <UART_SetConfig+0x3d4>)
 8004992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004996:	bf00      	nop
 8004998:	080049bd 	.word	0x080049bd
 800499c:	080049c5 	.word	0x080049c5
 80049a0:	080049cd 	.word	0x080049cd
 80049a4:	080049e3 	.word	0x080049e3
 80049a8:	080049d3 	.word	0x080049d3
 80049ac:	080049e3 	.word	0x080049e3
 80049b0:	080049e3 	.word	0x080049e3
 80049b4:	080049e3 	.word	0x080049e3
 80049b8:	080049db 	.word	0x080049db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049bc:	f7fe f92a 	bl	8002c14 <HAL_RCC_GetPCLK1Freq>
 80049c0:	6178      	str	r0, [r7, #20]
        break;
 80049c2:	e013      	b.n	80049ec <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049c4:	f7fe f938 	bl	8002c38 <HAL_RCC_GetPCLK2Freq>
 80049c8:	6178      	str	r0, [r7, #20]
        break;
 80049ca:	e00f      	b.n	80049ec <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049cc:	4b23      	ldr	r3, [pc, #140]	; (8004a5c <UART_SetConfig+0x498>)
 80049ce:	617b      	str	r3, [r7, #20]
        break;
 80049d0:	e00c      	b.n	80049ec <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049d2:	f7fe f86b 	bl	8002aac <HAL_RCC_GetSysClockFreq>
 80049d6:	6178      	str	r0, [r7, #20]
        break;
 80049d8:	e008      	b.n	80049ec <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049de:	617b      	str	r3, [r7, #20]
        break;
 80049e0:	e004      	b.n	80049ec <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	76bb      	strb	r3, [r7, #26]
        break;
 80049ea:	bf00      	nop
    }

    if (pclk != 0U)
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d020      	beq.n	8004a34 <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	4a1a      	ldr	r2, [pc, #104]	; (8004a60 <UART_SetConfig+0x49c>)
 80049f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049fc:	461a      	mov	r2, r3
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	085b      	lsrs	r3, r3, #1
 8004a0a:	441a      	add	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	2b0f      	cmp	r3, #15
 8004a1c:	d908      	bls.n	8004a30 <UART_SetConfig+0x46c>
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a24:	d204      	bcs.n	8004a30 <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	60da      	str	r2, [r3, #12]
 8004a2e:	e001      	b.n	8004a34 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004a50:	7ebb      	ldrb	r3, [r7, #26]
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3720      	adds	r7, #32
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bdb0      	pop	{r4, r5, r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	00f42400 	.word	0x00f42400
 8004a60:	0800a19c 	.word	0x0800a19c

08004a64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00a      	beq.n	8004a8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00a      	beq.n	8004ad2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad6:	f003 0308 	and.w	r3, r3, #8
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af8:	f003 0310 	and.w	r3, r3, #16
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00a      	beq.n	8004b16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1a:	f003 0320 	and.w	r3, r3, #32
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d01a      	beq.n	8004b7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b62:	d10a      	bne.n	8004b7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00a      	beq.n	8004b9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	605a      	str	r2, [r3, #4]
  }
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bc80      	pop	{r7}
 8004ba4:	4770      	bx	lr

08004ba6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b086      	sub	sp, #24
 8004baa:	af02      	add	r7, sp, #8
 8004bac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bb6:	f7fc f802 	bl	8000bbe <HAL_GetTick>
 8004bba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0308 	and.w	r3, r3, #8
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d10e      	bne.n	8004be8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f82f 	bl	8004c3c <UART_WaitOnFlagUntilTimeout>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e025      	b.n	8004c34 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0304 	and.w	r3, r3, #4
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	d10e      	bne.n	8004c14 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bf6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 f819 	bl	8004c3c <UART_WaitOnFlagUntilTimeout>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e00f      	b.n	8004c34 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b09c      	sub	sp, #112	; 0x70
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c4c:	e0a9      	b.n	8004da2 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c54:	f000 80a5 	beq.w	8004da2 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c58:	f7fb ffb1 	bl	8000bbe <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d302      	bcc.n	8004c6e <UART_WaitOnFlagUntilTimeout+0x32>
 8004c68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d140      	bne.n	8004cf0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c76:	e853 3f00 	ldrex	r3, [r3]
 8004c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c82:	667b      	str	r3, [r7, #100]	; 0x64
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c8e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c94:	e841 2300 	strex	r3, r2, [r1]
 8004c98:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1e6      	bne.n	8004c6e <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	3308      	adds	r3, #8
 8004ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004caa:	e853 3f00 	ldrex	r3, [r3]
 8004cae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	f023 0301 	bic.w	r3, r3, #1
 8004cb6:	663b      	str	r3, [r7, #96]	; 0x60
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3308      	adds	r3, #8
 8004cbe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004cc0:	64ba      	str	r2, [r7, #72]	; 0x48
 8004cc2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004cc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cc8:	e841 2300 	strex	r3, r2, [r1]
 8004ccc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1e5      	bne.n	8004ca0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e069      	b.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0304 	and.w	r3, r3, #4
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d051      	beq.n	8004da2 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d0c:	d149      	bne.n	8004da2 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d16:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d20:	e853 3f00 	ldrex	r3, [r3]
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	461a      	mov	r2, r3
 8004d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d36:	637b      	str	r3, [r7, #52]	; 0x34
 8004d38:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d3e:	e841 2300 	strex	r3, r2, [r1]
 8004d42:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1e6      	bne.n	8004d18 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	3308      	adds	r3, #8
 8004d50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	e853 3f00 	ldrex	r3, [r3]
 8004d58:	613b      	str	r3, [r7, #16]
   return(result);
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	f023 0301 	bic.w	r3, r3, #1
 8004d60:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	3308      	adds	r3, #8
 8004d68:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d6a:	623a      	str	r2, [r7, #32]
 8004d6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6e:	69f9      	ldr	r1, [r7, #28]
 8004d70:	6a3a      	ldr	r2, [r7, #32]
 8004d72:	e841 2300 	strex	r3, r2, [r1]
 8004d76:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1e5      	bne.n	8004d4a <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2220      	movs	r2, #32
 8004d82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2220      	movs	r2, #32
 8004d92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e010      	b.n	8004dc4 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	69da      	ldr	r2, [r3, #28]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	4013      	ands	r3, r2
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	bf0c      	ite	eq
 8004db2:	2301      	moveq	r3, #1
 8004db4:	2300      	movne	r3, #0
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	461a      	mov	r2, r3
 8004dba:	79fb      	ldrb	r3, [r7, #7]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	f43f af46 	beq.w	8004c4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3770      	adds	r7, #112	; 0x70
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b09d      	sub	sp, #116	; 0x74
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	88fa      	ldrh	r2, [r7, #6]
 8004de4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	88fa      	ldrh	r2, [r7, #6]
 8004dec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dfe:	d10e      	bne.n	8004e1e <UART_Start_Receive_IT+0x52>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d105      	bne.n	8004e14 <UART_Start_Receive_IT+0x48>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004e0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004e12:	e02d      	b.n	8004e70 <UART_Start_Receive_IT+0xa4>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	22ff      	movs	r2, #255	; 0xff
 8004e18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004e1c:	e028      	b.n	8004e70 <UART_Start_Receive_IT+0xa4>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10d      	bne.n	8004e42 <UART_Start_Receive_IT+0x76>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d104      	bne.n	8004e38 <UART_Start_Receive_IT+0x6c>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	22ff      	movs	r2, #255	; 0xff
 8004e32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004e36:	e01b      	b.n	8004e70 <UART_Start_Receive_IT+0xa4>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	227f      	movs	r2, #127	; 0x7f
 8004e3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004e40:	e016      	b.n	8004e70 <UART_Start_Receive_IT+0xa4>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e4a:	d10d      	bne.n	8004e68 <UART_Start_Receive_IT+0x9c>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d104      	bne.n	8004e5e <UART_Start_Receive_IT+0x92>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	227f      	movs	r2, #127	; 0x7f
 8004e58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004e5c:	e008      	b.n	8004e70 <UART_Start_Receive_IT+0xa4>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	223f      	movs	r2, #63	; 0x3f
 8004e62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004e66:	e003      	b.n	8004e70 <UART_Start_Receive_IT+0xa4>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2222      	movs	r2, #34	; 0x22
 8004e7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	3308      	adds	r3, #8
 8004e86:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e8a:	e853 3f00 	ldrex	r3, [r3]
 8004e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e92:	f043 0301 	orr.w	r3, r3, #1
 8004e96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ea0:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004ea2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ea6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ea8:	e841 2300 	strex	r3, r2, [r1]
 8004eac:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004eae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1e5      	bne.n	8004e80 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ebc:	d14d      	bne.n	8004f5a <UART_Start_Receive_IT+0x18e>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004ec4:	88fa      	ldrh	r2, [r7, #6]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d347      	bcc.n	8004f5a <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed2:	d107      	bne.n	8004ee4 <UART_Start_Receive_IT+0x118>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d103      	bne.n	8004ee4 <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4a38      	ldr	r2, [pc, #224]	; (8004fc0 <UART_Start_Receive_IT+0x1f4>)
 8004ee0:	671a      	str	r2, [r3, #112]	; 0x70
 8004ee2:	e002      	b.n	8004eea <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4a37      	ldr	r2, [pc, #220]	; (8004fc4 <UART_Start_Receive_IT+0x1f8>)
 8004ee8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004efa:	e853 3f00 	ldrex	r3, [r3]
 8004efe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f06:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f10:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f12:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f18:	e841 2300 	strex	r3, r2, [r1]
 8004f1c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1e6      	bne.n	8004ef2 <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	3308      	adds	r3, #8
 8004f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2e:	e853 3f00 	ldrex	r3, [r3]
 8004f32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f3a:	667b      	str	r3, [r7, #100]	; 0x64
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	3308      	adds	r3, #8
 8004f42:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004f44:	637a      	str	r2, [r7, #52]	; 0x34
 8004f46:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f4c:	e841 2300 	strex	r3, r2, [r1]
 8004f50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1e5      	bne.n	8004f24 <UART_Start_Receive_IT+0x158>
 8004f58:	e02c      	b.n	8004fb4 <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f62:	d107      	bne.n	8004f74 <UART_Start_Receive_IT+0x1a8>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d103      	bne.n	8004f74 <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4a16      	ldr	r2, [pc, #88]	; (8004fc8 <UART_Start_Receive_IT+0x1fc>)
 8004f70:	671a      	str	r2, [r3, #112]	; 0x70
 8004f72:	e002      	b.n	8004f7a <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4a15      	ldr	r2, [pc, #84]	; (8004fcc <UART_Start_Receive_IT+0x200>)
 8004f78:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	e853 3f00 	ldrex	r3, [r3]
 8004f8e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004f96:	663b      	str	r3, [r7, #96]	; 0x60
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fa0:	623b      	str	r3, [r7, #32]
 8004fa2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa4:	69f9      	ldr	r1, [r7, #28]
 8004fa6:	6a3a      	ldr	r2, [r7, #32]
 8004fa8:	e841 2300 	strex	r3, r2, [r1]
 8004fac:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1e6      	bne.n	8004f82 <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3774      	adds	r7, #116	; 0x74
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bc80      	pop	{r7}
 8004fbe:	4770      	bx	lr
 8004fc0:	08005a11 	.word	0x08005a11
 8004fc4:	08005719 	.word	0x08005719
 8004fc8:	080055b9 	.word	0x080055b9
 8004fcc:	08005459 	.word	0x08005459

08004fd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b095      	sub	sp, #84	; 0x54
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe0:	e853 3f00 	ldrex	r3, [r3]
 8004fe4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff6:	643b      	str	r3, [r7, #64]	; 0x40
 8004ff8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ffc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ffe:	e841 2300 	strex	r3, r2, [r1]
 8005002:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1e6      	bne.n	8004fd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	3308      	adds	r3, #8
 8005010:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	e853 3f00 	ldrex	r3, [r3]
 8005018:	61fb      	str	r3, [r7, #28]
   return(result);
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005020:	f023 0301 	bic.w	r3, r3, #1
 8005024:	64bb      	str	r3, [r7, #72]	; 0x48
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3308      	adds	r3, #8
 800502c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800502e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005030:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005032:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005036:	e841 2300 	strex	r3, r2, [r1]
 800503a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1e3      	bne.n	800500a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005046:	2b01      	cmp	r3, #1
 8005048:	d118      	bne.n	800507c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	e853 3f00 	ldrex	r3, [r3]
 8005056:	60bb      	str	r3, [r7, #8]
   return(result);
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f023 0310 	bic.w	r3, r3, #16
 800505e:	647b      	str	r3, [r7, #68]	; 0x44
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	461a      	mov	r2, r3
 8005066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005068:	61bb      	str	r3, [r7, #24]
 800506a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506c:	6979      	ldr	r1, [r7, #20]
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	e841 2300 	strex	r3, r2, [r1]
 8005074:	613b      	str	r3, [r7, #16]
   return(result);
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1e6      	bne.n	800504a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2220      	movs	r2, #32
 8005080:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005090:	bf00      	nop
 8005092:	3754      	adds	r7, #84	; 0x54
 8005094:	46bd      	mov	sp, r7
 8005096:	bc80      	pop	{r7}
 8005098:	4770      	bx	lr

0800509a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b084      	sub	sp, #16
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f7ff fa6e 	bl	800459a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050be:	bf00      	nop
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b08f      	sub	sp, #60	; 0x3c
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050d4:	2b21      	cmp	r3, #33	; 0x21
 80050d6:	d14c      	bne.n	8005172 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80050de:	b29b      	uxth	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d132      	bne.n	800514a <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	e853 3f00 	ldrex	r3, [r3]
 80050f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050f8:	637b      	str	r3, [r7, #52]	; 0x34
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005102:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005104:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005106:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800510a:	e841 2300 	strex	r3, r2, [r1]
 800510e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1e6      	bne.n	80050e4 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	e853 3f00 	ldrex	r3, [r3]
 8005122:	60bb      	str	r3, [r7, #8]
   return(result);
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800512a:	633b      	str	r3, [r7, #48]	; 0x30
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	461a      	mov	r2, r3
 8005132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005134:	61bb      	str	r3, [r7, #24]
 8005136:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005138:	6979      	ldr	r1, [r7, #20]
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	e841 2300 	strex	r3, r2, [r1]
 8005140:	613b      	str	r3, [r7, #16]
   return(result);
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1e6      	bne.n	8005116 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005148:	e013      	b.n	8005172 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800514e:	781a      	ldrb	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005166:	b29b      	uxth	r3, r3
 8005168:	3b01      	subs	r3, #1
 800516a:	b29a      	uxth	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8005172:	bf00      	nop
 8005174:	373c      	adds	r7, #60	; 0x3c
 8005176:	46bd      	mov	sp, r7
 8005178:	bc80      	pop	{r7}
 800517a:	4770      	bx	lr

0800517c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800517c:	b480      	push	{r7}
 800517e:	b091      	sub	sp, #68	; 0x44
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800518a:	2b21      	cmp	r3, #33	; 0x21
 800518c:	d151      	bne.n	8005232 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005194:	b29b      	uxth	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d132      	bne.n	8005200 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	e853 3f00 	ldrex	r3, [r3]
 80051a6:	623b      	str	r3, [r7, #32]
   return(result);
 80051a8:	6a3b      	ldr	r3, [r7, #32]
 80051aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	461a      	mov	r2, r3
 80051b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b8:	633b      	str	r3, [r7, #48]	; 0x30
 80051ba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051c0:	e841 2300 	strex	r3, r2, [r1]
 80051c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1e6      	bne.n	800519a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	e853 3f00 	ldrex	r3, [r3]
 80051d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051e0:	637b      	str	r3, [r7, #52]	; 0x34
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ea:	61fb      	str	r3, [r7, #28]
 80051ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	69b9      	ldr	r1, [r7, #24]
 80051f0:	69fa      	ldr	r2, [r7, #28]
 80051f2:	e841 2300 	strex	r3, r2, [r1]
 80051f6:	617b      	str	r3, [r7, #20]
   return(result);
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1e6      	bne.n	80051cc <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80051fe:	e018      	b.n	8005232 <UART_TxISR_16BIT+0xb6>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005204:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	461a      	mov	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005214:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800521a:	1c9a      	adds	r2, r3, #2
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005226:	b29b      	uxth	r3, r3
 8005228:	3b01      	subs	r3, #1
 800522a:	b29a      	uxth	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8005232:	bf00      	nop
 8005234:	3744      	adds	r7, #68	; 0x44
 8005236:	46bd      	mov	sp, r7
 8005238:	bc80      	pop	{r7}
 800523a:	4770      	bx	lr

0800523c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800523c:	b480      	push	{r7}
 800523e:	b091      	sub	sp, #68	; 0x44
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800524a:	2b21      	cmp	r3, #33	; 0x21
 800524c:	d160      	bne.n	8005310 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005254:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005256:	e057      	b.n	8005308 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800525e:	b29b      	uxth	r3, r3
 8005260:	2b00      	cmp	r3, #0
 8005262:	d133      	bne.n	80052cc <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	3308      	adds	r3, #8
 800526a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	e853 3f00 	ldrex	r3, [r3]
 8005272:	623b      	str	r3, [r7, #32]
   return(result);
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800527a:	63bb      	str	r3, [r7, #56]	; 0x38
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3308      	adds	r3, #8
 8005282:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005284:	633a      	str	r2, [r7, #48]	; 0x30
 8005286:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005288:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800528a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800528c:	e841 2300 	strex	r3, r2, [r1]
 8005290:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1e5      	bne.n	8005264 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	e853 3f00 	ldrex	r3, [r3]
 80052a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052ac:	637b      	str	r3, [r7, #52]	; 0x34
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b6:	61fb      	str	r3, [r7, #28]
 80052b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ba:	69b9      	ldr	r1, [r7, #24]
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	e841 2300 	strex	r3, r2, [r1]
 80052c2:	617b      	str	r3, [r7, #20]
   return(result);
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1e6      	bne.n	8005298 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80052ca:	e021      	b.n	8005310 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d013      	beq.n	8005302 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052de:	781a      	ldrb	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005302:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005304:	3b01      	subs	r3, #1
 8005306:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005308:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1a4      	bne.n	8005258 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800530e:	e7ff      	b.n	8005310 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8005310:	bf00      	nop
 8005312:	3744      	adds	r7, #68	; 0x44
 8005314:	46bd      	mov	sp, r7
 8005316:	bc80      	pop	{r7}
 8005318:	4770      	bx	lr

0800531a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800531a:	b480      	push	{r7}
 800531c:	b091      	sub	sp, #68	; 0x44
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005328:	2b21      	cmp	r3, #33	; 0x21
 800532a:	d165      	bne.n	80053f8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005332:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005334:	e05c      	b.n	80053f0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800533c:	b29b      	uxth	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d133      	bne.n	80053aa <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	3308      	adds	r3, #8
 8005348:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534a:	6a3b      	ldr	r3, [r7, #32]
 800534c:	e853 3f00 	ldrex	r3, [r3]
 8005350:	61fb      	str	r3, [r7, #28]
   return(result);
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005358:	637b      	str	r3, [r7, #52]	; 0x34
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	3308      	adds	r3, #8
 8005360:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005362:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005364:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005366:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800536a:	e841 2300 	strex	r3, r2, [r1]
 800536e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1e5      	bne.n	8005342 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	e853 3f00 	ldrex	r3, [r3]
 8005382:	60bb      	str	r3, [r7, #8]
   return(result);
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800538a:	633b      	str	r3, [r7, #48]	; 0x30
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	461a      	mov	r2, r3
 8005392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005394:	61bb      	str	r3, [r7, #24]
 8005396:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005398:	6979      	ldr	r1, [r7, #20]
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	e841 2300 	strex	r3, r2, [r1]
 80053a0:	613b      	str	r3, [r7, #16]
   return(result);
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1e6      	bne.n	8005376 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80053a8:	e026      	b.n	80053f8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	69db      	ldr	r3, [r3, #28]
 80053b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d018      	beq.n	80053ea <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (uint16_t *) huart->pTxBuffPtr;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053bc:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80053be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	461a      	mov	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053cc:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d2:	1c9a      	adds	r2, r3, #2
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053de:	b29b      	uxth	r3, r3
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80053ea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80053ec:	3b01      	subs	r3, #1
 80053ee:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80053f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d19f      	bne.n	8005336 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80053f6:	e7ff      	b.n	80053f8 <UART_TxISR_16BIT_FIFOEN+0xde>
 80053f8:	bf00      	nop
 80053fa:	3744      	adds	r7, #68	; 0x44
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bc80      	pop	{r7}
 8005400:	4770      	bx	lr

08005402 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b088      	sub	sp, #32
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	e853 3f00 	ldrex	r3, [r3]
 8005416:	60bb      	str	r3, [r7, #8]
   return(result);
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800541e:	61fb      	str	r3, [r7, #28]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	461a      	mov	r2, r3
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	61bb      	str	r3, [r7, #24]
 800542a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542c:	6979      	ldr	r1, [r7, #20]
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	e841 2300 	strex	r3, r2, [r1]
 8005434:	613b      	str	r3, [r7, #16]
   return(result);
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1e6      	bne.n	800540a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2220      	movs	r2, #32
 8005440:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7ff f89c 	bl	8004588 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005450:	bf00      	nop
 8005452:	3720      	adds	r7, #32
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b096      	sub	sp, #88	; 0x58
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005466:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005470:	2b22      	cmp	r3, #34	; 0x22
 8005472:	f040 8095 	bne.w	80055a0 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005480:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005484:	b2d9      	uxtb	r1, r3
 8005486:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800548a:	b2da      	uxtb	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005490:	400a      	ands	r2, r1
 8005492:	b2d2      	uxtb	r2, r2
 8005494:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	3b01      	subs	r3, #1
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d178      	bne.n	80055b0 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c6:	e853 3f00 	ldrex	r3, [r3]
 80054ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054d2:	653b      	str	r3, [r7, #80]	; 0x50
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	461a      	mov	r2, r3
 80054da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054dc:	647b      	str	r3, [r7, #68]	; 0x44
 80054de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054e4:	e841 2300 	strex	r3, r2, [r1]
 80054e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e6      	bne.n	80054be <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3308      	adds	r3, #8
 80054f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	e853 3f00 	ldrex	r3, [r3]
 80054fe:	623b      	str	r3, [r7, #32]
   return(result);
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	f023 0301 	bic.w	r3, r3, #1
 8005506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	3308      	adds	r3, #8
 800550e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005510:	633a      	str	r2, [r7, #48]	; 0x30
 8005512:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005514:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005518:	e841 2300 	strex	r3, r2, [r1]
 800551c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800551e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1e5      	bne.n	80054f0 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2220      	movs	r2, #32
 8005528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005536:	2b01      	cmp	r3, #1
 8005538:	d12e      	bne.n	8005598 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	e853 3f00 	ldrex	r3, [r3]
 800554c:	60fb      	str	r3, [r7, #12]
   return(result);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f023 0310 	bic.w	r3, r3, #16
 8005554:	64bb      	str	r3, [r7, #72]	; 0x48
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	461a      	mov	r2, r3
 800555c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800555e:	61fb      	str	r3, [r7, #28]
 8005560:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005562:	69b9      	ldr	r1, [r7, #24]
 8005564:	69fa      	ldr	r2, [r7, #28]
 8005566:	e841 2300 	strex	r3, r2, [r1]
 800556a:	617b      	str	r3, [r7, #20]
   return(result);
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e6      	bne.n	8005540 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	f003 0310 	and.w	r3, r3, #16
 800557c:	2b10      	cmp	r3, #16
 800557e:	d103      	bne.n	8005588 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2210      	movs	r2, #16
 8005586:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800558e:	4619      	mov	r1, r3
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7ff f80b 	bl	80045ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005596:	e00b      	b.n	80055b0 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7fb fa47 	bl	8000a2c <HAL_UART_RxCpltCallback>
}
 800559e:	e007      	b.n	80055b0 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699a      	ldr	r2, [r3, #24]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0208 	orr.w	r2, r2, #8
 80055ae:	619a      	str	r2, [r3, #24]
}
 80055b0:	bf00      	nop
 80055b2:	3758      	adds	r7, #88	; 0x58
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b096      	sub	sp, #88	; 0x58
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80055c6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d0:	2b22      	cmp	r3, #34	; 0x22
 80055d2:	f040 8095 	bne.w	8005700 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80055e6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80055ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80055ee:	4013      	ands	r3, r2
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055fa:	1c9a      	adds	r2, r3, #2
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005606:	b29b      	uxth	r3, r3
 8005608:	3b01      	subs	r3, #1
 800560a:	b29a      	uxth	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005618:	b29b      	uxth	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d178      	bne.n	8005710 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005626:	e853 3f00 	ldrex	r3, [r3]
 800562a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800562c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	461a      	mov	r2, r3
 800563a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800563c:	643b      	str	r3, [r7, #64]	; 0x40
 800563e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005640:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005642:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005644:	e841 2300 	strex	r3, r2, [r1]
 8005648:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800564a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e6      	bne.n	800561e <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	3308      	adds	r3, #8
 8005656:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	e853 3f00 	ldrex	r3, [r3]
 800565e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	f023 0301 	bic.w	r3, r3, #1
 8005666:	64bb      	str	r3, [r7, #72]	; 0x48
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	3308      	adds	r3, #8
 800566e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005670:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005672:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005674:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005678:	e841 2300 	strex	r3, r2, [r1]
 800567c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1e5      	bne.n	8005650 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2220      	movs	r2, #32
 8005688:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005696:	2b01      	cmp	r3, #1
 8005698:	d12e      	bne.n	80056f8 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	e853 3f00 	ldrex	r3, [r3]
 80056ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	f023 0310 	bic.w	r3, r3, #16
 80056b4:	647b      	str	r3, [r7, #68]	; 0x44
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	461a      	mov	r2, r3
 80056bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056be:	61bb      	str	r3, [r7, #24]
 80056c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c2:	6979      	ldr	r1, [r7, #20]
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	e841 2300 	strex	r3, r2, [r1]
 80056ca:	613b      	str	r3, [r7, #16]
   return(result);
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1e6      	bne.n	80056a0 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	f003 0310 	and.w	r3, r3, #16
 80056dc:	2b10      	cmp	r3, #16
 80056de:	d103      	bne.n	80056e8 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2210      	movs	r2, #16
 80056e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80056ee:	4619      	mov	r1, r3
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f7fe ff5b 	bl	80045ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80056f6:	e00b      	b.n	8005710 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7fb f997 	bl	8000a2c <HAL_UART_RxCpltCallback>
}
 80056fe:	e007      	b.n	8005710 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	699a      	ldr	r2, [r3, #24]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0208 	orr.w	r2, r2, #8
 800570e:	619a      	str	r2, [r3, #24]
}
 8005710:	bf00      	nop
 8005712:	3758      	adds	r7, #88	; 0x58
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b0a6      	sub	sp, #152	; 0x98
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005726:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574e:	2b22      	cmp	r3, #34	; 0x22
 8005750:	f040 814f 	bne.w	80059f2 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800575a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800575e:	e0f6      	b.n	800594e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005766:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800576a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800576e:	b2d9      	uxtb	r1, r3
 8005770:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8005774:	b2da      	uxtb	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800577a:	400a      	ands	r2, r1
 800577c:	b2d2      	uxtb	r2, r2
 800577e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005784:	1c5a      	adds	r2, r3, #1
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005790:	b29b      	uxth	r3, r3
 8005792:	3b01      	subs	r3, #1
 8005794:	b29a      	uxth	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80057a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80057aa:	f003 0307 	and.w	r3, r3, #7
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d053      	beq.n	800585a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80057b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d011      	beq.n	80057e2 <UART_RxISR_8BIT_FIFOEN+0xca>
 80057be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00b      	beq.n	80057e2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2201      	movs	r2, #1
 80057d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057d8:	f043 0201 	orr.w	r2, r3, #1
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d011      	beq.n	8005812 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80057ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00b      	beq.n	8005812 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2202      	movs	r2, #2
 8005800:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005808:	f043 0204 	orr.w	r2, r3, #4
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005812:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005816:	f003 0304 	and.w	r3, r3, #4
 800581a:	2b00      	cmp	r3, #0
 800581c:	d011      	beq.n	8005842 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800581e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00b      	beq.n	8005842 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2204      	movs	r2, #4
 8005830:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005838:	f043 0202 	orr.w	r2, r3, #2
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005848:	2b00      	cmp	r3, #0
 800584a:	d006      	beq.n	800585a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f7fe fea4 	bl	800459a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005860:	b29b      	uxth	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d173      	bne.n	800594e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800586e:	e853 3f00 	ldrex	r3, [r3]
 8005872:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005874:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005876:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800587a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005888:	66bb      	str	r3, [r7, #104]	; 0x68
 800588a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800588e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005890:	e841 2300 	strex	r3, r2, [r1]
 8005894:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1e4      	bne.n	8005866 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	3308      	adds	r3, #8
 80058a2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058a6:	e853 3f00 	ldrex	r3, [r3]
 80058aa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80058ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058b2:	f023 0301 	bic.w	r3, r3, #1
 80058b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3308      	adds	r3, #8
 80058be:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80058c0:	657a      	str	r2, [r7, #84]	; 0x54
 80058c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80058c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80058c8:	e841 2300 	strex	r3, r2, [r1]
 80058cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80058ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1e3      	bne.n	800589c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2220      	movs	r2, #32
 80058d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d12e      	bne.n	8005948 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f8:	e853 3f00 	ldrex	r3, [r3]
 80058fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005900:	f023 0310 	bic.w	r3, r3, #16
 8005904:	67bb      	str	r3, [r7, #120]	; 0x78
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	461a      	mov	r2, r3
 800590c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800590e:	643b      	str	r3, [r7, #64]	; 0x40
 8005910:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005912:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005914:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800591c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1e6      	bne.n	80058f0 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	f003 0310 	and.w	r3, r3, #16
 800592c:	2b10      	cmp	r3, #16
 800592e:	d103      	bne.n	8005938 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2210      	movs	r2, #16
 8005936:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800593e:	4619      	mov	r1, r3
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f7fe fe33 	bl	80045ac <HAL_UARTEx_RxEventCallback>
 8005946:	e002      	b.n	800594e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f7fb f86f 	bl	8000a2c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800594e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005952:	2b00      	cmp	r3, #0
 8005954:	d006      	beq.n	8005964 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8005956:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b00      	cmp	r3, #0
 8005960:	f47f aefe 	bne.w	8005760 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800596a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800596e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8005972:	2b00      	cmp	r3, #0
 8005974:	d045      	beq.n	8005a02 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800597c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005980:	429a      	cmp	r2, r3
 8005982:	d23e      	bcs.n	8005a02 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	3308      	adds	r3, #8
 800598a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	e853 3f00 	ldrex	r3, [r3]
 8005992:	61fb      	str	r3, [r7, #28]
   return(result);
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800599a:	673b      	str	r3, [r7, #112]	; 0x70
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3308      	adds	r3, #8
 80059a2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80059a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059ac:	e841 2300 	strex	r3, r2, [r1]
 80059b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1e5      	bne.n	8005984 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a14      	ldr	r2, [pc, #80]	; (8005a0c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80059bc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	e853 3f00 	ldrex	r3, [r3]
 80059ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f043 0320 	orr.w	r3, r3, #32
 80059d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	461a      	mov	r2, r3
 80059da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059dc:	61bb      	str	r3, [r7, #24]
 80059de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e0:	6979      	ldr	r1, [r7, #20]
 80059e2:	69ba      	ldr	r2, [r7, #24]
 80059e4:	e841 2300 	strex	r3, r2, [r1]
 80059e8:	613b      	str	r3, [r7, #16]
   return(result);
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1e6      	bne.n	80059be <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80059f0:	e007      	b.n	8005a02 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	699a      	ldr	r2, [r3, #24]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f042 0208 	orr.w	r2, r2, #8
 8005a00:	619a      	str	r2, [r3, #24]
}
 8005a02:	bf00      	nop
 8005a04:	3798      	adds	r7, #152	; 0x98
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	08005459 	.word	0x08005459

08005a10 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b0a8      	sub	sp, #160	; 0xa0
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005a1e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	69db      	ldr	r3, [r3, #28]
 8005a28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a46:	2b22      	cmp	r3, #34	; 0x22
 8005a48:	f040 8153 	bne.w	8005cf2 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005a52:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005a56:	e0fa      	b.n	8005c4e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8005a6a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8005a6e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005a72:	4013      	ands	r3, r2
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a7a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a80:	1c9a      	adds	r2, r3, #2
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005aa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d053      	beq.n	8005b56 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005aae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d011      	beq.n	8005ade <UART_RxISR_16BIT_FIFOEN+0xce>
 8005aba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00b      	beq.n	8005ade <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2201      	movs	r2, #1
 8005acc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ad4:	f043 0201 	orr.w	r2, r3, #1
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ade:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d011      	beq.n	8005b0e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005aea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00b      	beq.n	8005b0e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2202      	movs	r2, #2
 8005afc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b04:	f043 0204 	orr.w	r2, r3, #4
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b12:	f003 0304 	and.w	r3, r3, #4
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d011      	beq.n	8005b3e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005b1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00b      	beq.n	8005b3e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2204      	movs	r2, #4
 8005b2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b34:	f043 0202 	orr.w	r2, r3, #2
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d006      	beq.n	8005b56 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f7fe fd26 	bl	800459a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d175      	bne.n	8005c4e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b6a:	e853 3f00 	ldrex	r3, [r3]
 8005b6e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b86:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b88:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b8a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b8c:	e841 2300 	strex	r3, r2, [r1]
 8005b90:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005b92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1e4      	bne.n	8005b62 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	3308      	adds	r3, #8
 8005b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ba2:	e853 3f00 	ldrex	r3, [r3]
 8005ba6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005baa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bae:	f023 0301 	bic.w	r3, r3, #1
 8005bb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3308      	adds	r3, #8
 8005bbc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005bc0:	65ba      	str	r2, [r7, #88]	; 0x58
 8005bc2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005bc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bc8:	e841 2300 	strex	r3, r2, [r1]
 8005bcc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1e1      	bne.n	8005b98 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d12e      	bne.n	8005c48 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf8:	e853 3f00 	ldrex	r3, [r3]
 8005bfc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c00:	f023 0310 	bic.w	r3, r3, #16
 8005c04:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c0e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c10:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c16:	e841 2300 	strex	r3, r2, [r1]
 8005c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1e6      	bne.n	8005bf0 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	69db      	ldr	r3, [r3, #28]
 8005c28:	f003 0310 	and.w	r3, r3, #16
 8005c2c:	2b10      	cmp	r3, #16
 8005c2e:	d103      	bne.n	8005c38 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2210      	movs	r2, #16
 8005c36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c3e:	4619      	mov	r1, r3
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f7fe fcb3 	bl	80045ac <HAL_UARTEx_RxEventCallback>
 8005c46:	e002      	b.n	8005c4e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f7fa feef 	bl	8000a2c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005c4e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d006      	beq.n	8005c64 <UART_RxISR_16BIT_FIFOEN+0x254>
 8005c56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c5a:	f003 0320 	and.w	r3, r3, #32
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f47f aefa 	bne.w	8005a58 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c6a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005c6e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d045      	beq.n	8005d02 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005c7c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d23e      	bcs.n	8005d02 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	3308      	adds	r3, #8
 8005c8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	e853 3f00 	ldrex	r3, [r3]
 8005c92:	623b      	str	r3, [r7, #32]
   return(result);
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c9a:	677b      	str	r3, [r7, #116]	; 0x74
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	3308      	adds	r3, #8
 8005ca2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005ca4:	633a      	str	r2, [r7, #48]	; 0x30
 8005ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cac:	e841 2300 	strex	r3, r2, [r1]
 8005cb0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1e5      	bne.n	8005c84 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a14      	ldr	r2, [pc, #80]	; (8005d0c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8005cbc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	e853 3f00 	ldrex	r3, [r3]
 8005cca:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f043 0320 	orr.w	r3, r3, #32
 8005cd2:	673b      	str	r3, [r7, #112]	; 0x70
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	461a      	mov	r2, r3
 8005cda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cdc:	61fb      	str	r3, [r7, #28]
 8005cde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce0:	69b9      	ldr	r1, [r7, #24]
 8005ce2:	69fa      	ldr	r2, [r7, #28]
 8005ce4:	e841 2300 	strex	r3, r2, [r1]
 8005ce8:	617b      	str	r3, [r7, #20]
   return(result);
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1e6      	bne.n	8005cbe <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005cf0:	e007      	b.n	8005d02 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	699a      	ldr	r2, [r3, #24]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f042 0208 	orr.w	r2, r2, #8
 8005d00:	619a      	str	r2, [r3, #24]
}
 8005d02:	bf00      	nop
 8005d04:	37a0      	adds	r7, #160	; 0xa0
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	080055b9 	.word	0x080055b9

08005d10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bc80      	pop	{r7}
 8005d20:	4770      	bx	lr

08005d22 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005d2a:	bf00      	nop
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bc80      	pop	{r7}
 8005d32:	4770      	bx	lr

08005d34 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bc80      	pop	{r7}
 8005d44:	4770      	bx	lr

08005d46 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b085      	sub	sp, #20
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d101      	bne.n	8005d5c <HAL_UARTEx_DisableFifoMode+0x16>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	e027      	b.n	8005dac <HAL_UARTEx_DisableFifoMode+0x66>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2224      	movs	r2, #36	; 0x24
 8005d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 0201 	bic.w	r2, r2, #1
 8005d82:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d8a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2220      	movs	r2, #32
 8005d9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bc80      	pop	{r7}
 8005db4:	4770      	bx	lr

08005db6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b084      	sub	sp, #16
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
 8005dbe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d101      	bne.n	8005dce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005dca:	2302      	movs	r3, #2
 8005dcc:	e02d      	b.n	8005e2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2224      	movs	r2, #36	; 0x24
 8005dda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f022 0201 	bic.w	r2, r2, #1
 8005df4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f850 	bl	8005eb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b084      	sub	sp, #16
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
 8005e3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d101      	bne.n	8005e4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e46:	2302      	movs	r3, #2
 8005e48:	e02d      	b.n	8005ea6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2224      	movs	r2, #36	; 0x24
 8005e56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0201 	bic.w	r2, r2, #1
 8005e70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	683a      	ldr	r2, [r7, #0]
 8005e82:	430a      	orrs	r2, r1
 8005e84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f812 	bl	8005eb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
	...

08005eb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d108      	bne.n	8005ed2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ed0:	e031      	b.n	8005f36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ed2:	2308      	movs	r3, #8
 8005ed4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ed6:	2308      	movs	r3, #8
 8005ed8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	0e5b      	lsrs	r3, r3, #25
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	f003 0307 	and.w	r3, r3, #7
 8005ee8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	0f5b      	lsrs	r3, r3, #29
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	f003 0307 	and.w	r3, r3, #7
 8005ef8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005efa:	7bbb      	ldrb	r3, [r7, #14]
 8005efc:	7b3a      	ldrb	r2, [r7, #12]
 8005efe:	4910      	ldr	r1, [pc, #64]	; (8005f40 <UARTEx_SetNbDataToProcess+0x90>)
 8005f00:	5c8a      	ldrb	r2, [r1, r2]
 8005f02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f06:	7b3a      	ldrb	r2, [r7, #12]
 8005f08:	490e      	ldr	r1, [pc, #56]	; (8005f44 <UARTEx_SetNbDataToProcess+0x94>)
 8005f0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f18:	7bfb      	ldrb	r3, [r7, #15]
 8005f1a:	7b7a      	ldrb	r2, [r7, #13]
 8005f1c:	4908      	ldr	r1, [pc, #32]	; (8005f40 <UARTEx_SetNbDataToProcess+0x90>)
 8005f1e:	5c8a      	ldrb	r2, [r1, r2]
 8005f20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f24:	7b7a      	ldrb	r2, [r7, #13]
 8005f26:	4907      	ldr	r1, [pc, #28]	; (8005f44 <UARTEx_SetNbDataToProcess+0x94>)
 8005f28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005f36:	bf00      	nop
 8005f38:	3714      	adds	r7, #20
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bc80      	pop	{r7}
 8005f3e:	4770      	bx	lr
 8005f40:	0800a1b4 	.word	0x0800a1b4
 8005f44:	0800a1bc 	.word	0x0800a1bc

08005f48 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af02      	add	r7, sp, #8
 8005f4e:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8005f50:	4a21      	ldr	r2, [pc, #132]	; (8005fd8 <RadioInit+0x90>)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8005f56:	4b21      	ldr	r3, [pc, #132]	; (8005fdc <RadioInit+0x94>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8005f5c:	4b1f      	ldr	r3, [pc, #124]	; (8005fdc <RadioInit+0x94>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8005f62:	4b1e      	ldr	r3, [pc, #120]	; (8005fdc <RadioInit+0x94>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 8005f68:	481d      	ldr	r0, [pc, #116]	; (8005fe0 <RadioInit+0x98>)
 8005f6a:	f001 fe7b 	bl	8007c64 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 8005f6e:	2000      	movs	r0, #0
 8005f70:	f001 f818 	bl	8006fa4 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 8005f74:	f002 f90e 	bl	8008194 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8005f78:	2100      	movs	r1, #0
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	f002 fc64 	bl	8008848 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 8005f80:	2204      	movs	r2, #4
 8005f82:	2100      	movs	r1, #0
 8005f84:	2001      	movs	r0, #1
 8005f86:	f002 fa8f 	bl	80084a8 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005f92:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005f96:	f002 f9c3 	bl	8008320 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8005f9a:	f000 fe95 	bl	8006cc8 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	4b10      	ldr	r3, [pc, #64]	; (8005fe4 <RadioInit+0x9c>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f04f 31ff 	mov.w	r1, #4294967295
 8005faa:	480f      	ldr	r0, [pc, #60]	; (8005fe8 <RadioInit+0xa0>)
 8005fac:	f003 f8ce 	bl	800914c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	4b0d      	ldr	r3, [pc, #52]	; (8005fec <RadioInit+0xa4>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8005fbc:	480c      	ldr	r0, [pc, #48]	; (8005ff0 <RadioInit+0xa8>)
 8005fbe:	f003 f8c5 	bl	800914c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8005fc2:	4809      	ldr	r0, [pc, #36]	; (8005fe8 <RadioInit+0xa0>)
 8005fc4:	f003 f966 	bl	8009294 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8005fc8:	4809      	ldr	r0, [pc, #36]	; (8005ff0 <RadioInit+0xa8>)
 8005fca:	f003 f963 	bl	8009294 <UTIL_TIMER_Stop>
}
 8005fce:	bf00      	nop
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	200002a0 	.word	0x200002a0
 8005fdc:	20000444 	.word	0x20000444
 8005fe0:	08007089 	.word	0x08007089
 8005fe4:	08007011 	.word	0x08007011
 8005fe8:	2000049c 	.word	0x2000049c
 8005fec:	08007025 	.word	0x08007025
 8005ff0:	200004b4 	.word	0x200004b4

08005ff4 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8005ff8:	f001 fe78 	bl	8007cec <SUBGRF_GetOperatingMode>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b07      	cmp	r3, #7
 8006000:	d00a      	beq.n	8006018 <RadioGetStatus+0x24>
 8006002:	2b07      	cmp	r3, #7
 8006004:	dc0a      	bgt.n	800601c <RadioGetStatus+0x28>
 8006006:	2b04      	cmp	r3, #4
 8006008:	d002      	beq.n	8006010 <RadioGetStatus+0x1c>
 800600a:	2b05      	cmp	r3, #5
 800600c:	d002      	beq.n	8006014 <RadioGetStatus+0x20>
 800600e:	e005      	b.n	800601c <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8006010:	2302      	movs	r3, #2
 8006012:	e004      	b.n	800601e <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8006014:	2301      	movs	r3, #1
 8006016:	e002      	b.n	800601e <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8006018:	2303      	movs	r3, #3
 800601a:	e000      	b.n	800601e <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 800601c:	2300      	movs	r3, #0
    }
}
 800601e:	4618      	mov	r0, r3
 8006020:	bd80      	pop	{r7, pc}
	...

08006024 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	4603      	mov	r3, r0
 800602c:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 800602e:	4a25      	ldr	r2, [pc, #148]	; (80060c4 <RadioSetModem+0xa0>)
 8006030:	79fb      	ldrb	r3, [r7, #7]
 8006032:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 8006034:	79fb      	ldrb	r3, [r7, #7]
 8006036:	4618      	mov	r0, r3
 8006038:	f002 ffcb 	bl	8008fd2 <RFW_SetRadioModem>
    switch( modem )
 800603c:	79fb      	ldrb	r3, [r7, #7]
 800603e:	3b01      	subs	r3, #1
 8006040:	2b03      	cmp	r3, #3
 8006042:	d80b      	bhi.n	800605c <RadioSetModem+0x38>
 8006044:	a201      	add	r2, pc, #4	; (adr r2, 800604c <RadioSetModem+0x28>)
 8006046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604a:	bf00      	nop
 800604c:	0800606b 	.word	0x0800606b
 8006050:	08006091 	.word	0x08006091
 8006054:	0800609f 	.word	0x0800609f
 8006058:	080060ad 	.word	0x080060ad
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800605c:	2000      	movs	r0, #0
 800605e:	f002 f9fd 	bl	800845c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006062:	4b18      	ldr	r3, [pc, #96]	; (80060c4 <RadioSetModem+0xa0>)
 8006064:	2200      	movs	r2, #0
 8006066:	735a      	strb	r2, [r3, #13]
        break;
 8006068:	e028      	b.n	80060bc <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800606a:	2001      	movs	r0, #1
 800606c:	f002 f9f6 	bl	800845c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8006070:	4b14      	ldr	r3, [pc, #80]	; (80060c4 <RadioSetModem+0xa0>)
 8006072:	7b5a      	ldrb	r2, [r3, #13]
 8006074:	4b13      	ldr	r3, [pc, #76]	; (80060c4 <RadioSetModem+0xa0>)
 8006076:	7b1b      	ldrb	r3, [r3, #12]
 8006078:	429a      	cmp	r2, r3
 800607a:	d01e      	beq.n	80060ba <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800607c:	4b11      	ldr	r3, [pc, #68]	; (80060c4 <RadioSetModem+0xa0>)
 800607e:	7b1a      	ldrb	r2, [r3, #12]
 8006080:	4b10      	ldr	r3, [pc, #64]	; (80060c4 <RadioSetModem+0xa0>)
 8006082:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8006084:	4b0f      	ldr	r3, [pc, #60]	; (80060c4 <RadioSetModem+0xa0>)
 8006086:	7b5b      	ldrb	r3, [r3, #13]
 8006088:	4618      	mov	r0, r3
 800608a:	f000 ff8b 	bl	8006fa4 <RadioSetPublicNetwork>
        }
        break;
 800608e:	e014      	b.n	80060ba <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8006090:	2002      	movs	r0, #2
 8006092:	f002 f9e3 	bl	800845c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006096:	4b0b      	ldr	r3, [pc, #44]	; (80060c4 <RadioSetModem+0xa0>)
 8006098:	2200      	movs	r2, #0
 800609a:	735a      	strb	r2, [r3, #13]
        break;
 800609c:	e00e      	b.n	80060bc <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800609e:	2002      	movs	r0, #2
 80060a0:	f002 f9dc 	bl	800845c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80060a4:	4b07      	ldr	r3, [pc, #28]	; (80060c4 <RadioSetModem+0xa0>)
 80060a6:	2200      	movs	r2, #0
 80060a8:	735a      	strb	r2, [r3, #13]
        break;
 80060aa:	e007      	b.n	80060bc <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80060ac:	2000      	movs	r0, #0
 80060ae:	f002 f9d5 	bl	800845c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80060b2:	4b04      	ldr	r3, [pc, #16]	; (80060c4 <RadioSetModem+0xa0>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	735a      	strb	r2, [r3, #13]
        break;
 80060b8:	e000      	b.n	80060bc <RadioSetModem+0x98>
        break;
 80060ba:	bf00      	nop
    }
}
 80060bc:	bf00      	nop
 80060be:	3708      	adds	r7, #8
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	20000444 	.word	0x20000444

080060c8 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f002 f981 	bl	80083d8 <SUBGRF_SetRfFrequency>
}
 80060d6:	bf00      	nop
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b090      	sub	sp, #64	; 0x40
 80060e2:	af0a      	add	r7, sp, #40	; 0x28
 80060e4:	60f8      	str	r0, [r7, #12]
 80060e6:	60b9      	str	r1, [r7, #8]
 80060e8:	603b      	str	r3, [r7, #0]
 80060ea:	4613      	mov	r3, r2
 80060ec:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80060ee:	2301      	movs	r3, #1
 80060f0:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80060f2:	2300      	movs	r3, #0
 80060f4:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80060f6:	2300      	movs	r3, #0
 80060f8:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 80060fa:	f000 fdf8 	bl	8006cee <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 80060fe:	2000      	movs	r0, #0
 8006100:	f7ff ff90 	bl	8006024 <RadioSetModem>

    RadioSetChannel( freq );
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f7ff ffdf 	bl	80060c8 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800610a:	2301      	movs	r3, #1
 800610c:	9309      	str	r3, [sp, #36]	; 0x24
 800610e:	2300      	movs	r3, #0
 8006110:	9308      	str	r3, [sp, #32]
 8006112:	2300      	movs	r3, #0
 8006114:	9307      	str	r3, [sp, #28]
 8006116:	2300      	movs	r3, #0
 8006118:	9306      	str	r3, [sp, #24]
 800611a:	2300      	movs	r3, #0
 800611c:	9305      	str	r3, [sp, #20]
 800611e:	2300      	movs	r3, #0
 8006120:	9304      	str	r3, [sp, #16]
 8006122:	2300      	movs	r3, #0
 8006124:	9303      	str	r3, [sp, #12]
 8006126:	2300      	movs	r3, #0
 8006128:	9302      	str	r3, [sp, #8]
 800612a:	2303      	movs	r3, #3
 800612c:	9301      	str	r3, [sp, #4]
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	2300      	movs	r3, #0
 8006134:	f44f 7216 	mov.w	r2, #600	; 0x258
 8006138:	68b9      	ldr	r1, [r7, #8]
 800613a:	2000      	movs	r0, #0
 800613c:	f000 f840 	bl	80061c0 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8006140:	2000      	movs	r0, #0
 8006142:	f000 fddb 	bl	8006cfc <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8006146:	f000 ff5b 	bl	8007000 <RadioGetWakeupTime>
 800614a:	4603      	mov	r3, r0
 800614c:	4618      	mov	r0, r3
 800614e:	f7fa fd3d 	bl	8000bcc <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8006152:	f003 f939 	bl	80093c8 <UTIL_TIMER_GetCurrentTime>
 8006156:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8006158:	e00d      	b.n	8006176 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 800615a:	2000      	movs	r0, #0
 800615c:	f000 fea0 	bl	8006ea0 <RadioRssi>
 8006160:	4603      	mov	r3, r0
 8006162:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8006164:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006168:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800616c:	429a      	cmp	r2, r3
 800616e:	dd02      	ble.n	8006176 <RadioIsChannelFree+0x98>
        {
            status = false;
 8006170:	2300      	movs	r3, #0
 8006172:	75fb      	strb	r3, [r7, #23]
            break;
 8006174:	e006      	b.n	8006184 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8006176:	6938      	ldr	r0, [r7, #16]
 8006178:	f003 f938 	bl	80093ec <UTIL_TIMER_GetElapsedTime>
 800617c:	4602      	mov	r2, r0
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	4293      	cmp	r3, r2
 8006182:	d8ea      	bhi.n	800615a <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8006184:	f000 fdb3 	bl	8006cee <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 8006188:	7dfb      	ldrb	r3, [r7, #23]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3718      	adds	r7, #24
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b082      	sub	sp, #8
 8006196:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8006198:	2300      	movs	r3, #0
 800619a:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 800619c:	2001      	movs	r0, #1
 800619e:	f7ff ff41 	bl	8006024 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80061a2:	2300      	movs	r3, #0
 80061a4:	2200      	movs	r2, #0
 80061a6:	2100      	movs	r1, #0
 80061a8:	2000      	movs	r0, #0
 80061aa:	f002 f8b9 	bl	8008320 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80061ae:	f001 fe6e 	bl	8007e8e <SUBGRF_GetRandom>
 80061b2:	6078      	str	r0, [r7, #4]

    return rnd;
 80061b4:	687b      	ldr	r3, [r7, #4]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3708      	adds	r7, #8
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
	...

080061c0 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b08a      	sub	sp, #40	; 0x28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60b9      	str	r1, [r7, #8]
 80061c8:	607a      	str	r2, [r7, #4]
 80061ca:	461a      	mov	r2, r3
 80061cc:	4603      	mov	r3, r0
 80061ce:	73fb      	strb	r3, [r7, #15]
 80061d0:	4613      	mov	r3, r2
 80061d2:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 80061d4:	4abd      	ldr	r2, [pc, #756]	; (80064cc <RadioSetRxConfig+0x30c>)
 80061d6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80061da:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80061dc:	f002 feb7 	bl	8008f4e <RFW_DeInit>
    if( rxContinuous == true )
 80061e0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80061e8:	2300      	movs	r3, #0
 80061ea:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 80061ec:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d004      	beq.n	80061fe <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 80061f4:	4ab6      	ldr	r2, [pc, #728]	; (80064d0 <RadioSetRxConfig+0x310>)
 80061f6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80061fa:	7013      	strb	r3, [r2, #0]
 80061fc:	e002      	b.n	8006204 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 80061fe:	4bb4      	ldr	r3, [pc, #720]	; (80064d0 <RadioSetRxConfig+0x310>)
 8006200:	22ff      	movs	r2, #255	; 0xff
 8006202:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8006204:	7bfb      	ldrb	r3, [r7, #15]
 8006206:	2b04      	cmp	r3, #4
 8006208:	d009      	beq.n	800621e <RadioSetRxConfig+0x5e>
 800620a:	2b04      	cmp	r3, #4
 800620c:	f300 81da 	bgt.w	80065c4 <RadioSetRxConfig+0x404>
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 80bf 	beq.w	8006394 <RadioSetRxConfig+0x1d4>
 8006216:	2b01      	cmp	r3, #1
 8006218:	f000 812c 	beq.w	8006474 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 800621c:	e1d2      	b.n	80065c4 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800621e:	2001      	movs	r0, #1
 8006220:	f001 ff7a 	bl	8008118 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006224:	4ba9      	ldr	r3, [pc, #676]	; (80064cc <RadioSetRxConfig+0x30c>)
 8006226:	2200      	movs	r2, #0
 8006228:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800622c:	4aa7      	ldr	r2, [pc, #668]	; (80064cc <RadioSetRxConfig+0x30c>)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8006232:	4ba6      	ldr	r3, [pc, #664]	; (80064cc <RadioSetRxConfig+0x30c>)
 8006234:	2209      	movs	r2, #9
 8006236:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800623a:	4ba4      	ldr	r3, [pc, #656]	; (80064cc <RadioSetRxConfig+0x30c>)
 800623c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006240:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8006242:	68b8      	ldr	r0, [r7, #8]
 8006244:	f002 fdb4 	bl	8008db0 <SUBGRF_GetFskBandwidthRegValue>
 8006248:	4603      	mov	r3, r0
 800624a:	461a      	mov	r2, r3
 800624c:	4b9f      	ldr	r3, [pc, #636]	; (80064cc <RadioSetRxConfig+0x30c>)
 800624e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006252:	4b9e      	ldr	r3, [pc, #632]	; (80064cc <RadioSetRxConfig+0x30c>)
 8006254:	2200      	movs	r2, #0
 8006256:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006258:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800625a:	00db      	lsls	r3, r3, #3
 800625c:	b29a      	uxth	r2, r3
 800625e:	4b9b      	ldr	r3, [pc, #620]	; (80064cc <RadioSetRxConfig+0x30c>)
 8006260:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8006262:	4b9a      	ldr	r3, [pc, #616]	; (80064cc <RadioSetRxConfig+0x30c>)
 8006264:	2200      	movs	r2, #0
 8006266:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8006268:	4b98      	ldr	r3, [pc, #608]	; (80064cc <RadioSetRxConfig+0x30c>)
 800626a:	2210      	movs	r2, #16
 800626c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800626e:	4b97      	ldr	r3, [pc, #604]	; (80064cc <RadioSetRxConfig+0x30c>)
 8006270:	2200      	movs	r2, #0
 8006272:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8006274:	4b95      	ldr	r3, [pc, #596]	; (80064cc <RadioSetRxConfig+0x30c>)
 8006276:	2200      	movs	r2, #0
 8006278:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800627a:	4b95      	ldr	r3, [pc, #596]	; (80064d0 <RadioSetRxConfig+0x310>)
 800627c:	781a      	ldrb	r2, [r3, #0]
 800627e:	4b93      	ldr	r3, [pc, #588]	; (80064cc <RadioSetRxConfig+0x30c>)
 8006280:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8006282:	4b92      	ldr	r3, [pc, #584]	; (80064cc <RadioSetRxConfig+0x30c>)
 8006284:	2201      	movs	r2, #1
 8006286:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8006288:	4b90      	ldr	r3, [pc, #576]	; (80064cc <RadioSetRxConfig+0x30c>)
 800628a:	2200      	movs	r2, #0
 800628c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800628e:	2004      	movs	r0, #4
 8006290:	f7ff fec8 	bl	8006024 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006294:	488f      	ldr	r0, [pc, #572]	; (80064d4 <RadioSetRxConfig+0x314>)
 8006296:	f002 f96d 	bl	8008574 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800629a:	488f      	ldr	r0, [pc, #572]	; (80064d8 <RadioSetRxConfig+0x318>)
 800629c:	f002 fa36 	bl	800870c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80062a0:	4a8e      	ldr	r2, [pc, #568]	; (80064dc <RadioSetRxConfig+0x31c>)
 80062a2:	f107 031c 	add.w	r3, r7, #28
 80062a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80062aa:	e883 0003 	stmia.w	r3, {r0, r1}
 80062ae:	f107 031c 	add.w	r3, r7, #28
 80062b2:	4618      	mov	r0, r3
 80062b4:	f001 fd69 	bl	8007d8a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80062b8:	f240 10ff 	movw	r0, #511	; 0x1ff
 80062bc:	f001 fdb4 	bl	8007e28 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 80062c0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80062c4:	f000 fe0b 	bl	8006ede <RadioRead>
 80062c8:	4603      	mov	r3, r0
 80062ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 80062ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062d2:	f023 0310 	bic.w	r3, r3, #16
 80062d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 80062da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062de:	4619      	mov	r1, r3
 80062e0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80062e4:	f000 fde9 	bl	8006eba <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 80062e8:	2104      	movs	r1, #4
 80062ea:	f640 00b9 	movw	r0, #2233	; 0x8b9
 80062ee:	f000 fde4 	bl	8006eba <RadioWrite>
            modReg= RadioRead(0x89b);
 80062f2:	f640 009b 	movw	r0, #2203	; 0x89b
 80062f6:	f000 fdf2 	bl	8006ede <RadioRead>
 80062fa:	4603      	mov	r3, r0
 80062fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8006300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006304:	f023 031c 	bic.w	r3, r3, #28
 8006308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 800630c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006310:	f043 0308 	orr.w	r3, r3, #8
 8006314:	b2db      	uxtb	r3, r3
 8006316:	4619      	mov	r1, r3
 8006318:	f640 009b 	movw	r0, #2203	; 0x89b
 800631c:	f000 fdcd 	bl	8006eba <RadioWrite>
            modReg= RadioRead(0x6d1);
 8006320:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8006324:	f000 fddb 	bl	8006ede <RadioRead>
 8006328:	4603      	mov	r3, r0
 800632a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800632e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006332:	f023 0318 	bic.w	r3, r3, #24
 8006336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 800633a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800633e:	f043 0318 	orr.w	r3, r3, #24
 8006342:	b2db      	uxtb	r3, r3
 8006344:	4619      	mov	r1, r3
 8006346:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800634a:	f000 fdb6 	bl	8006eba <RadioWrite>
            modReg= RadioRead(0x6ac);
 800634e:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8006352:	f000 fdc4 	bl	8006ede <RadioRead>
 8006356:	4603      	mov	r3, r0
 8006358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 800635c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 8006368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800636c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8006370:	b2db      	uxtb	r3, r3
 8006372:	4619      	mov	r1, r3
 8006374:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8006378:	f000 fd9f 	bl	8006eba <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800637c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800637e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006382:	fb02 f303 	mul.w	r3, r2, r3
 8006386:	461a      	mov	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	fbb2 f3f3 	udiv	r3, r2, r3
 800638e:	4a4f      	ldr	r2, [pc, #316]	; (80064cc <RadioSetRxConfig+0x30c>)
 8006390:	6093      	str	r3, [r2, #8]
            break;
 8006392:	e118      	b.n	80065c6 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8006394:	2000      	movs	r0, #0
 8006396:	f001 febf 	bl	8008118 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800639a:	4b4c      	ldr	r3, [pc, #304]	; (80064cc <RadioSetRxConfig+0x30c>)
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80063a2:	4a4a      	ldr	r2, [pc, #296]	; (80064cc <RadioSetRxConfig+0x30c>)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80063a8:	4b48      	ldr	r3, [pc, #288]	; (80064cc <RadioSetRxConfig+0x30c>)
 80063aa:	220b      	movs	r2, #11
 80063ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80063b0:	68b8      	ldr	r0, [r7, #8]
 80063b2:	f002 fcfd 	bl	8008db0 <SUBGRF_GetFskBandwidthRegValue>
 80063b6:	4603      	mov	r3, r0
 80063b8:	461a      	mov	r2, r3
 80063ba:	4b44      	ldr	r3, [pc, #272]	; (80064cc <RadioSetRxConfig+0x30c>)
 80063bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80063c0:	4b42      	ldr	r3, [pc, #264]	; (80064cc <RadioSetRxConfig+0x30c>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80063c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80063c8:	00db      	lsls	r3, r3, #3
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	4b3f      	ldr	r3, [pc, #252]	; (80064cc <RadioSetRxConfig+0x30c>)
 80063ce:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80063d0:	4b3e      	ldr	r3, [pc, #248]	; (80064cc <RadioSetRxConfig+0x30c>)
 80063d2:	2204      	movs	r2, #4
 80063d4:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80063d6:	4b3d      	ldr	r3, [pc, #244]	; (80064cc <RadioSetRxConfig+0x30c>)
 80063d8:	2218      	movs	r2, #24
 80063da:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80063dc:	4b3b      	ldr	r3, [pc, #236]	; (80064cc <RadioSetRxConfig+0x30c>)
 80063de:	2200      	movs	r2, #0
 80063e0:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80063e2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80063e6:	f083 0301 	eor.w	r3, r3, #1
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	461a      	mov	r2, r3
 80063ee:	4b37      	ldr	r3, [pc, #220]	; (80064cc <RadioSetRxConfig+0x30c>)
 80063f0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80063f2:	4b37      	ldr	r3, [pc, #220]	; (80064d0 <RadioSetRxConfig+0x310>)
 80063f4:	781a      	ldrb	r2, [r3, #0]
 80063f6:	4b35      	ldr	r3, [pc, #212]	; (80064cc <RadioSetRxConfig+0x30c>)
 80063f8:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 80063fa:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8006402:	4b32      	ldr	r3, [pc, #200]	; (80064cc <RadioSetRxConfig+0x30c>)
 8006404:	22f2      	movs	r2, #242	; 0xf2
 8006406:	75da      	strb	r2, [r3, #23]
 8006408:	e002      	b.n	8006410 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800640a:	4b30      	ldr	r3, [pc, #192]	; (80064cc <RadioSetRxConfig+0x30c>)
 800640c:	2201      	movs	r2, #1
 800640e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8006410:	4b2e      	ldr	r3, [pc, #184]	; (80064cc <RadioSetRxConfig+0x30c>)
 8006412:	2201      	movs	r2, #1
 8006414:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8006416:	f000 fc6a 	bl	8006cee <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800641a:	4b2c      	ldr	r3, [pc, #176]	; (80064cc <RadioSetRxConfig+0x30c>)
 800641c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006420:	2b00      	cmp	r3, #0
 8006422:	bf14      	ite	ne
 8006424:	2301      	movne	r3, #1
 8006426:	2300      	moveq	r3, #0
 8006428:	b2db      	uxtb	r3, r3
 800642a:	4618      	mov	r0, r3
 800642c:	f7ff fdfa 	bl	8006024 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006430:	4828      	ldr	r0, [pc, #160]	; (80064d4 <RadioSetRxConfig+0x314>)
 8006432:	f002 f89f 	bl	8008574 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006436:	4828      	ldr	r0, [pc, #160]	; (80064d8 <RadioSetRxConfig+0x318>)
 8006438:	f002 f968 	bl	800870c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800643c:	4a28      	ldr	r2, [pc, #160]	; (80064e0 <RadioSetRxConfig+0x320>)
 800643e:	f107 0314 	add.w	r3, r7, #20
 8006442:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006446:	e883 0003 	stmia.w	r3, {r0, r1}
 800644a:	f107 0314 	add.w	r3, r7, #20
 800644e:	4618      	mov	r0, r3
 8006450:	f001 fc9b 	bl	8007d8a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8006454:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006458:	f001 fce6 	bl	8007e28 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800645c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800645e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006462:	fb02 f303 	mul.w	r3, r2, r3
 8006466:	461a      	mov	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	fbb2 f3f3 	udiv	r3, r2, r3
 800646e:	4a17      	ldr	r2, [pc, #92]	; (80064cc <RadioSetRxConfig+0x30c>)
 8006470:	6093      	str	r3, [r2, #8]
            break;
 8006472:	e0a8      	b.n	80065c6 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8006474:	2000      	movs	r0, #0
 8006476:	f001 fe4f 	bl	8008118 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800647a:	4b14      	ldr	r3, [pc, #80]	; (80064cc <RadioSetRxConfig+0x30c>)
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	b2da      	uxtb	r2, r3
 8006486:	4b11      	ldr	r3, [pc, #68]	; (80064cc <RadioSetRxConfig+0x30c>)
 8006488:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800648c:	4a15      	ldr	r2, [pc, #84]	; (80064e4 <RadioSetRxConfig+0x324>)
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	4413      	add	r3, r2
 8006492:	781a      	ldrb	r2, [r3, #0]
 8006494:	4b0d      	ldr	r3, [pc, #52]	; (80064cc <RadioSetRxConfig+0x30c>)
 8006496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800649a:	4a0c      	ldr	r2, [pc, #48]	; (80064cc <RadioSetRxConfig+0x30c>)
 800649c:	7bbb      	ldrb	r3, [r7, #14]
 800649e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d105      	bne.n	80064b4 <RadioSetRxConfig+0x2f4>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b0b      	cmp	r3, #11
 80064ac:	d008      	beq.n	80064c0 <RadioSetRxConfig+0x300>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b0c      	cmp	r3, #12
 80064b2:	d005      	beq.n	80064c0 <RadioSetRxConfig+0x300>
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d116      	bne.n	80064e8 <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2b0c      	cmp	r3, #12
 80064be:	d113      	bne.n	80064e8 <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80064c0:	4b02      	ldr	r3, [pc, #8]	; (80064cc <RadioSetRxConfig+0x30c>)
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80064c8:	e012      	b.n	80064f0 <RadioSetRxConfig+0x330>
 80064ca:	bf00      	nop
 80064cc:	20000444 	.word	0x20000444
 80064d0:	2000000d 	.word	0x2000000d
 80064d4:	2000047c 	.word	0x2000047c
 80064d8:	20000452 	.word	0x20000452
 80064dc:	0800a0ac 	.word	0x0800a0ac
 80064e0:	0800a0b4 	.word	0x0800a0b4
 80064e4:	0800a248 	.word	0x0800a248
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80064e8:	4b39      	ldr	r3, [pc, #228]	; (80065d0 <RadioSetRxConfig+0x410>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80064f0:	4b37      	ldr	r3, [pc, #220]	; (80065d0 <RadioSetRxConfig+0x410>)
 80064f2:	2201      	movs	r2, #1
 80064f4:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80064f6:	4b36      	ldr	r3, [pc, #216]	; (80065d0 <RadioSetRxConfig+0x410>)
 80064f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064fc:	2b05      	cmp	r3, #5
 80064fe:	d004      	beq.n	800650a <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8006500:	4b33      	ldr	r3, [pc, #204]	; (80065d0 <RadioSetRxConfig+0x410>)
 8006502:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006506:	2b06      	cmp	r3, #6
 8006508:	d10a      	bne.n	8006520 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 800650a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800650c:	2b0b      	cmp	r3, #11
 800650e:	d803      	bhi.n	8006518 <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8006510:	4b2f      	ldr	r3, [pc, #188]	; (80065d0 <RadioSetRxConfig+0x410>)
 8006512:	220c      	movs	r2, #12
 8006514:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8006516:	e006      	b.n	8006526 <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8006518:	4a2d      	ldr	r2, [pc, #180]	; (80065d0 <RadioSetRxConfig+0x410>)
 800651a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800651c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800651e:	e002      	b.n	8006526 <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8006520:	4a2b      	ldr	r2, [pc, #172]	; (80065d0 <RadioSetRxConfig+0x410>)
 8006522:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006524:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8006526:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800652a:	4b29      	ldr	r3, [pc, #164]	; (80065d0 <RadioSetRxConfig+0x410>)
 800652c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800652e:	4b29      	ldr	r3, [pc, #164]	; (80065d4 <RadioSetRxConfig+0x414>)
 8006530:	781a      	ldrb	r2, [r3, #0]
 8006532:	4b27      	ldr	r3, [pc, #156]	; (80065d0 <RadioSetRxConfig+0x410>)
 8006534:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8006536:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800653a:	4b25      	ldr	r3, [pc, #148]	; (80065d0 <RadioSetRxConfig+0x410>)
 800653c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8006540:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8006544:	4b22      	ldr	r3, [pc, #136]	; (80065d0 <RadioSetRxConfig+0x410>)
 8006546:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800654a:	f000 fbd0 	bl	8006cee <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800654e:	4b20      	ldr	r3, [pc, #128]	; (80065d0 <RadioSetRxConfig+0x410>)
 8006550:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006554:	2b00      	cmp	r3, #0
 8006556:	bf14      	ite	ne
 8006558:	2301      	movne	r3, #1
 800655a:	2300      	moveq	r3, #0
 800655c:	b2db      	uxtb	r3, r3
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff fd60 	bl	8006024 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006564:	481c      	ldr	r0, [pc, #112]	; (80065d8 <RadioSetRxConfig+0x418>)
 8006566:	f002 f805 	bl	8008574 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800656a:	481c      	ldr	r0, [pc, #112]	; (80065dc <RadioSetRxConfig+0x41c>)
 800656c:	f002 f8ce 	bl	800870c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8006570:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006572:	b2db      	uxtb	r3, r3
 8006574:	4618      	mov	r0, r3
 8006576:	f001 fdde 	bl	8008136 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800657a:	4b15      	ldr	r3, [pc, #84]	; (80065d0 <RadioSetRxConfig+0x410>)
 800657c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006580:	2b01      	cmp	r3, #1
 8006582:	d10d      	bne.n	80065a0 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 8006584:	f240 7036 	movw	r0, #1846	; 0x736
 8006588:	f002 fa1c 	bl	80089c4 <SUBGRF_ReadRegister>
 800658c:	4603      	mov	r3, r0
 800658e:	f023 0304 	bic.w	r3, r3, #4
 8006592:	b2db      	uxtb	r3, r3
 8006594:	4619      	mov	r1, r3
 8006596:	f240 7036 	movw	r0, #1846	; 0x736
 800659a:	f002 f9ff 	bl	800899c <SUBGRF_WriteRegister>
 800659e:	e00c      	b.n	80065ba <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 80065a0:	f240 7036 	movw	r0, #1846	; 0x736
 80065a4:	f002 fa0e 	bl	80089c4 <SUBGRF_ReadRegister>
 80065a8:	4603      	mov	r3, r0
 80065aa:	f043 0304 	orr.w	r3, r3, #4
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	4619      	mov	r1, r3
 80065b2:	f240 7036 	movw	r0, #1846	; 0x736
 80065b6:	f002 f9f1 	bl	800899c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80065ba:	4b05      	ldr	r3, [pc, #20]	; (80065d0 <RadioSetRxConfig+0x410>)
 80065bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80065c0:	609a      	str	r2, [r3, #8]
            break;
 80065c2:	e000      	b.n	80065c6 <RadioSetRxConfig+0x406>
            break;
 80065c4:	bf00      	nop
    }
}
 80065c6:	bf00      	nop
 80065c8:	3728      	adds	r7, #40	; 0x28
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	20000444 	.word	0x20000444
 80065d4:	2000000d 	.word	0x2000000d
 80065d8:	2000047c 	.word	0x2000047c
 80065dc:	20000452 	.word	0x20000452

080065e0 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60ba      	str	r2, [r7, #8]
 80065e8:	607b      	str	r3, [r7, #4]
 80065ea:	4603      	mov	r3, r0
 80065ec:	73fb      	strb	r3, [r7, #15]
 80065ee:	460b      	mov	r3, r1
 80065f0:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80065f2:	f002 fcac 	bl	8008f4e <RFW_DeInit>
    switch( modem )
 80065f6:	7bfb      	ldrb	r3, [r7, #15]
 80065f8:	2b03      	cmp	r3, #3
 80065fa:	f000 80d7 	beq.w	80067ac <RadioSetTxConfig+0x1cc>
 80065fe:	2b03      	cmp	r3, #3
 8006600:	f300 80e6 	bgt.w	80067d0 <RadioSetTxConfig+0x1f0>
 8006604:	2b00      	cmp	r3, #0
 8006606:	d002      	beq.n	800660e <RadioSetTxConfig+0x2e>
 8006608:	2b01      	cmp	r3, #1
 800660a:	d061      	beq.n	80066d0 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 800660c:	e0e0      	b.n	80067d0 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800660e:	4b7c      	ldr	r3, [pc, #496]	; (8006800 <RadioSetTxConfig+0x220>)
 8006610:	2200      	movs	r2, #0
 8006612:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006616:	4a7a      	ldr	r2, [pc, #488]	; (8006800 <RadioSetTxConfig+0x220>)
 8006618:	6a3b      	ldr	r3, [r7, #32]
 800661a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800661c:	4b78      	ldr	r3, [pc, #480]	; (8006800 <RadioSetTxConfig+0x220>)
 800661e:	220b      	movs	r2, #11
 8006620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f002 fbc3 	bl	8008db0 <SUBGRF_GetFskBandwidthRegValue>
 800662a:	4603      	mov	r3, r0
 800662c:	461a      	mov	r2, r3
 800662e:	4b74      	ldr	r3, [pc, #464]	; (8006800 <RadioSetTxConfig+0x220>)
 8006630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8006634:	4a72      	ldr	r2, [pc, #456]	; (8006800 <RadioSetTxConfig+0x220>)
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800663a:	4b71      	ldr	r3, [pc, #452]	; (8006800 <RadioSetTxConfig+0x220>)
 800663c:	2200      	movs	r2, #0
 800663e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006640:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006642:	00db      	lsls	r3, r3, #3
 8006644:	b29a      	uxth	r2, r3
 8006646:	4b6e      	ldr	r3, [pc, #440]	; (8006800 <RadioSetTxConfig+0x220>)
 8006648:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800664a:	4b6d      	ldr	r3, [pc, #436]	; (8006800 <RadioSetTxConfig+0x220>)
 800664c:	2204      	movs	r2, #4
 800664e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8006650:	4b6b      	ldr	r3, [pc, #428]	; (8006800 <RadioSetTxConfig+0x220>)
 8006652:	2218      	movs	r2, #24
 8006654:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8006656:	4b6a      	ldr	r3, [pc, #424]	; (8006800 <RadioSetTxConfig+0x220>)
 8006658:	2200      	movs	r2, #0
 800665a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800665c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006660:	f083 0301 	eor.w	r3, r3, #1
 8006664:	b2db      	uxtb	r3, r3
 8006666:	461a      	mov	r2, r3
 8006668:	4b65      	ldr	r3, [pc, #404]	; (8006800 <RadioSetTxConfig+0x220>)
 800666a:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 800666c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006670:	2b00      	cmp	r3, #0
 8006672:	d003      	beq.n	800667c <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8006674:	4b62      	ldr	r3, [pc, #392]	; (8006800 <RadioSetTxConfig+0x220>)
 8006676:	22f2      	movs	r2, #242	; 0xf2
 8006678:	75da      	strb	r2, [r3, #23]
 800667a:	e002      	b.n	8006682 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800667c:	4b60      	ldr	r3, [pc, #384]	; (8006800 <RadioSetTxConfig+0x220>)
 800667e:	2201      	movs	r2, #1
 8006680:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8006682:	4b5f      	ldr	r3, [pc, #380]	; (8006800 <RadioSetTxConfig+0x220>)
 8006684:	2201      	movs	r2, #1
 8006686:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8006688:	f000 fb31 	bl	8006cee <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800668c:	4b5c      	ldr	r3, [pc, #368]	; (8006800 <RadioSetTxConfig+0x220>)
 800668e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006692:	2b00      	cmp	r3, #0
 8006694:	bf14      	ite	ne
 8006696:	2301      	movne	r3, #1
 8006698:	2300      	moveq	r3, #0
 800669a:	b2db      	uxtb	r3, r3
 800669c:	4618      	mov	r0, r3
 800669e:	f7ff fcc1 	bl	8006024 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80066a2:	4858      	ldr	r0, [pc, #352]	; (8006804 <RadioSetTxConfig+0x224>)
 80066a4:	f001 ff66 	bl	8008574 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80066a8:	4857      	ldr	r0, [pc, #348]	; (8006808 <RadioSetTxConfig+0x228>)
 80066aa:	f002 f82f 	bl	800870c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80066ae:	4a57      	ldr	r2, [pc, #348]	; (800680c <RadioSetTxConfig+0x22c>)
 80066b0:	f107 0310 	add.w	r3, r7, #16
 80066b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80066b8:	e883 0003 	stmia.w	r3, {r0, r1}
 80066bc:	f107 0310 	add.w	r3, r7, #16
 80066c0:	4618      	mov	r0, r3
 80066c2:	f001 fb62 	bl	8007d8a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80066c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80066ca:	f001 fbad 	bl	8007e28 <SUBGRF_SetWhiteningSeed>
            break;
 80066ce:	e080      	b.n	80067d2 <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80066d0:	4b4b      	ldr	r3, [pc, #300]	; (8006800 <RadioSetTxConfig+0x220>)
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	b2da      	uxtb	r2, r3
 80066dc:	4b48      	ldr	r3, [pc, #288]	; (8006800 <RadioSetTxConfig+0x220>)
 80066de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80066e2:	4a4b      	ldr	r2, [pc, #300]	; (8006810 <RadioSetTxConfig+0x230>)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4413      	add	r3, r2
 80066e8:	781a      	ldrb	r2, [r3, #0]
 80066ea:	4b45      	ldr	r3, [pc, #276]	; (8006800 <RadioSetTxConfig+0x220>)
 80066ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80066f0:	4a43      	ldr	r2, [pc, #268]	; (8006800 <RadioSetTxConfig+0x220>)
 80066f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80066f6:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d105      	bne.n	800670c <RadioSetTxConfig+0x12c>
 8006700:	6a3b      	ldr	r3, [r7, #32]
 8006702:	2b0b      	cmp	r3, #11
 8006704:	d008      	beq.n	8006718 <RadioSetTxConfig+0x138>
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	2b0c      	cmp	r3, #12
 800670a:	d005      	beq.n	8006718 <RadioSetTxConfig+0x138>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d107      	bne.n	8006722 <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8006712:	6a3b      	ldr	r3, [r7, #32]
 8006714:	2b0c      	cmp	r3, #12
 8006716:	d104      	bne.n	8006722 <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8006718:	4b39      	ldr	r3, [pc, #228]	; (8006800 <RadioSetTxConfig+0x220>)
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8006720:	e003      	b.n	800672a <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8006722:	4b37      	ldr	r3, [pc, #220]	; (8006800 <RadioSetTxConfig+0x220>)
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800672a:	4b35      	ldr	r3, [pc, #212]	; (8006800 <RadioSetTxConfig+0x220>)
 800672c:	2201      	movs	r2, #1
 800672e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006730:	4b33      	ldr	r3, [pc, #204]	; (8006800 <RadioSetTxConfig+0x220>)
 8006732:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006736:	2b05      	cmp	r3, #5
 8006738:	d004      	beq.n	8006744 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800673a:	4b31      	ldr	r3, [pc, #196]	; (8006800 <RadioSetTxConfig+0x220>)
 800673c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006740:	2b06      	cmp	r3, #6
 8006742:	d10a      	bne.n	800675a <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 8006744:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006746:	2b0b      	cmp	r3, #11
 8006748:	d803      	bhi.n	8006752 <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800674a:	4b2d      	ldr	r3, [pc, #180]	; (8006800 <RadioSetTxConfig+0x220>)
 800674c:	220c      	movs	r2, #12
 800674e:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8006750:	e006      	b.n	8006760 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8006752:	4a2b      	ldr	r2, [pc, #172]	; (8006800 <RadioSetTxConfig+0x220>)
 8006754:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006756:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8006758:	e002      	b.n	8006760 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800675a:	4a29      	ldr	r2, [pc, #164]	; (8006800 <RadioSetTxConfig+0x220>)
 800675c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800675e:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8006760:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8006764:	4b26      	ldr	r3, [pc, #152]	; (8006800 <RadioSetTxConfig+0x220>)
 8006766:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8006768:	4b2a      	ldr	r3, [pc, #168]	; (8006814 <RadioSetTxConfig+0x234>)
 800676a:	781a      	ldrb	r2, [r3, #0]
 800676c:	4b24      	ldr	r3, [pc, #144]	; (8006800 <RadioSetTxConfig+0x220>)
 800676e:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8006770:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8006774:	4b22      	ldr	r3, [pc, #136]	; (8006800 <RadioSetTxConfig+0x220>)
 8006776:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800677a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800677e:	4b20      	ldr	r3, [pc, #128]	; (8006800 <RadioSetTxConfig+0x220>)
 8006780:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8006784:	f000 fab3 	bl	8006cee <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8006788:	4b1d      	ldr	r3, [pc, #116]	; (8006800 <RadioSetTxConfig+0x220>)
 800678a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800678e:	2b00      	cmp	r3, #0
 8006790:	bf14      	ite	ne
 8006792:	2301      	movne	r3, #1
 8006794:	2300      	moveq	r3, #0
 8006796:	b2db      	uxtb	r3, r3
 8006798:	4618      	mov	r0, r3
 800679a:	f7ff fc43 	bl	8006024 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800679e:	4819      	ldr	r0, [pc, #100]	; (8006804 <RadioSetTxConfig+0x224>)
 80067a0:	f001 fee8 	bl	8008574 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80067a4:	4818      	ldr	r0, [pc, #96]	; (8006808 <RadioSetTxConfig+0x228>)
 80067a6:	f001 ffb1 	bl	800870c <SUBGRF_SetPacketParams>
            break;
 80067aa:	e012      	b.n	80067d2 <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80067ac:	2003      	movs	r0, #3
 80067ae:	f7ff fc39 	bl	8006024 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80067b2:	4b13      	ldr	r3, [pc, #76]	; (8006800 <RadioSetTxConfig+0x220>)
 80067b4:	2202      	movs	r2, #2
 80067b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80067ba:	4a11      	ldr	r2, [pc, #68]	; (8006800 <RadioSetTxConfig+0x220>)
 80067bc:	6a3b      	ldr	r3, [r7, #32]
 80067be:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80067c0:	4b0f      	ldr	r3, [pc, #60]	; (8006800 <RadioSetTxConfig+0x220>)
 80067c2:	2216      	movs	r2, #22
 80067c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80067c8:	480e      	ldr	r0, [pc, #56]	; (8006804 <RadioSetTxConfig+0x224>)
 80067ca:	f001 fed3 	bl	8008574 <SUBGRF_SetModulationParams>
            break;
 80067ce:	e000      	b.n	80067d2 <RadioSetTxConfig+0x1f2>
            break;
 80067d0:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80067d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f002 f9fc 	bl	8008bd4 <SUBGRF_SetRfTxPower>
 80067dc:	4603      	mov	r3, r0
 80067de:	461a      	mov	r2, r3
 80067e0:	4b07      	ldr	r3, [pc, #28]	; (8006800 <RadioSetTxConfig+0x220>)
 80067e2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 80067e6:	4b06      	ldr	r3, [pc, #24]	; (8006800 <RadioSetTxConfig+0x220>)
 80067e8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80067ec:	4618      	mov	r0, r3
 80067ee:	f002 fbc2 	bl	8008f76 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80067f2:	4a03      	ldr	r2, [pc, #12]	; (8006800 <RadioSetTxConfig+0x220>)
 80067f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067f6:	6053      	str	r3, [r2, #4]
}
 80067f8:	bf00      	nop
 80067fa:	3718      	adds	r7, #24
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	20000444 	.word	0x20000444
 8006804:	2000047c 	.word	0x2000047c
 8006808:	20000452 	.word	0x20000452
 800680c:	0800a0b4 	.word	0x0800a0b4
 8006810:	0800a248 	.word	0x0800a248
 8006814:	2000000d 	.word	0x2000000d

08006818 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
    return true;
 8006820:	2301      	movs	r3, #1
}
 8006822:	4618      	mov	r0, r3
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	bc80      	pop	{r7}
 800682a:	4770      	bx	lr

0800682c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	4603      	mov	r3, r0
 8006834:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8006836:	2300      	movs	r3, #0
 8006838:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800683a:	79fb      	ldrb	r3, [r7, #7]
 800683c:	2b0a      	cmp	r3, #10
 800683e:	d83e      	bhi.n	80068be <RadioGetLoRaBandwidthInHz+0x92>
 8006840:	a201      	add	r2, pc, #4	; (adr r2, 8006848 <RadioGetLoRaBandwidthInHz+0x1c>)
 8006842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006846:	bf00      	nop
 8006848:	08006875 	.word	0x08006875
 800684c:	08006885 	.word	0x08006885
 8006850:	08006895 	.word	0x08006895
 8006854:	080068a5 	.word	0x080068a5
 8006858:	080068ad 	.word	0x080068ad
 800685c:	080068b3 	.word	0x080068b3
 8006860:	080068b9 	.word	0x080068b9
 8006864:	080068bf 	.word	0x080068bf
 8006868:	0800687d 	.word	0x0800687d
 800686c:	0800688d 	.word	0x0800688d
 8006870:	0800689d 	.word	0x0800689d
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8006874:	f641 6384 	movw	r3, #7812	; 0x1e84
 8006878:	60fb      	str	r3, [r7, #12]
        break;
 800687a:	e020      	b.n	80068be <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800687c:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8006880:	60fb      	str	r3, [r7, #12]
        break;
 8006882:	e01c      	b.n	80068be <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8006884:	f643 5309 	movw	r3, #15625	; 0x3d09
 8006888:	60fb      	str	r3, [r7, #12]
        break;
 800688a:	e018      	b.n	80068be <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800688c:	f245 1361 	movw	r3, #20833	; 0x5161
 8006890:	60fb      	str	r3, [r7, #12]
        break;
 8006892:	e014      	b.n	80068be <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8006894:	f647 2312 	movw	r3, #31250	; 0x7a12
 8006898:	60fb      	str	r3, [r7, #12]
        break;
 800689a:	e010      	b.n	80068be <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800689c:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 80068a0:	60fb      	str	r3, [r7, #12]
        break;
 80068a2:	e00c      	b.n	80068be <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80068a4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80068a8:	60fb      	str	r3, [r7, #12]
        break;
 80068aa:	e008      	b.n	80068be <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80068ac:	4b07      	ldr	r3, [pc, #28]	; (80068cc <RadioGetLoRaBandwidthInHz+0xa0>)
 80068ae:	60fb      	str	r3, [r7, #12]
        break;
 80068b0:	e005      	b.n	80068be <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80068b2:	4b07      	ldr	r3, [pc, #28]	; (80068d0 <RadioGetLoRaBandwidthInHz+0xa4>)
 80068b4:	60fb      	str	r3, [r7, #12]
        break;
 80068b6:	e002      	b.n	80068be <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80068b8:	4b06      	ldr	r3, [pc, #24]	; (80068d4 <RadioGetLoRaBandwidthInHz+0xa8>)
 80068ba:	60fb      	str	r3, [r7, #12]
        break;
 80068bc:	bf00      	nop
    }

    return bandwidthInHz;
 80068be:	68fb      	ldr	r3, [r7, #12]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3714      	adds	r7, #20
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bc80      	pop	{r7}
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	0001e848 	.word	0x0001e848
 80068d0:	0003d090 	.word	0x0003d090
 80068d4:	0007a120 	.word	0x0007a120

080068d8 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	4608      	mov	r0, r1
 80068e2:	4611      	mov	r1, r2
 80068e4:	461a      	mov	r2, r3
 80068e6:	4603      	mov	r3, r0
 80068e8:	70fb      	strb	r3, [r7, #3]
 80068ea:	460b      	mov	r3, r1
 80068ec:	803b      	strh	r3, [r7, #0]
 80068ee:	4613      	mov	r3, r2
 80068f0:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 80068f2:	883b      	ldrh	r3, [r7, #0]
 80068f4:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80068f6:	78ba      	ldrb	r2, [r7, #2]
 80068f8:	f082 0201 	eor.w	r2, r2, #1
 80068fc:	b2d2      	uxtb	r2, r2
 80068fe:	2a00      	cmp	r2, #0
 8006900:	d001      	beq.n	8006906 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8006902:	2208      	movs	r2, #8
 8006904:	e000      	b.n	8006908 <RadioGetGfskTimeOnAirNumerator+0x30>
 8006906:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8006908:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800690a:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800690e:	7c3b      	ldrb	r3, [r7, #16]
 8006910:	7d39      	ldrb	r1, [r7, #20]
 8006912:	2900      	cmp	r1, #0
 8006914:	d001      	beq.n	800691a <RadioGetGfskTimeOnAirNumerator+0x42>
 8006916:	2102      	movs	r1, #2
 8006918:	e000      	b.n	800691c <RadioGetGfskTimeOnAirNumerator+0x44>
 800691a:	2100      	movs	r1, #0
 800691c:	440b      	add	r3, r1
 800691e:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8006920:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8006922:	4618      	mov	r0, r3
 8006924:	370c      	adds	r7, #12
 8006926:	46bd      	mov	sp, r7
 8006928:	bc80      	pop	{r7}
 800692a:	4770      	bx	lr

0800692c <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800692c:	b480      	push	{r7}
 800692e:	b08b      	sub	sp, #44	; 0x2c
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	4611      	mov	r1, r2
 8006938:	461a      	mov	r2, r3
 800693a:	460b      	mov	r3, r1
 800693c:	71fb      	strb	r3, [r7, #7]
 800693e:	4613      	mov	r3, r2
 8006940:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8006942:	79fb      	ldrb	r3, [r7, #7]
 8006944:	3304      	adds	r3, #4
 8006946:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8006948:	2300      	movs	r3, #0
 800694a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	2b05      	cmp	r3, #5
 8006952:	d002      	beq.n	800695a <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	2b06      	cmp	r3, #6
 8006958:	d104      	bne.n	8006964 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 800695a:	88bb      	ldrh	r3, [r7, #4]
 800695c:	2b0b      	cmp	r3, #11
 800695e:	d801      	bhi.n	8006964 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8006960:	230c      	movs	r3, #12
 8006962:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d105      	bne.n	8006976 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	2b0b      	cmp	r3, #11
 800696e:	d008      	beq.n	8006982 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	2b0c      	cmp	r3, #12
 8006974:	d005      	beq.n	8006982 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d105      	bne.n	8006988 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	2b0c      	cmp	r3, #12
 8006980:	d102      	bne.n	8006988 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8006982:	2301      	movs	r3, #1
 8006984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8006988:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800698c:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 800698e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006992:	2a00      	cmp	r2, #0
 8006994:	d001      	beq.n	800699a <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8006996:	2210      	movs	r2, #16
 8006998:	e000      	b.n	800699c <RadioGetLoRaTimeOnAirNumerator+0x70>
 800699a:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800699c:	4413      	add	r3, r2
 800699e:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 80069a4:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 80069a6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80069aa:	2a00      	cmp	r2, #0
 80069ac:	d001      	beq.n	80069b2 <RadioGetLoRaTimeOnAirNumerator+0x86>
 80069ae:	2200      	movs	r2, #0
 80069b0:	e000      	b.n	80069b4 <RadioGetLoRaTimeOnAirNumerator+0x88>
 80069b2:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80069b4:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80069b6:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	2b06      	cmp	r3, #6
 80069bc:	d803      	bhi.n	80069c6 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	623b      	str	r3, [r7, #32]
 80069c4:	e00e      	b.n	80069e4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	3308      	adds	r3, #8
 80069ca:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80069cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d004      	beq.n	80069de <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	3b02      	subs	r3, #2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	623b      	str	r3, [r7, #32]
 80069dc:	e002      	b.n	80069e4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	da01      	bge.n	80069ee <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80069ea:	2300      	movs	r3, #0
 80069ec:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80069ee:	69fa      	ldr	r2, [r7, #28]
 80069f0:	6a3b      	ldr	r3, [r7, #32]
 80069f2:	4413      	add	r3, r2
 80069f4:	1e5a      	subs	r2, r3, #1
 80069f6:	6a3b      	ldr	r3, [r7, #32]
 80069f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	fb02 f203 	mul.w	r2, r2, r3
 8006a02:	88bb      	ldrh	r3, [r7, #4]
 8006a04:	4413      	add	r3, r2
    int32_t intermediate =
 8006a06:	330c      	adds	r3, #12
 8006a08:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2b06      	cmp	r3, #6
 8006a0e:	d802      	bhi.n	8006a16 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	3302      	adds	r3, #2
 8006a14:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	1c5a      	adds	r2, r3, #1
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	3b02      	subs	r3, #2
 8006a20:	fa02 f303 	lsl.w	r3, r2, r3
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	372c      	adds	r7, #44	; 0x2c
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bc80      	pop	{r7}
 8006a2c:	4770      	bx	lr
	...

08006a30 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b08a      	sub	sp, #40	; 0x28
 8006a34:	af04      	add	r7, sp, #16
 8006a36:	60b9      	str	r1, [r7, #8]
 8006a38:	607a      	str	r2, [r7, #4]
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	73fb      	strb	r3, [r7, #15]
 8006a40:	4613      	mov	r3, r2
 8006a42:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8006a44:	2300      	movs	r3, #0
 8006a46:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	613b      	str	r3, [r7, #16]

    switch( modem )
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d002      	beq.n	8006a58 <RadioTimeOnAir+0x28>
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d017      	beq.n	8006a86 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8006a56:	e035      	b.n	8006ac4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8006a58:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8006a5c:	8c3a      	ldrh	r2, [r7, #32]
 8006a5e:	7bb9      	ldrb	r1, [r7, #14]
 8006a60:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a64:	9301      	str	r3, [sp, #4]
 8006a66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f7ff ff32 	bl	80068d8 <RadioGetGfskTimeOnAirNumerator>
 8006a74:	4603      	mov	r3, r0
 8006a76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a7a:	fb02 f303 	mul.w	r3, r2, r3
 8006a7e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	613b      	str	r3, [r7, #16]
        break;
 8006a84:	e01e      	b.n	8006ac4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8006a86:	8c39      	ldrh	r1, [r7, #32]
 8006a88:	7bba      	ldrb	r2, [r7, #14]
 8006a8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a8e:	9302      	str	r3, [sp, #8]
 8006a90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a94:	9301      	str	r3, [sp, #4]
 8006a96:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	6879      	ldr	r1, [r7, #4]
 8006aa0:	68b8      	ldr	r0, [r7, #8]
 8006aa2:	f7ff ff43 	bl	800692c <RadioGetLoRaTimeOnAirNumerator>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006aac:	fb02 f303 	mul.w	r3, r2, r3
 8006ab0:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8006ab2:	4a0a      	ldr	r2, [pc, #40]	; (8006adc <RadioTimeOnAir+0xac>)
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7ff feb6 	bl	800682c <RadioGetLoRaBandwidthInHz>
 8006ac0:	6138      	str	r0, [r7, #16]
        break;
 8006ac2:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	4413      	add	r3, r2
 8006aca:	1e5a      	subs	r2, r3, #1
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3718      	adds	r7, #24
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	0800a248 	.word	0x0800a248

08006ae0 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	460b      	mov	r3, r1
 8006aea:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8006aec:	2300      	movs	r3, #0
 8006aee:	2200      	movs	r2, #0
 8006af0:	f240 2101 	movw	r1, #513	; 0x201
 8006af4:	f240 2001 	movw	r0, #513	; 0x201
 8006af8:	f001 fc12 	bl	8008320 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 8006afc:	4b6e      	ldr	r3, [pc, #440]	; (8006cb8 <RadioSend+0x1d8>)
 8006afe:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006b02:	2101      	movs	r1, #1
 8006b04:	4618      	mov	r0, r3
 8006b06:	f002 f83d 	bl	8008b84 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 8006b0a:	4b6b      	ldr	r3, [pc, #428]	; (8006cb8 <RadioSend+0x1d8>)
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d112      	bne.n	8006b38 <RadioSend+0x58>
 8006b12:	4b69      	ldr	r3, [pc, #420]	; (8006cb8 <RadioSend+0x1d8>)
 8006b14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b18:	2b06      	cmp	r3, #6
 8006b1a:	d10d      	bne.n	8006b38 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8006b1c:	f640 0089 	movw	r0, #2185	; 0x889
 8006b20:	f001 ff50 	bl	80089c4 <SUBGRF_ReadRegister>
 8006b24:	4603      	mov	r3, r0
 8006b26:	f023 0304 	bic.w	r3, r3, #4
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	f640 0089 	movw	r0, #2185	; 0x889
 8006b32:	f001 ff33 	bl	800899c <SUBGRF_WriteRegister>
 8006b36:	e00c      	b.n	8006b52 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8006b38:	f640 0089 	movw	r0, #2185	; 0x889
 8006b3c:	f001 ff42 	bl	80089c4 <SUBGRF_ReadRegister>
 8006b40:	4603      	mov	r3, r0
 8006b42:	f043 0304 	orr.w	r3, r3, #4
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	4619      	mov	r1, r3
 8006b4a:	f640 0089 	movw	r0, #2185	; 0x889
 8006b4e:	f001 ff25 	bl	800899c <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 8006b52:	4b59      	ldr	r3, [pc, #356]	; (8006cb8 <RadioSend+0x1d8>)
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	f200 809f 	bhi.w	8006c9a <RadioSend+0x1ba>
 8006b5c:	a201      	add	r2, pc, #4	; (adr r2, 8006b64 <RadioSend+0x84>)
 8006b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b62:	bf00      	nop
 8006b64:	08006b8f 	.word	0x08006b8f
 8006b68:	08006b75 	.word	0x08006b75
 8006b6c:	08006be3 	.word	0x08006be3
 8006b70:	08006c03 	.word	0x08006c03
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8006b74:	4a50      	ldr	r2, [pc, #320]	; (8006cb8 <RadioSend+0x1d8>)
 8006b76:	78fb      	ldrb	r3, [r7, #3]
 8006b78:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006b7a:	4850      	ldr	r0, [pc, #320]	; (8006cbc <RadioSend+0x1dc>)
 8006b7c:	f001 fdc6 	bl	800870c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8006b80:	78fb      	ldrb	r3, [r7, #3]
 8006b82:	2200      	movs	r2, #0
 8006b84:	4619      	mov	r1, r3
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f001 f8ec 	bl	8007d64 <SUBGRF_SendPayload>
            break;
 8006b8c:	e086      	b.n	8006c9c <RadioSend+0x1bc>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8006b8e:	f002 f9e4 	bl	8008f5a <RFW_Is_Init>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d117      	bne.n	8006bc8 <RadioSend+0xe8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8006b98:	f107 020d 	add.w	r2, r7, #13
 8006b9c:	78fb      	ldrb	r3, [r7, #3]
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f002 f9f2 	bl	8008f8a <RFW_TransmitInit>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f040 8081 	bne.w	8006cb0 <RadioSend+0x1d0>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8006bae:	7b7a      	ldrb	r2, [r7, #13]
 8006bb0:	4b41      	ldr	r3, [pc, #260]	; (8006cb8 <RadioSend+0x1d8>)
 8006bb2:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006bb4:	4841      	ldr	r0, [pc, #260]	; (8006cbc <RadioSend+0x1dc>)
 8006bb6:	f001 fda9 	bl	800870c <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8006bba:	7b7b      	ldrb	r3, [r7, #13]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f001 f8cf 	bl	8007d64 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8006bc6:	e069      	b.n	8006c9c <RadioSend+0x1bc>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8006bc8:	4a3b      	ldr	r2, [pc, #236]	; (8006cb8 <RadioSend+0x1d8>)
 8006bca:	78fb      	ldrb	r3, [r7, #3]
 8006bcc:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006bce:	483b      	ldr	r0, [pc, #236]	; (8006cbc <RadioSend+0x1dc>)
 8006bd0:	f001 fd9c 	bl	800870c <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8006bd4:	78fb      	ldrb	r3, [r7, #3]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	4619      	mov	r1, r3
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f001 f8c2 	bl	8007d64 <SUBGRF_SendPayload>
            break;
 8006be0:	e05c      	b.n	8006c9c <RadioSend+0x1bc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8006be2:	4b35      	ldr	r3, [pc, #212]	; (8006cb8 <RadioSend+0x1d8>)
 8006be4:	2202      	movs	r2, #2
 8006be6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8006be8:	4a33      	ldr	r2, [pc, #204]	; (8006cb8 <RadioSend+0x1d8>)
 8006bea:	78fb      	ldrb	r3, [r7, #3]
 8006bec:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006bee:	4833      	ldr	r0, [pc, #204]	; (8006cbc <RadioSend+0x1dc>)
 8006bf0:	f001 fd8c 	bl	800870c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8006bf4:	78fb      	ldrb	r3, [r7, #3]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f001 f8b2 	bl	8007d64 <SUBGRF_SendPayload>
            break;
 8006c00:	e04c      	b.n	8006c9c <RadioSend+0x1bc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8006c02:	78fb      	ldrb	r3, [r7, #3]
 8006c04:	461a      	mov	r2, r3
 8006c06:	6879      	ldr	r1, [r7, #4]
 8006c08:	482d      	ldr	r0, [pc, #180]	; (8006cc0 <RadioSend+0x1e0>)
 8006c0a:	f000 fc30 	bl	800746e <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8006c0e:	4b2a      	ldr	r3, [pc, #168]	; (8006cb8 <RadioSend+0x1d8>)
 8006c10:	2202      	movs	r2, #2
 8006c12:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8006c14:	78fb      	ldrb	r3, [r7, #3]
 8006c16:	3301      	adds	r3, #1
 8006c18:	b2da      	uxtb	r2, r3
 8006c1a:	4b27      	ldr	r3, [pc, #156]	; (8006cb8 <RadioSend+0x1d8>)
 8006c1c:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006c1e:	4827      	ldr	r0, [pc, #156]	; (8006cbc <RadioSend+0x1dc>)
 8006c20:	f001 fd74 	bl	800870c <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 8006c24:	2100      	movs	r1, #0
 8006c26:	20f1      	movs	r0, #241	; 0xf1
 8006c28:	f000 f947 	bl	8006eba <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	20f0      	movs	r0, #240	; 0xf0
 8006c30:	f000 f943 	bl	8006eba <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8006c34:	4b20      	ldr	r3, [pc, #128]	; (8006cb8 <RadioSend+0x1d8>)
 8006c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c38:	2b64      	cmp	r3, #100	; 0x64
 8006c3a:	d108      	bne.n	8006c4e <RadioSend+0x16e>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 8006c3c:	2170      	movs	r1, #112	; 0x70
 8006c3e:	20f3      	movs	r0, #243	; 0xf3
 8006c40:	f000 f93b 	bl	8006eba <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 8006c44:	211d      	movs	r1, #29
 8006c46:	20f2      	movs	r0, #242	; 0xf2
 8006c48:	f000 f937 	bl	8006eba <RadioWrite>
 8006c4c:	e007      	b.n	8006c5e <RadioSend+0x17e>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 8006c4e:	21e1      	movs	r1, #225	; 0xe1
 8006c50:	20f3      	movs	r0, #243	; 0xf3
 8006c52:	f000 f932 	bl	8006eba <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 8006c56:	2104      	movs	r1, #4
 8006c58:	20f2      	movs	r0, #242	; 0xf2
 8006c5a:	f000 f92e 	bl	8006eba <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8006c5e:	78fb      	ldrb	r3, [r7, #3]
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	00db      	lsls	r3, r3, #3
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	3302      	adds	r3, #2
 8006c68:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8006c6a:	89fb      	ldrh	r3, [r7, #14]
 8006c6c:	0a1b      	lsrs	r3, r3, #8
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	4619      	mov	r1, r3
 8006c74:	20f4      	movs	r0, #244	; 0xf4
 8006c76:	f000 f920 	bl	8006eba <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 8006c7a:	89fb      	ldrh	r3, [r7, #14]
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	4619      	mov	r1, r3
 8006c80:	20f5      	movs	r0, #245	; 0xf5
 8006c82:	f000 f91a 	bl	8006eba <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8006c86:	78fb      	ldrb	r3, [r7, #3]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8006c90:	4619      	mov	r1, r3
 8006c92:	480b      	ldr	r0, [pc, #44]	; (8006cc0 <RadioSend+0x1e0>)
 8006c94:	f001 f866 	bl	8007d64 <SUBGRF_SendPayload>
            break;
 8006c98:	e000      	b.n	8006c9c <RadioSend+0x1bc>
        }
        default:
            break;
 8006c9a:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8006c9c:	4b06      	ldr	r3, [pc, #24]	; (8006cb8 <RadioSend+0x1d8>)
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	4808      	ldr	r0, [pc, #32]	; (8006cc4 <RadioSend+0x1e4>)
 8006ca4:	f002 fb66 	bl	8009374 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8006ca8:	4806      	ldr	r0, [pc, #24]	; (8006cc4 <RadioSend+0x1e4>)
 8006caa:	f002 fa85 	bl	80091b8 <UTIL_TIMER_Start>
 8006cae:	e000      	b.n	8006cb2 <RadioSend+0x1d2>
                return;
 8006cb0:	bf00      	nop
}
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	20000444 	.word	0x20000444
 8006cbc:	20000452 	.word	0x20000452
 8006cc0:	200001a0 	.word	0x200001a0
 8006cc4:	2000049c 	.word	0x2000049c

08006cc8 <RadioSleep>:

static void RadioSleep( void )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8006cce:	2300      	movs	r3, #0
 8006cd0:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8006cd2:	793b      	ldrb	r3, [r7, #4]
 8006cd4:	f043 0304 	orr.w	r3, r3, #4
 8006cd8:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8006cda:	7938      	ldrb	r0, [r7, #4]
 8006cdc:	f001 f91e 	bl	8007f1c <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8006ce0:	2002      	movs	r0, #2
 8006ce2:	f7f9 ff73 	bl	8000bcc <HAL_Delay>
}
 8006ce6:	bf00      	nop
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <RadioStandby>:

static void RadioStandby( void )
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8006cf2:	2000      	movs	r0, #0
 8006cf4:	f001 f944 	bl	8007f80 <SUBGRF_SetStandby>
}
 8006cf8:	bf00      	nop
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 8006d04:	f002 f929 	bl	8008f5a <RFW_Is_Init>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d102      	bne.n	8006d14 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 8006d0e:	f002 f94c 	bl	8008faa <RFW_ReceiveInit>
 8006d12:	e007      	b.n	8006d24 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8006d14:	2300      	movs	r3, #0
 8006d16:	2200      	movs	r2, #0
 8006d18:	f240 2162 	movw	r1, #610	; 0x262
 8006d1c:	f240 2062 	movw	r0, #610	; 0x262
 8006d20:	f001 fafe 	bl	8008320 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d006      	beq.n	8006d38 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8006d2a:	6879      	ldr	r1, [r7, #4]
 8006d2c:	480f      	ldr	r0, [pc, #60]	; (8006d6c <RadioRx+0x70>)
 8006d2e:	f002 fb21 	bl	8009374 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8006d32:	480e      	ldr	r0, [pc, #56]	; (8006d6c <RadioRx+0x70>)
 8006d34:	f002 fa40 	bl	80091b8 <UTIL_TIMER_Start>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8006d38:	4b0d      	ldr	r3, [pc, #52]	; (8006d70 <RadioRx+0x74>)
 8006d3a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006d3e:	2100      	movs	r1, #0
 8006d40:	4618      	mov	r0, r3
 8006d42:	f001 ff1f 	bl	8008b84 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8006d46:	4b0a      	ldr	r3, [pc, #40]	; (8006d70 <RadioRx+0x74>)
 8006d48:	785b      	ldrb	r3, [r3, #1]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d004      	beq.n	8006d58 <RadioRx+0x5c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8006d4e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006d52:	f001 f951 	bl	8007ff8 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8006d56:	e005      	b.n	8006d64 <RadioRx+0x68>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8006d58:	4b05      	ldr	r3, [pc, #20]	; (8006d70 <RadioRx+0x74>)
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	019b      	lsls	r3, r3, #6
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f001 f94a 	bl	8007ff8 <SUBGRF_SetRx>
}
 8006d64:	bf00      	nop
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	200004b4 	.word	0x200004b4
 8006d70:	20000444 	.word	0x20000444

08006d74 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 8006d7c:	f002 f8ed 	bl	8008f5a <RFW_Is_Init>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d102      	bne.n	8006d8c <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 8006d86:	f002 f910 	bl	8008faa <RFW_ReceiveInit>
 8006d8a:	e007      	b.n	8006d9c <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f240 2162 	movw	r1, #610	; 0x262
 8006d94:	f240 2062 	movw	r0, #610	; 0x262
 8006d98:	f001 fac2 	bl	8008320 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d006      	beq.n	8006db0 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8006da2:	6879      	ldr	r1, [r7, #4]
 8006da4:	480f      	ldr	r0, [pc, #60]	; (8006de4 <RadioRxBoosted+0x70>)
 8006da6:	f002 fae5 	bl	8009374 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8006daa:	480e      	ldr	r0, [pc, #56]	; (8006de4 <RadioRxBoosted+0x70>)
 8006dac:	f002 fa04 	bl	80091b8 <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8006db0:	4b0d      	ldr	r3, [pc, #52]	; (8006de8 <RadioRxBoosted+0x74>)
 8006db2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006db6:	2100      	movs	r1, #0
 8006db8:	4618      	mov	r0, r3
 8006dba:	f001 fee3 	bl	8008b84 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8006dbe:	4b0a      	ldr	r3, [pc, #40]	; (8006de8 <RadioRxBoosted+0x74>)
 8006dc0:	785b      	ldrb	r3, [r3, #1]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d004      	beq.n	8006dd0 <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8006dc6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8006dca:	f001 f935 	bl	8008038 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8006dce:	e005      	b.n	8006ddc <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8006dd0:	4b05      	ldr	r3, [pc, #20]	; (8006de8 <RadioRxBoosted+0x74>)
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	019b      	lsls	r3, r3, #6
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f001 f92e 	bl	8008038 <SUBGRF_SetRxBoosted>
}
 8006ddc:	bf00      	nop
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	200004b4 	.word	0x200004b4
 8006de8:	20000444 	.word	0x20000444

08006dec <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8006df6:	4b07      	ldr	r3, [pc, #28]	; (8006e14 <RadioSetRxDutyCycle+0x28>)
 8006df8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f001 fec0 	bl	8008b84 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8006e04:	6839      	ldr	r1, [r7, #0]
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f001 f93a 	bl	8008080 <SUBGRF_SetRxDutyCycle>
}
 8006e0c:	bf00      	nop
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	20000444 	.word	0x20000444

08006e18 <RadioStartCad>:

static void RadioStartCad( void )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8006e1c:	4b09      	ldr	r3, [pc, #36]	; (8006e44 <RadioStartCad+0x2c>)
 8006e1e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006e22:	2100      	movs	r1, #0
 8006e24:	4618      	mov	r0, r3
 8006e26:	f001 fead 	bl	8008b84 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8006e32:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8006e36:	f001 fa73 	bl	8008320 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8006e3a:	f001 f94d 	bl	80080d8 <SUBGRF_SetCad>
}
 8006e3e:	bf00      	nop
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	20000444 	.word	0x20000444

08006e48 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	460b      	mov	r3, r1
 8006e52:	70fb      	strb	r3, [r7, #3]
 8006e54:	4613      	mov	r3, r2
 8006e56:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8006e58:	883b      	ldrh	r3, [r7, #0]
 8006e5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006e5e:	fb02 f303 	mul.w	r3, r2, r3
 8006e62:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f001 fab7 	bl	80083d8 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8006e6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f001 feb0 	bl	8008bd4 <SUBGRF_SetRfTxPower>
 8006e74:	4603      	mov	r3, r0
 8006e76:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 8006e78:	7afb      	ldrb	r3, [r7, #11]
 8006e7a:	2101      	movs	r1, #1
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f001 fe81 	bl	8008b84 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8006e82:	f001 f937 	bl	80080f4 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8006e86:	68f9      	ldr	r1, [r7, #12]
 8006e88:	4804      	ldr	r0, [pc, #16]	; (8006e9c <RadioSetTxContinuousWave+0x54>)
 8006e8a:	f002 fa73 	bl	8009374 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8006e8e:	4803      	ldr	r0, [pc, #12]	; (8006e9c <RadioSetTxContinuousWave+0x54>)
 8006e90:	f002 f992 	bl	80091b8 <UTIL_TIMER_Start>
}
 8006e94:	bf00      	nop
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	2000049c 	.word	0x2000049c

08006ea0 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8006eaa:	f001 fce4 	bl	8008876 <SUBGRF_GetRssiInst>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	b21b      	sxth	r3, r3
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3708      	adds	r7, #8
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b082      	sub	sp, #8
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	460a      	mov	r2, r1
 8006ec4:	80fb      	strh	r3, [r7, #6]
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 8006eca:	797a      	ldrb	r2, [r7, #5]
 8006ecc:	88fb      	ldrh	r3, [r7, #6]
 8006ece:	4611      	mov	r1, r2
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f001 fd63 	bl	800899c <SUBGRF_WriteRegister>
}
 8006ed6:	bf00      	nop
 8006ed8:	3708      	adds	r7, #8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b082      	sub	sp, #8
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 8006ee8:	88fb      	ldrh	r3, [r7, #6]
 8006eea:	4618      	mov	r0, r3
 8006eec:	f001 fd6a 	bl	80089c4 <SUBGRF_ReadRegister>
 8006ef0:	4603      	mov	r3, r0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b082      	sub	sp, #8
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	4603      	mov	r3, r0
 8006f02:	6039      	str	r1, [r7, #0]
 8006f04:	80fb      	strh	r3, [r7, #6]
 8006f06:	4613      	mov	r3, r2
 8006f08:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8006f0a:	797b      	ldrb	r3, [r7, #5]
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	88fb      	ldrh	r3, [r7, #6]
 8006f10:	6839      	ldr	r1, [r7, #0]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f001 fd6a 	bl	80089ec <SUBGRF_WriteRegisters>
}
 8006f18:	bf00      	nop
 8006f1a:	3708      	adds	r7, #8
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	4603      	mov	r3, r0
 8006f28:	6039      	str	r1, [r7, #0]
 8006f2a:	80fb      	strh	r3, [r7, #6]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8006f30:	797b      	ldrb	r3, [r7, #5]
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	88fb      	ldrh	r3, [r7, #6]
 8006f36:	6839      	ldr	r1, [r7, #0]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f001 fd79 	bl	8008a30 <SUBGRF_ReadRegisters>
}
 8006f3e:	bf00      	nop
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
	...

08006f48 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	4603      	mov	r3, r0
 8006f50:	460a      	mov	r2, r1
 8006f52:	71fb      	strb	r3, [r7, #7]
 8006f54:	4613      	mov	r3, r2
 8006f56:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8006f58:	79fb      	ldrb	r3, [r7, #7]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d10a      	bne.n	8006f74 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8006f5e:	4a0e      	ldr	r2, [pc, #56]	; (8006f98 <RadioSetMaxPayloadLength+0x50>)
 8006f60:	79bb      	ldrb	r3, [r7, #6]
 8006f62:	7013      	strb	r3, [r2, #0]
 8006f64:	4b0c      	ldr	r3, [pc, #48]	; (8006f98 <RadioSetMaxPayloadLength+0x50>)
 8006f66:	781a      	ldrb	r2, [r3, #0]
 8006f68:	4b0c      	ldr	r3, [pc, #48]	; (8006f9c <RadioSetMaxPayloadLength+0x54>)
 8006f6a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006f6c:	480c      	ldr	r0, [pc, #48]	; (8006fa0 <RadioSetMaxPayloadLength+0x58>)
 8006f6e:	f001 fbcd 	bl	800870c <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8006f72:	e00d      	b.n	8006f90 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8006f74:	4b09      	ldr	r3, [pc, #36]	; (8006f9c <RadioSetMaxPayloadLength+0x54>)
 8006f76:	7d5b      	ldrb	r3, [r3, #21]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d109      	bne.n	8006f90 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8006f7c:	4a06      	ldr	r2, [pc, #24]	; (8006f98 <RadioSetMaxPayloadLength+0x50>)
 8006f7e:	79bb      	ldrb	r3, [r7, #6]
 8006f80:	7013      	strb	r3, [r2, #0]
 8006f82:	4b05      	ldr	r3, [pc, #20]	; (8006f98 <RadioSetMaxPayloadLength+0x50>)
 8006f84:	781a      	ldrb	r2, [r3, #0]
 8006f86:	4b05      	ldr	r3, [pc, #20]	; (8006f9c <RadioSetMaxPayloadLength+0x54>)
 8006f88:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006f8a:	4805      	ldr	r0, [pc, #20]	; (8006fa0 <RadioSetMaxPayloadLength+0x58>)
 8006f8c:	f001 fbbe 	bl	800870c <SUBGRF_SetPacketParams>
}
 8006f90:	bf00      	nop
 8006f92:	3708      	adds	r7, #8
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	2000000d 	.word	0x2000000d
 8006f9c:	20000444 	.word	0x20000444
 8006fa0:	20000452 	.word	0x20000452

08006fa4 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	4603      	mov	r3, r0
 8006fac:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8006fae:	4a13      	ldr	r2, [pc, #76]	; (8006ffc <RadioSetPublicNetwork+0x58>)
 8006fb0:	79fb      	ldrb	r3, [r7, #7]
 8006fb2:	7313      	strb	r3, [r2, #12]
 8006fb4:	4b11      	ldr	r3, [pc, #68]	; (8006ffc <RadioSetPublicNetwork+0x58>)
 8006fb6:	7b1a      	ldrb	r2, [r3, #12]
 8006fb8:	4b10      	ldr	r3, [pc, #64]	; (8006ffc <RadioSetPublicNetwork+0x58>)
 8006fba:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8006fbc:	2001      	movs	r0, #1
 8006fbe:	f7ff f831 	bl	8006024 <RadioSetModem>
    if( enable == true )
 8006fc2:	79fb      	ldrb	r3, [r7, #7]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00a      	beq.n	8006fde <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8006fc8:	2134      	movs	r1, #52	; 0x34
 8006fca:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8006fce:	f001 fce5 	bl	800899c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8006fd2:	2144      	movs	r1, #68	; 0x44
 8006fd4:	f240 7041 	movw	r0, #1857	; 0x741
 8006fd8:	f001 fce0 	bl	800899c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8006fdc:	e009      	b.n	8006ff2 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8006fde:	2114      	movs	r1, #20
 8006fe0:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8006fe4:	f001 fcda 	bl	800899c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8006fe8:	2124      	movs	r1, #36	; 0x24
 8006fea:	f240 7041 	movw	r0, #1857	; 0x741
 8006fee:	f001 fcd5 	bl	800899c <SUBGRF_WriteRegister>
}
 8006ff2:	bf00      	nop
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	20000444 	.word	0x20000444

08007000 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8007004:	f001 fe1a 	bl	8008c3c <SUBGRF_GetRadioWakeUpTime>
 8007008:	4603      	mov	r3, r0
 800700a:	3303      	adds	r3, #3
}
 800700c:	4618      	mov	r0, r3
 800700e:	bd80      	pop	{r7, pc}

08007010 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8007018:	f000 f80e 	bl	8007038 <RadioOnTxTimeoutProcess>
}
 800701c:	bf00      	nop
 800701e:	3708      	adds	r7, #8
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 800702c:	f000 f818 	bl	8007060 <RadioOnRxTimeoutProcess>
}
 8007030:	bf00      	nop
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8007038:	b580      	push	{r7, lr}
 800703a:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800703c:	4b07      	ldr	r3, [pc, #28]	; (800705c <RadioOnTxTimeoutProcess+0x24>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d008      	beq.n	8007056 <RadioOnTxTimeoutProcess+0x1e>
 8007044:	4b05      	ldr	r3, [pc, #20]	; (800705c <RadioOnTxTimeoutProcess+0x24>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d003      	beq.n	8007056 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 800704e:	4b03      	ldr	r3, [pc, #12]	; (800705c <RadioOnTxTimeoutProcess+0x24>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	4798      	blx	r3
    }
}
 8007056:	bf00      	nop
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	200002a0 	.word	0x200002a0

08007060 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8007064:	4b07      	ldr	r3, [pc, #28]	; (8007084 <RadioOnRxTimeoutProcess+0x24>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d008      	beq.n	800707e <RadioOnRxTimeoutProcess+0x1e>
 800706c:	4b05      	ldr	r3, [pc, #20]	; (8007084 <RadioOnRxTimeoutProcess+0x24>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d003      	beq.n	800707e <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8007076:	4b03      	ldr	r3, [pc, #12]	; (8007084 <RadioOnRxTimeoutProcess+0x24>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	4798      	blx	r3
    }
}
 800707e:	bf00      	nop
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	200002a0 	.word	0x200002a0

08007088 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	4603      	mov	r3, r0
 8007090:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8007092:	4a05      	ldr	r2, [pc, #20]	; (80070a8 <RadioOnDioIrq+0x20>)
 8007094:	88fb      	ldrh	r3, [r7, #6]
 8007096:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 800709a:	f000 f807 	bl	80070ac <RadioIrqProcess>
}
 800709e:	bf00      	nop
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	20000444 	.word	0x20000444

080070ac <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80070ac:	b590      	push	{r4, r7, lr}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80070b2:	2300      	movs	r3, #0
 80070b4:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80070b6:	2300      	movs	r3, #0
 80070b8:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 80070ba:	4bb4      	ldr	r3, [pc, #720]	; (800738c <RadioIrqProcess+0x2e0>)
 80070bc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80070c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070c4:	f000 810c 	beq.w	80072e0 <RadioIrqProcess+0x234>
 80070c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070cc:	f300 8184 	bgt.w	80073d8 <RadioIrqProcess+0x32c>
 80070d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070d4:	f000 80f0 	beq.w	80072b8 <RadioIrqProcess+0x20c>
 80070d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070dc:	f300 817c 	bgt.w	80073d8 <RadioIrqProcess+0x32c>
 80070e0:	2b80      	cmp	r3, #128	; 0x80
 80070e2:	f000 80d5 	beq.w	8007290 <RadioIrqProcess+0x1e4>
 80070e6:	2b80      	cmp	r3, #128	; 0x80
 80070e8:	f300 8176 	bgt.w	80073d8 <RadioIrqProcess+0x32c>
 80070ec:	2b20      	cmp	r3, #32
 80070ee:	dc49      	bgt.n	8007184 <RadioIrqProcess+0xd8>
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f340 8171 	ble.w	80073d8 <RadioIrqProcess+0x32c>
 80070f6:	3b01      	subs	r3, #1
 80070f8:	2b1f      	cmp	r3, #31
 80070fa:	f200 816d 	bhi.w	80073d8 <RadioIrqProcess+0x32c>
 80070fe:	a201      	add	r2, pc, #4	; (adr r2, 8007104 <RadioIrqProcess+0x58>)
 8007100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007104:	0800718d 	.word	0x0800718d
 8007108:	080071c7 	.word	0x080071c7
 800710c:	080073d9 	.word	0x080073d9
 8007110:	080073d9 	.word	0x080073d9
 8007114:	080073d9 	.word	0x080073d9
 8007118:	080073d9 	.word	0x080073d9
 800711c:	080073d9 	.word	0x080073d9
 8007120:	08007345 	.word	0x08007345
 8007124:	080073d9 	.word	0x080073d9
 8007128:	080073d9 	.word	0x080073d9
 800712c:	080073d9 	.word	0x080073d9
 8007130:	080073d9 	.word	0x080073d9
 8007134:	080073d9 	.word	0x080073d9
 8007138:	080073d9 	.word	0x080073d9
 800713c:	080073d9 	.word	0x080073d9
 8007140:	080073d9 	.word	0x080073d9
 8007144:	080073d9 	.word	0x080073d9
 8007148:	080073d9 	.word	0x080073d9
 800714c:	080073d9 	.word	0x080073d9
 8007150:	080073d9 	.word	0x080073d9
 8007154:	080073d9 	.word	0x080073d9
 8007158:	080073d9 	.word	0x080073d9
 800715c:	080073d9 	.word	0x080073d9
 8007160:	080073d9 	.word	0x080073d9
 8007164:	080073d9 	.word	0x080073d9
 8007168:	080073d9 	.word	0x080073d9
 800716c:	080073d9 	.word	0x080073d9
 8007170:	080073d9 	.word	0x080073d9
 8007174:	080073d9 	.word	0x080073d9
 8007178:	080073d9 	.word	0x080073d9
 800717c:	080073d9 	.word	0x080073d9
 8007180:	08007355 	.word	0x08007355
 8007184:	2b40      	cmp	r3, #64	; 0x40
 8007186:	f000 810f 	beq.w	80073a8 <RadioIrqProcess+0x2fc>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 800718a:	e125      	b.n	80073d8 <RadioIrqProcess+0x32c>
        TimerStop( &TxTimeoutTimer );
 800718c:	4880      	ldr	r0, [pc, #512]	; (8007390 <RadioIrqProcess+0x2e4>)
 800718e:	f002 f881 	bl	8009294 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8007192:	2000      	movs	r0, #0
 8007194:	f000 fef4 	bl	8007f80 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 8007198:	f001 fee6 	bl	8008f68 <RFW_Is_LongPacketModeEnabled>
 800719c:	4603      	mov	r3, r0
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d101      	bne.n	80071a6 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 80071a2:	f001 ff0a 	bl	8008fba <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80071a6:	4b7b      	ldr	r3, [pc, #492]	; (8007394 <RadioIrqProcess+0x2e8>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f000 8116 	beq.w	80073dc <RadioIrqProcess+0x330>
 80071b0:	4b78      	ldr	r3, [pc, #480]	; (8007394 <RadioIrqProcess+0x2e8>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f000 8110 	beq.w	80073dc <RadioIrqProcess+0x330>
            RadioEvents->TxDone( );
 80071bc:	4b75      	ldr	r3, [pc, #468]	; (8007394 <RadioIrqProcess+0x2e8>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4798      	blx	r3
        break;
 80071c4:	e10a      	b.n	80073dc <RadioIrqProcess+0x330>
        TimerStop( &RxTimeoutTimer );
 80071c6:	4874      	ldr	r0, [pc, #464]	; (8007398 <RadioIrqProcess+0x2ec>)
 80071c8:	f002 f864 	bl	8009294 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80071cc:	4b6f      	ldr	r3, [pc, #444]	; (800738c <RadioIrqProcess+0x2e0>)
 80071ce:	785b      	ldrb	r3, [r3, #1]
 80071d0:	f083 0301 	eor.w	r3, r3, #1
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d014      	beq.n	8007204 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 80071da:	2000      	movs	r0, #0
 80071dc:	f000 fed0 	bl	8007f80 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 80071e0:	2100      	movs	r1, #0
 80071e2:	f640 1002 	movw	r0, #2306	; 0x902
 80071e6:	f001 fbd9 	bl	800899c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 80071ea:	f640 1044 	movw	r0, #2372	; 0x944
 80071ee:	f001 fbe9 	bl	80089c4 <SUBGRF_ReadRegister>
 80071f2:	4603      	mov	r3, r0
 80071f4:	f043 0302 	orr.w	r3, r3, #2
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	4619      	mov	r1, r3
 80071fc:	f640 1044 	movw	r0, #2372	; 0x944
 8007200:	f001 fbcc 	bl	800899c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 8007204:	1dfb      	adds	r3, r7, #7
 8007206:	22ff      	movs	r2, #255	; 0xff
 8007208:	4619      	mov	r1, r3
 800720a:	4864      	ldr	r0, [pc, #400]	; (800739c <RadioIrqProcess+0x2f0>)
 800720c:	f000 fd88 	bl	8007d20 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 8007210:	4863      	ldr	r0, [pc, #396]	; (80073a0 <RadioIrqProcess+0x2f4>)
 8007212:	f001 fb71 	bl	80088f8 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8007216:	4b5f      	ldr	r3, [pc, #380]	; (8007394 <RadioIrqProcess+0x2e8>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d036      	beq.n	800728c <RadioIrqProcess+0x1e0>
 800721e:	4b5d      	ldr	r3, [pc, #372]	; (8007394 <RadioIrqProcess+0x2e8>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d031      	beq.n	800728c <RadioIrqProcess+0x1e0>
            switch ( SubgRf.PacketStatus.packetType )
 8007228:	4b58      	ldr	r3, [pc, #352]	; (800738c <RadioIrqProcess+0x2e0>)
 800722a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800722e:	2b01      	cmp	r3, #1
 8007230:	d10e      	bne.n	8007250 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8007232:	4b58      	ldr	r3, [pc, #352]	; (8007394 <RadioIrqProcess+0x2e8>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	689c      	ldr	r4, [r3, #8]
 8007238:	79fb      	ldrb	r3, [r7, #7]
 800723a:	b299      	uxth	r1, r3
 800723c:	4b53      	ldr	r3, [pc, #332]	; (800738c <RadioIrqProcess+0x2e0>)
 800723e:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8007242:	b21a      	sxth	r2, r3
 8007244:	4b51      	ldr	r3, [pc, #324]	; (800738c <RadioIrqProcess+0x2e0>)
 8007246:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800724a:	4854      	ldr	r0, [pc, #336]	; (800739c <RadioIrqProcess+0x2f0>)
 800724c:	47a0      	blx	r4
                break;
 800724e:	e01e      	b.n	800728e <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8007250:	4b4e      	ldr	r3, [pc, #312]	; (800738c <RadioIrqProcess+0x2e0>)
 8007252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007254:	463a      	mov	r2, r7
 8007256:	4611      	mov	r1, r2
 8007258:	4618      	mov	r0, r3
 800725a:	f001 fdd1 	bl	8008e00 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 800725e:	4b4d      	ldr	r3, [pc, #308]	; (8007394 <RadioIrqProcess+0x2e8>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	689c      	ldr	r4, [r3, #8]
 8007264:	79fb      	ldrb	r3, [r7, #7]
 8007266:	b299      	uxth	r1, r3
 8007268:	4b48      	ldr	r3, [pc, #288]	; (800738c <RadioIrqProcess+0x2e0>)
 800726a:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800726e:	b218      	sxth	r0, r3
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007276:	4a4b      	ldr	r2, [pc, #300]	; (80073a4 <RadioIrqProcess+0x2f8>)
 8007278:	fb82 c203 	smull	ip, r2, r2, r3
 800727c:	1192      	asrs	r2, r2, #6
 800727e:	17db      	asrs	r3, r3, #31
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	b25b      	sxtb	r3, r3
 8007284:	4602      	mov	r2, r0
 8007286:	4845      	ldr	r0, [pc, #276]	; (800739c <RadioIrqProcess+0x2f0>)
 8007288:	47a0      	blx	r4
                break;
 800728a:	e000      	b.n	800728e <RadioIrqProcess+0x1e2>
        }
 800728c:	bf00      	nop
        break;
 800728e:	e0b2      	b.n	80073f6 <RadioIrqProcess+0x34a>
        SUBGRF_SetStandby( STDBY_RC );
 8007290:	2000      	movs	r0, #0
 8007292:	f000 fe75 	bl	8007f80 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8007296:	4b3f      	ldr	r3, [pc, #252]	; (8007394 <RadioIrqProcess+0x2e8>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 80a0 	beq.w	80073e0 <RadioIrqProcess+0x334>
 80072a0:	4b3c      	ldr	r3, [pc, #240]	; (8007394 <RadioIrqProcess+0x2e8>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f000 809a 	beq.w	80073e0 <RadioIrqProcess+0x334>
            RadioEvents->CadDone( false );
 80072ac:	4b39      	ldr	r3, [pc, #228]	; (8007394 <RadioIrqProcess+0x2e8>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	2000      	movs	r0, #0
 80072b4:	4798      	blx	r3
        break;
 80072b6:	e093      	b.n	80073e0 <RadioIrqProcess+0x334>
        SUBGRF_SetStandby( STDBY_RC );
 80072b8:	2000      	movs	r0, #0
 80072ba:	f000 fe61 	bl	8007f80 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80072be:	4b35      	ldr	r3, [pc, #212]	; (8007394 <RadioIrqProcess+0x2e8>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f000 808e 	beq.w	80073e4 <RadioIrqProcess+0x338>
 80072c8:	4b32      	ldr	r3, [pc, #200]	; (8007394 <RadioIrqProcess+0x2e8>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f000 8088 	beq.w	80073e4 <RadioIrqProcess+0x338>
            RadioEvents->CadDone( true );
 80072d4:	4b2f      	ldr	r3, [pc, #188]	; (8007394 <RadioIrqProcess+0x2e8>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	2001      	movs	r0, #1
 80072dc:	4798      	blx	r3
        break;
 80072de:	e081      	b.n	80073e4 <RadioIrqProcess+0x338>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80072e0:	f000 fd04 	bl	8007cec <SUBGRF_GetOperatingMode>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b04      	cmp	r3, #4
 80072e8:	d113      	bne.n	8007312 <RadioIrqProcess+0x266>
            TimerStop( &TxTimeoutTimer );
 80072ea:	4829      	ldr	r0, [pc, #164]	; (8007390 <RadioIrqProcess+0x2e4>)
 80072ec:	f001 ffd2 	bl	8009294 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80072f0:	2000      	movs	r0, #0
 80072f2:	f000 fe45 	bl	8007f80 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80072f6:	4b27      	ldr	r3, [pc, #156]	; (8007394 <RadioIrqProcess+0x2e8>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d074      	beq.n	80073e8 <RadioIrqProcess+0x33c>
 80072fe:	4b25      	ldr	r3, [pc, #148]	; (8007394 <RadioIrqProcess+0x2e8>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d06f      	beq.n	80073e8 <RadioIrqProcess+0x33c>
                RadioEvents->TxTimeout( );
 8007308:	4b22      	ldr	r3, [pc, #136]	; (8007394 <RadioIrqProcess+0x2e8>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	4798      	blx	r3
        break;
 8007310:	e06a      	b.n	80073e8 <RadioIrqProcess+0x33c>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8007312:	f000 fceb 	bl	8007cec <SUBGRF_GetOperatingMode>
 8007316:	4603      	mov	r3, r0
 8007318:	2b05      	cmp	r3, #5
 800731a:	d165      	bne.n	80073e8 <RadioIrqProcess+0x33c>
            TimerStop( &RxTimeoutTimer );
 800731c:	481e      	ldr	r0, [pc, #120]	; (8007398 <RadioIrqProcess+0x2ec>)
 800731e:	f001 ffb9 	bl	8009294 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8007322:	2000      	movs	r0, #0
 8007324:	f000 fe2c 	bl	8007f80 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8007328:	4b1a      	ldr	r3, [pc, #104]	; (8007394 <RadioIrqProcess+0x2e8>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d05b      	beq.n	80073e8 <RadioIrqProcess+0x33c>
 8007330:	4b18      	ldr	r3, [pc, #96]	; (8007394 <RadioIrqProcess+0x2e8>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d056      	beq.n	80073e8 <RadioIrqProcess+0x33c>
                RadioEvents->RxTimeout( );
 800733a:	4b16      	ldr	r3, [pc, #88]	; (8007394 <RadioIrqProcess+0x2e8>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	4798      	blx	r3
        break;
 8007342:	e051      	b.n	80073e8 <RadioIrqProcess+0x33c>
        if ( 1UL == RFW_Is_Init( ) )
 8007344:	f001 fe09 	bl	8008f5a <RFW_Is_Init>
 8007348:	4603      	mov	r3, r0
 800734a:	2b01      	cmp	r3, #1
 800734c:	d14e      	bne.n	80073ec <RadioIrqProcess+0x340>
            RFW_ReceivePayload( );
 800734e:	f001 fe3a 	bl	8008fc6 <RFW_ReceivePayload>
        break;
 8007352:	e04b      	b.n	80073ec <RadioIrqProcess+0x340>
        TimerStop( &RxTimeoutTimer );
 8007354:	4810      	ldr	r0, [pc, #64]	; (8007398 <RadioIrqProcess+0x2ec>)
 8007356:	f001 ff9d 	bl	8009294 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800735a:	4b0c      	ldr	r3, [pc, #48]	; (800738c <RadioIrqProcess+0x2e0>)
 800735c:	785b      	ldrb	r3, [r3, #1]
 800735e:	f083 0301 	eor.w	r3, r3, #1
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b00      	cmp	r3, #0
 8007366:	d002      	beq.n	800736e <RadioIrqProcess+0x2c2>
            SUBGRF_SetStandby( STDBY_RC );
 8007368:	2000      	movs	r0, #0
 800736a:	f000 fe09 	bl	8007f80 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800736e:	4b09      	ldr	r3, [pc, #36]	; (8007394 <RadioIrqProcess+0x2e8>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d03c      	beq.n	80073f0 <RadioIrqProcess+0x344>
 8007376:	4b07      	ldr	r3, [pc, #28]	; (8007394 <RadioIrqProcess+0x2e8>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d037      	beq.n	80073f0 <RadioIrqProcess+0x344>
            RadioEvents->RxTimeout( );
 8007380:	4b04      	ldr	r3, [pc, #16]	; (8007394 <RadioIrqProcess+0x2e8>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	4798      	blx	r3
        break;
 8007388:	e032      	b.n	80073f0 <RadioIrqProcess+0x344>
 800738a:	bf00      	nop
 800738c:	20000444 	.word	0x20000444
 8007390:	2000049c 	.word	0x2000049c
 8007394:	200002a0 	.word	0x200002a0
 8007398:	200004b4 	.word	0x200004b4
 800739c:	200001a0 	.word	0x200001a0
 80073a0:	20000468 	.word	0x20000468
 80073a4:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxContinuous == false )
 80073a8:	4b15      	ldr	r3, [pc, #84]	; (8007400 <RadioIrqProcess+0x354>)
 80073aa:	785b      	ldrb	r3, [r3, #1]
 80073ac:	f083 0301 	eor.w	r3, r3, #1
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d002      	beq.n	80073bc <RadioIrqProcess+0x310>
            SUBGRF_SetStandby( STDBY_RC );
 80073b6:	2000      	movs	r0, #0
 80073b8:	f000 fde2 	bl	8007f80 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80073bc:	4b11      	ldr	r3, [pc, #68]	; (8007404 <RadioIrqProcess+0x358>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d017      	beq.n	80073f4 <RadioIrqProcess+0x348>
 80073c4:	4b0f      	ldr	r3, [pc, #60]	; (8007404 <RadioIrqProcess+0x358>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d012      	beq.n	80073f4 <RadioIrqProcess+0x348>
            RadioEvents->RxError( );
 80073ce:	4b0d      	ldr	r3, [pc, #52]	; (8007404 <RadioIrqProcess+0x358>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	4798      	blx	r3
        break;
 80073d6:	e00d      	b.n	80073f4 <RadioIrqProcess+0x348>
        break;
 80073d8:	bf00      	nop
 80073da:	e00c      	b.n	80073f6 <RadioIrqProcess+0x34a>
        break;
 80073dc:	bf00      	nop
 80073de:	e00a      	b.n	80073f6 <RadioIrqProcess+0x34a>
        break;
 80073e0:	bf00      	nop
 80073e2:	e008      	b.n	80073f6 <RadioIrqProcess+0x34a>
        break;
 80073e4:	bf00      	nop
 80073e6:	e006      	b.n	80073f6 <RadioIrqProcess+0x34a>
        break;
 80073e8:	bf00      	nop
 80073ea:	e004      	b.n	80073f6 <RadioIrqProcess+0x34a>
        break;
 80073ec:	bf00      	nop
 80073ee:	e002      	b.n	80073f6 <RadioIrqProcess+0x34a>
        break;
 80073f0:	bf00      	nop
 80073f2:	e000      	b.n	80073f6 <RadioIrqProcess+0x34a>
        break;
 80073f4:	bf00      	nop
  }
}
 80073f6:	bf00      	nop
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd90      	pop	{r4, r7, pc}
 80073fe:	bf00      	nop
 8007400:	20000444 	.word	0x20000444
 8007404:	200002a0 	.word	0x200002a0

08007408 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800740c:	4b09      	ldr	r3, [pc, #36]	; (8007434 <RadioTxPrbs+0x2c>)
 800740e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007412:	2101      	movs	r1, #1
 8007414:	4618      	mov	r0, r3
 8007416:	f001 fbb5 	bl	8008b84 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 800741a:	4b07      	ldr	r3, [pc, #28]	; (8007438 <RadioTxPrbs+0x30>)
 800741c:	212d      	movs	r1, #45	; 0x2d
 800741e:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8007422:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8007424:	f000 fe6f 	bl	8008106 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8007428:	4804      	ldr	r0, [pc, #16]	; (800743c <RadioTxPrbs+0x34>)
 800742a:	f000 fdc5 	bl	8007fb8 <SUBGRF_SetTx>
}
 800742e:	bf00      	nop
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	20000444 	.word	0x20000444
 8007438:	08006ebb 	.word	0x08006ebb
 800743c:	000fffff 	.word	0x000fffff

08007440 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	4603      	mov	r3, r0
 8007448:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800744a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800744e:	4618      	mov	r0, r3
 8007450:	f001 fbc0 	bl	8008bd4 <SUBGRF_SetRfTxPower>
 8007454:	4603      	mov	r3, r0
 8007456:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8007458:	7bfb      	ldrb	r3, [r7, #15]
 800745a:	2101      	movs	r1, #1
 800745c:	4618      	mov	r0, r3
 800745e:	f001 fb91 	bl	8008b84 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8007462:	f000 fe47 	bl	80080f4 <SUBGRF_SetTxContinuousWave>
}
 8007466:	bf00      	nop
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800746e:	b480      	push	{r7}
 8007470:	b089      	sub	sp, #36	; 0x24
 8007472:	af00      	add	r7, sp, #0
 8007474:	60f8      	str	r0, [r7, #12]
 8007476:	60b9      	str	r1, [r7, #8]
 8007478:	4613      	mov	r3, r2
 800747a:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 800747c:	2300      	movs	r3, #0
 800747e:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 8007480:	2300      	movs	r3, #0
 8007482:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 8007484:	2300      	movs	r3, #0
 8007486:	61bb      	str	r3, [r7, #24]
 8007488:	e011      	b.n	80074ae <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	68ba      	ldr	r2, [r7, #8]
 800748e:	4413      	add	r3, r2
 8007490:	781a      	ldrb	r2, [r3, #0]
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	68b9      	ldr	r1, [r7, #8]
 8007496:	440b      	add	r3, r1
 8007498:	43d2      	mvns	r2, r2
 800749a:	b2d2      	uxtb	r2, r2
 800749c:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	4413      	add	r3, r2
 80074a4:	2200      	movs	r2, #0
 80074a6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	3301      	adds	r3, #1
 80074ac:	61bb      	str	r3, [r7, #24]
 80074ae:	79fb      	ldrb	r3, [r7, #7]
 80074b0:	69ba      	ldr	r2, [r7, #24]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	dbe9      	blt.n	800748a <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 80074b6:	2300      	movs	r3, #0
 80074b8:	61bb      	str	r3, [r7, #24]
 80074ba:	e049      	b.n	8007550 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	425a      	negs	r2, r3
 80074c0:	f003 0307 	and.w	r3, r3, #7
 80074c4:	f002 0207 	and.w	r2, r2, #7
 80074c8:	bf58      	it	pl
 80074ca:	4253      	negpl	r3, r2
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	f1c3 0307 	rsb	r3, r3, #7
 80074d2:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	da00      	bge.n	80074dc <payload_integration+0x6e>
 80074da:	3307      	adds	r3, #7
 80074dc:	10db      	asrs	r3, r3, #3
 80074de:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	3301      	adds	r3, #1
 80074e4:	425a      	negs	r2, r3
 80074e6:	f003 0307 	and.w	r3, r3, #7
 80074ea:	f002 0207 	and.w	r2, r2, #7
 80074ee:	bf58      	it	pl
 80074f0:	4253      	negpl	r3, r2
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	f1c3 0307 	rsb	r3, r3, #7
 80074f8:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	3301      	adds	r3, #1
 80074fe:	2b00      	cmp	r3, #0
 8007500:	da00      	bge.n	8007504 <payload_integration+0x96>
 8007502:	3307      	adds	r3, #7
 8007504:	10db      	asrs	r3, r3, #3
 8007506:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8007508:	7dbb      	ldrb	r3, [r7, #22]
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	4413      	add	r3, r2
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	461a      	mov	r2, r3
 8007512:	7dfb      	ldrb	r3, [r7, #23]
 8007514:	fa42 f303 	asr.w	r3, r2, r3
 8007518:	b2db      	uxtb	r3, r3
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8007520:	7ffa      	ldrb	r2, [r7, #31]
 8007522:	7cfb      	ldrb	r3, [r7, #19]
 8007524:	4053      	eors	r3, r2
 8007526:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8007528:	7d3b      	ldrb	r3, [r7, #20]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	4413      	add	r3, r2
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	b25a      	sxtb	r2, r3
 8007532:	7ff9      	ldrb	r1, [r7, #31]
 8007534:	7d7b      	ldrb	r3, [r7, #21]
 8007536:	fa01 f303 	lsl.w	r3, r1, r3
 800753a:	b25b      	sxtb	r3, r3
 800753c:	4313      	orrs	r3, r2
 800753e:	b259      	sxtb	r1, r3
 8007540:	7d3b      	ldrb	r3, [r7, #20]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	4413      	add	r3, r2
 8007546:	b2ca      	uxtb	r2, r1
 8007548:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	3301      	adds	r3, #1
 800754e:	61bb      	str	r3, [r7, #24]
 8007550:	79fb      	ldrb	r3, [r7, #7]
 8007552:	00db      	lsls	r3, r3, #3
 8007554:	69ba      	ldr	r2, [r7, #24]
 8007556:	429a      	cmp	r2, r3
 8007558:	dbb0      	blt.n	80074bc <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800755a:	7ffb      	ldrb	r3, [r7, #31]
 800755c:	01db      	lsls	r3, r3, #7
 800755e:	b25a      	sxtb	r2, r3
 8007560:	7ffb      	ldrb	r3, [r7, #31]
 8007562:	019b      	lsls	r3, r3, #6
 8007564:	b25b      	sxtb	r3, r3
 8007566:	4313      	orrs	r3, r2
 8007568:	b25b      	sxtb	r3, r3
 800756a:	7ffa      	ldrb	r2, [r7, #31]
 800756c:	2a00      	cmp	r2, #0
 800756e:	d101      	bne.n	8007574 <payload_integration+0x106>
 8007570:	2220      	movs	r2, #32
 8007572:	e000      	b.n	8007576 <payload_integration+0x108>
 8007574:	2200      	movs	r2, #0
 8007576:	4313      	orrs	r3, r2
 8007578:	b259      	sxtb	r1, r3
 800757a:	79fb      	ldrb	r3, [r7, #7]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	4413      	add	r3, r2
 8007580:	b2ca      	uxtb	r2, r1
 8007582:	701a      	strb	r2, [r3, #0]
}
 8007584:	bf00      	nop
 8007586:	3724      	adds	r7, #36	; 0x24
 8007588:	46bd      	mov	sp, r7
 800758a:	bc80      	pop	{r7}
 800758c:	4770      	bx	lr
	...

08007590 <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b08c      	sub	sp, #48	; 0x30
 8007594:	af00      	add	r7, sp, #0
 8007596:	60b9      	str	r1, [r7, #8]
 8007598:	607a      	str	r2, [r7, #4]
 800759a:	603b      	str	r3, [r7, #0]
 800759c:	4603      	mov	r3, r0
 800759e:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 80075a0:	2300      	movs	r3, #0
 80075a2:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 80075a4:	2300      	movs	r3, #0
 80075a6:	61fb      	str	r3, [r7, #28]
 80075a8:	2300      	movs	r3, #0
 80075aa:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80075ac:	f001 fccf 	bl	8008f4e <RFW_DeInit>

    if( rxContinuous != 0 )
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d001      	beq.n	80075ba <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 80075b6:	2300      	movs	r3, #0
 80075b8:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	bf14      	ite	ne
 80075c0:	2301      	movne	r3, #1
 80075c2:	2300      	moveq	r3, #0
 80075c4:	b2da      	uxtb	r2, r3
 80075c6:	4ba9      	ldr	r3, [pc, #676]	; (800786c <RadioSetRxGenericConfig+0x2dc>)
 80075c8:	705a      	strb	r2, [r3, #1]

    switch( modem )
 80075ca:	7bfb      	ldrb	r3, [r7, #15]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d003      	beq.n	80075d8 <RadioSetRxGenericConfig+0x48>
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	f000 80e8 	beq.w	80077a6 <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 80075d6:	e1a0      	b.n	800791a <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d003      	beq.n	80075e8 <RadioSetRxGenericConfig+0x58>
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d102      	bne.n	80075ee <RadioSetRxGenericConfig+0x5e>
            return -1;
 80075e8:	f04f 33ff 	mov.w	r3, #4294967295
 80075ec:	e196      	b.n	800791c <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	7d5b      	ldrb	r3, [r3, #21]
 80075f2:	2b08      	cmp	r3, #8
 80075f4:	d902      	bls.n	80075fc <RadioSetRxGenericConfig+0x6c>
            return -1;
 80075f6:	f04f 33ff 	mov.w	r3, #4294967295
 80075fa:	e18f      	b.n	800791c <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80075fc:	2300      	movs	r3, #0
 80075fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007600:	e00d      	b.n	800761e <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	699a      	ldr	r2, [r3, #24]
 8007606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007608:	4413      	add	r3, r2
 800760a:	7819      	ldrb	r1, [r3, #0]
 800760c:	f107 021c 	add.w	r2, r7, #28
 8007610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007612:	4413      	add	r3, r2
 8007614:	460a      	mov	r2, r1
 8007616:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8007618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761a:	3301      	adds	r3, #1
 800761c:	62bb      	str	r3, [r7, #40]	; 0x28
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	7d5b      	ldrb	r3, [r3, #21]
 8007622:	461a      	mov	r2, r3
 8007624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007626:	4293      	cmp	r3, r2
 8007628:	dbeb      	blt.n	8007602 <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	bf14      	ite	ne
 8007632:	2301      	movne	r3, #1
 8007634:	2300      	moveq	r3, #0
 8007636:	b2db      	uxtb	r3, r3
 8007638:	4618      	mov	r0, r3
 800763a:	f000 fd6d 	bl	8008118 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800763e:	4b8b      	ldr	r3, [pc, #556]	; (800786c <RadioSetRxGenericConfig+0x2dc>)
 8007640:	2200      	movs	r2, #0
 8007642:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	4a88      	ldr	r2, [pc, #544]	; (800786c <RadioSetRxGenericConfig+0x2dc>)
 800764c:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	791a      	ldrb	r2, [r3, #4]
 8007652:	4b86      	ldr	r3, [pc, #536]	; (800786c <RadioSetRxGenericConfig+0x2dc>)
 8007654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	4618      	mov	r0, r3
 800765e:	f001 fba7 	bl	8008db0 <SUBGRF_GetFskBandwidthRegValue>
 8007662:	4603      	mov	r3, r0
 8007664:	461a      	mov	r2, r3
 8007666:	4b81      	ldr	r3, [pc, #516]	; (800786c <RadioSetRxGenericConfig+0x2dc>)
 8007668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800766c:	4b7f      	ldr	r3, [pc, #508]	; (800786c <RadioSetRxGenericConfig+0x2dc>)
 800766e:	2200      	movs	r2, #0
 8007670:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	b29b      	uxth	r3, r3
 8007678:	00db      	lsls	r3, r3, #3
 800767a:	b29a      	uxth	r2, r3
 800767c:	4b7b      	ldr	r3, [pc, #492]	; (800786c <RadioSetRxGenericConfig+0x2dc>)
 800767e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	7d1a      	ldrb	r2, [r3, #20]
 8007684:	4b79      	ldr	r3, [pc, #484]	; (800786c <RadioSetRxGenericConfig+0x2dc>)
 8007686:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	7d5b      	ldrb	r3, [r3, #21]
 800768c:	00db      	lsls	r3, r3, #3
 800768e:	b2da      	uxtb	r2, r3
 8007690:	4b76      	ldr	r3, [pc, #472]	; (800786c <RadioSetRxGenericConfig+0x2dc>)
 8007692:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800769a:	4b74      	ldr	r3, [pc, #464]	; (800786c <RadioSetRxGenericConfig+0x2dc>)
 800769c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d105      	bne.n	80076b4 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	69db      	ldr	r3, [r3, #28]
 80076ac:	b2da      	uxtb	r2, r3
 80076ae:	4b6f      	ldr	r3, [pc, #444]	; (800786c <RadioSetRxGenericConfig+0x2dc>)
 80076b0:	759a      	strb	r2, [r3, #22]
 80076b2:	e00b      	b.n	80076cc <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d103      	bne.n	80076c6 <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80076be:	4b6b      	ldr	r3, [pc, #428]	; (800786c <RadioSetRxGenericConfig+0x2dc>)
 80076c0:	22ff      	movs	r2, #255	; 0xff
 80076c2:	759a      	strb	r2, [r3, #22]
 80076c4:	e002      	b.n	80076cc <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80076c6:	4b69      	ldr	r3, [pc, #420]	; (800786c <RadioSetRxGenericConfig+0x2dc>)
 80076c8:	22ff      	movs	r2, #255	; 0xff
 80076ca:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d004      	beq.n	80076e0 <RadioSetRxGenericConfig+0x150>
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d12d      	bne.n	800773c <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80076e6:	2bf1      	cmp	r3, #241	; 0xf1
 80076e8:	d00c      	beq.n	8007704 <RadioSetRxGenericConfig+0x174>
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80076f0:	2bf2      	cmp	r3, #242	; 0xf2
 80076f2:	d007      	beq.n	8007704 <RadioSetRxGenericConfig+0x174>
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d002      	beq.n	8007704 <RadioSetRxGenericConfig+0x174>
            return -1;
 80076fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007702:	e10b      	b.n	800791c <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 8007704:	2300      	movs	r3, #0
 8007706:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800770c:	4b58      	ldr	r3, [pc, #352]	; (8007870 <RadioSetRxGenericConfig+0x2e0>)
 800770e:	6819      	ldr	r1, [r3, #0]
 8007710:	f107 0310 	add.w	r3, r7, #16
 8007714:	4a57      	ldr	r2, [pc, #348]	; (8007874 <RadioSetRxGenericConfig+0x2e4>)
 8007716:	4618      	mov	r0, r3
 8007718:	f001 fc0c 	bl	8008f34 <RFW_Init>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d002      	beq.n	8007728 <RadioSetRxGenericConfig+0x198>
            return -1;
 8007722:	f04f 33ff 	mov.w	r3, #4294967295
 8007726:	e0f9      	b.n	800791c <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8007728:	4b50      	ldr	r3, [pc, #320]	; (800786c <RadioSetRxGenericConfig+0x2dc>)
 800772a:	2200      	movs	r2, #0
 800772c:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800772e:	4b4f      	ldr	r3, [pc, #316]	; (800786c <RadioSetRxGenericConfig+0x2dc>)
 8007730:	2201      	movs	r2, #1
 8007732:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8007734:	4b4d      	ldr	r3, [pc, #308]	; (800786c <RadioSetRxGenericConfig+0x2dc>)
 8007736:	2200      	movs	r2, #0
 8007738:	755a      	strb	r2, [r3, #21]
        {
 800773a:	e00e      	b.n	800775a <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8007742:	4b4a      	ldr	r3, [pc, #296]	; (800786c <RadioSetRxGenericConfig+0x2dc>)
 8007744:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800774c:	4b47      	ldr	r3, [pc, #284]	; (800786c <RadioSetRxGenericConfig+0x2dc>)
 800774e:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8007756:	4b45      	ldr	r3, [pc, #276]	; (800786c <RadioSetRxGenericConfig+0x2dc>)
 8007758:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800775a:	f7ff fac8 	bl	8006cee <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800775e:	2000      	movs	r0, #0
 8007760:	f7fe fc60 	bl	8006024 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007764:	4844      	ldr	r0, [pc, #272]	; (8007878 <RadioSetRxGenericConfig+0x2e8>)
 8007766:	f000 ff05 	bl	8008574 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800776a:	4844      	ldr	r0, [pc, #272]	; (800787c <RadioSetRxGenericConfig+0x2ec>)
 800776c:	f000 ffce 	bl	800870c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8007770:	f107 031c 	add.w	r3, r7, #28
 8007774:	4618      	mov	r0, r3
 8007776:	f000 fb08 	bl	8007d8a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	8c1b      	ldrh	r3, [r3, #32]
 800777e:	4618      	mov	r0, r3
 8007780:	f000 fb52 	bl	8007e28 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007788:	4618      	mov	r0, r3
 800778a:	f000 fb2d 	bl	8007de8 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007794:	fb02 f203 	mul.w	r2, r2, r3
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a0:	4a32      	ldr	r2, [pc, #200]	; (800786c <RadioSetRxGenericConfig+0x2dc>)
 80077a2:	6093      	str	r3, [r2, #8]
        break;
 80077a4:	e0b9      	b.n	800791a <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d102      	bne.n	80077b4 <RadioSetRxGenericConfig+0x224>
            return -1;
 80077ae:	f04f 33ff 	mov.w	r3, #4294967295
 80077b2:	e0b3      	b.n	800791c <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d104      	bne.n	80077c8 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	69db      	ldr	r3, [r3, #28]
 80077c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80077c6:	e002      	b.n	80077ce <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 80077c8:	23ff      	movs	r3, #255	; 0xff
 80077ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	bf14      	ite	ne
 80077d6:	2301      	movne	r3, #1
 80077d8:	2300      	moveq	r3, #0
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	4618      	mov	r0, r3
 80077de:	f000 fc9b 	bl	8008118 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	4618      	mov	r0, r3
 80077e8:	f000 fca5 	bl	8008136 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80077ec:	4b1f      	ldr	r3, [pc, #124]	; (800786c <RadioSetRxGenericConfig+0x2dc>)
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80077fa:	4b1c      	ldr	r3, [pc, #112]	; (800786c <RadioSetRxGenericConfig+0x2dc>)
 80077fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8007806:	4b19      	ldr	r3, [pc, #100]	; (800786c <RadioSetRxGenericConfig+0x2dc>)
 8007808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8007812:	4b16      	ldr	r3, [pc, #88]	; (800786c <RadioSetRxGenericConfig+0x2dc>)
 8007814:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800781e:	2b02      	cmp	r3, #2
 8007820:	d010      	beq.n	8007844 <RadioSetRxGenericConfig+0x2b4>
 8007822:	2b02      	cmp	r3, #2
 8007824:	dc2c      	bgt.n	8007880 <RadioSetRxGenericConfig+0x2f0>
 8007826:	2b00      	cmp	r3, #0
 8007828:	d002      	beq.n	8007830 <RadioSetRxGenericConfig+0x2a0>
 800782a:	2b01      	cmp	r3, #1
 800782c:	d005      	beq.n	800783a <RadioSetRxGenericConfig+0x2aa>
            break;
 800782e:	e027      	b.n	8007880 <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8007830:	4b0e      	ldr	r3, [pc, #56]	; (800786c <RadioSetRxGenericConfig+0x2dc>)
 8007832:	2200      	movs	r2, #0
 8007834:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8007838:	e023      	b.n	8007882 <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800783a:	4b0c      	ldr	r3, [pc, #48]	; (800786c <RadioSetRxGenericConfig+0x2dc>)
 800783c:	2201      	movs	r2, #1
 800783e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8007842:	e01e      	b.n	8007882 <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800784a:	2b0b      	cmp	r3, #11
 800784c:	d004      	beq.n	8007858 <RadioSetRxGenericConfig+0x2c8>
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007854:	2b0c      	cmp	r3, #12
 8007856:	d104      	bne.n	8007862 <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8007858:	4b04      	ldr	r3, [pc, #16]	; (800786c <RadioSetRxGenericConfig+0x2dc>)
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8007860:	e00f      	b.n	8007882 <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8007862:	4b02      	ldr	r3, [pc, #8]	; (800786c <RadioSetRxGenericConfig+0x2dc>)
 8007864:	2200      	movs	r2, #0
 8007866:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800786a:	e00a      	b.n	8007882 <RadioSetRxGenericConfig+0x2f2>
 800786c:	20000444 	.word	0x20000444
 8007870:	200002a0 	.word	0x200002a0
 8007874:	200004b4 	.word	0x200004b4
 8007878:	2000047c 	.word	0x2000047c
 800787c:	20000452 	.word	0x20000452
            break;
 8007880:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007882:	4b28      	ldr	r3, [pc, #160]	; (8007924 <RadioSetRxGenericConfig+0x394>)
 8007884:	2201      	movs	r2, #1
 8007886:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800788c:	4b25      	ldr	r3, [pc, #148]	; (8007924 <RadioSetRxGenericConfig+0x394>)
 800788e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8007896:	4b23      	ldr	r3, [pc, #140]	; (8007924 <RadioSetRxGenericConfig+0x394>)
 8007898:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800789a:	4a22      	ldr	r2, [pc, #136]	; (8007924 <RadioSetRxGenericConfig+0x394>)
 800789c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80078a0:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80078a8:	4b1e      	ldr	r3, [pc, #120]	; (8007924 <RadioSetRxGenericConfig+0x394>)
 80078aa:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80078b4:	4b1b      	ldr	r3, [pc, #108]	; (8007924 <RadioSetRxGenericConfig+0x394>)
 80078b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 80078ba:	f7ff fa18 	bl	8006cee <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80078be:	2001      	movs	r0, #1
 80078c0:	f7fe fbb0 	bl	8006024 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80078c4:	4818      	ldr	r0, [pc, #96]	; (8007928 <RadioSetRxGenericConfig+0x398>)
 80078c6:	f000 fe55 	bl	8008574 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80078ca:	4818      	ldr	r0, [pc, #96]	; (800792c <RadioSetRxGenericConfig+0x39c>)
 80078cc:	f000 ff1e 	bl	800870c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80078d0:	4b14      	ldr	r3, [pc, #80]	; (8007924 <RadioSetRxGenericConfig+0x394>)
 80078d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d10d      	bne.n	80078f6 <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 80078da:	f240 7036 	movw	r0, #1846	; 0x736
 80078de:	f001 f871 	bl	80089c4 <SUBGRF_ReadRegister>
 80078e2:	4603      	mov	r3, r0
 80078e4:	f023 0304 	bic.w	r3, r3, #4
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	4619      	mov	r1, r3
 80078ec:	f240 7036 	movw	r0, #1846	; 0x736
 80078f0:	f001 f854 	bl	800899c <SUBGRF_WriteRegister>
 80078f4:	e00c      	b.n	8007910 <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 80078f6:	f240 7036 	movw	r0, #1846	; 0x736
 80078fa:	f001 f863 	bl	80089c4 <SUBGRF_ReadRegister>
 80078fe:	4603      	mov	r3, r0
 8007900:	f043 0304 	orr.w	r3, r3, #4
 8007904:	b2db      	uxtb	r3, r3
 8007906:	4619      	mov	r1, r3
 8007908:	f240 7036 	movw	r0, #1846	; 0x736
 800790c:	f001 f846 	bl	800899c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8007910:	4b04      	ldr	r3, [pc, #16]	; (8007924 <RadioSetRxGenericConfig+0x394>)
 8007912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007916:	609a      	str	r2, [r3, #8]
        break;
 8007918:	bf00      	nop
    }
    return status;
 800791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800791c:	4618      	mov	r0, r3
 800791e:	3730      	adds	r7, #48	; 0x30
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	20000444 	.word	0x20000444
 8007928:	2000047c 	.word	0x2000047c
 800792c:	20000452 	.word	0x20000452

08007930 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b08a      	sub	sp, #40	; 0x28
 8007934:	af00      	add	r7, sp, #0
 8007936:	60b9      	str	r1, [r7, #8]
 8007938:	607b      	str	r3, [r7, #4]
 800793a:	4603      	mov	r3, r0
 800793c:	73fb      	strb	r3, [r7, #15]
 800793e:	4613      	mov	r3, r2
 8007940:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 8007942:	2300      	movs	r3, #0
 8007944:	61fb      	str	r3, [r7, #28]
 8007946:	2300      	movs	r3, #0
 8007948:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800794a:	f001 fb00 	bl	8008f4e <RFW_DeInit>
    switch( modem )
 800794e:	7bfb      	ldrb	r3, [r7, #15]
 8007950:	2b02      	cmp	r3, #2
 8007952:	f000 8144 	beq.w	8007bde <RadioSetTxGenericConfig+0x2ae>
 8007956:	2b02      	cmp	r3, #2
 8007958:	f300 8160 	bgt.w	8007c1c <RadioSetTxGenericConfig+0x2ec>
 800795c:	2b00      	cmp	r3, #0
 800795e:	d003      	beq.n	8007968 <RadioSetTxGenericConfig+0x38>
 8007960:	2b01      	cmp	r3, #1
 8007962:	f000 80b7 	beq.w	8007ad4 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 8007966:	e159      	b.n	8007c1c <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d003      	beq.n	8007978 <RadioSetTxGenericConfig+0x48>
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d102      	bne.n	800797e <RadioSetTxGenericConfig+0x4e>
            return -1;
 8007978:	f04f 33ff 	mov.w	r3, #4294967295
 800797c:	e163      	b.n	8007c46 <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	7d1b      	ldrb	r3, [r3, #20]
 8007982:	2b08      	cmp	r3, #8
 8007984:	d902      	bls.n	800798c <RadioSetTxGenericConfig+0x5c>
            return -1;
 8007986:	f04f 33ff 	mov.w	r3, #4294967295
 800798a:	e15c      	b.n	8007c46 <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800798c:	2300      	movs	r3, #0
 800798e:	627b      	str	r3, [r7, #36]	; 0x24
 8007990:	e00d      	b.n	80079ae <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	699a      	ldr	r2, [r3, #24]
 8007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007998:	4413      	add	r3, r2
 800799a:	7819      	ldrb	r1, [r3, #0]
 800799c:	f107 021c 	add.w	r2, r7, #28
 80079a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a2:	4413      	add	r3, r2
 80079a4:	460a      	mov	r2, r1
 80079a6:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80079a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079aa:	3301      	adds	r3, #1
 80079ac:	627b      	str	r3, [r7, #36]	; 0x24
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	7d1b      	ldrb	r3, [r3, #20]
 80079b2:	461a      	mov	r2, r3
 80079b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b6:	4293      	cmp	r3, r2
 80079b8:	dbeb      	blt.n	8007992 <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80079ba:	4ba5      	ldr	r3, [pc, #660]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	4aa2      	ldr	r2, [pc, #648]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 80079c8:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	781a      	ldrb	r2, [r3, #0]
 80079ce:	4ba0      	ldr	r3, [pc, #640]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 80079d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	4618      	mov	r0, r3
 80079da:	f001 f9e9 	bl	8008db0 <SUBGRF_GetFskBandwidthRegValue>
 80079de:	4603      	mov	r3, r0
 80079e0:	461a      	mov	r2, r3
 80079e2:	4b9b      	ldr	r3, [pc, #620]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 80079e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	4a98      	ldr	r2, [pc, #608]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 80079ee:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80079f0:	4b97      	ldr	r3, [pc, #604]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 80079f2:	2200      	movs	r2, #0
 80079f4:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	00db      	lsls	r3, r3, #3
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	4b93      	ldr	r3, [pc, #588]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 8007a02:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8007a04:	4b92      	ldr	r3, [pc, #584]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 8007a06:	2204      	movs	r2, #4
 8007a08:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	7d1b      	ldrb	r3, [r3, #20]
 8007a0e:	00db      	lsls	r3, r3, #3
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	4b8f      	ldr	r3, [pc, #572]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 8007a14:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8007a16:	4b8e      	ldr	r3, [pc, #568]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 8007a18:	2200      	movs	r2, #0
 8007a1a:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d003      	beq.n	8007a2e <RadioSetTxGenericConfig+0xfe>
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	7f9b      	ldrb	r3, [r3, #30]
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d12a      	bne.n	8007a84 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	7fdb      	ldrb	r3, [r3, #31]
 8007a32:	2bf1      	cmp	r3, #241	; 0xf1
 8007a34:	d00a      	beq.n	8007a4c <RadioSetTxGenericConfig+0x11c>
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	7fdb      	ldrb	r3, [r3, #31]
 8007a3a:	2bf2      	cmp	r3, #242	; 0xf2
 8007a3c:	d006      	beq.n	8007a4c <RadioSetTxGenericConfig+0x11c>
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	7fdb      	ldrb	r3, [r3, #31]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d002      	beq.n	8007a4c <RadioSetTxGenericConfig+0x11c>
                return -1;
 8007a46:	f04f 33ff 	mov.w	r3, #4294967295
 8007a4a:	e0fc      	b.n	8007c46 <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8007a54:	4b7f      	ldr	r3, [pc, #508]	; (8007c54 <RadioSetTxGenericConfig+0x324>)
 8007a56:	6819      	ldr	r1, [r3, #0]
 8007a58:	f107 0310 	add.w	r3, r7, #16
 8007a5c:	4a7e      	ldr	r2, [pc, #504]	; (8007c58 <RadioSetTxGenericConfig+0x328>)
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f001 fa68 	bl	8008f34 <RFW_Init>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d002      	beq.n	8007a70 <RadioSetTxGenericConfig+0x140>
              return -1;
 8007a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a6e:	e0ea      	b.n	8007c46 <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8007a70:	4b77      	ldr	r3, [pc, #476]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 8007a72:	2200      	movs	r2, #0
 8007a74:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8007a76:	4b76      	ldr	r3, [pc, #472]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 8007a78:	2201      	movs	r2, #1
 8007a7a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8007a7c:	4b74      	ldr	r3, [pc, #464]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 8007a7e:	2200      	movs	r2, #0
 8007a80:	755a      	strb	r2, [r3, #21]
        {
 8007a82:	e00c      	b.n	8007a9e <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	7fda      	ldrb	r2, [r3, #31]
 8007a88:	4b71      	ldr	r3, [pc, #452]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 8007a8a:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8007a92:	4b6f      	ldr	r3, [pc, #444]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 8007a94:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	7f9a      	ldrb	r2, [r3, #30]
 8007a9a:	4b6d      	ldr	r3, [pc, #436]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 8007a9c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8007a9e:	f7ff f926 	bl	8006cee <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8007aa2:	2000      	movs	r0, #0
 8007aa4:	f7fe fabe 	bl	8006024 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007aa8:	486c      	ldr	r0, [pc, #432]	; (8007c5c <RadioSetTxGenericConfig+0x32c>)
 8007aaa:	f000 fd63 	bl	8008574 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007aae:	486c      	ldr	r0, [pc, #432]	; (8007c60 <RadioSetTxGenericConfig+0x330>)
 8007ab0:	f000 fe2c 	bl	800870c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8007ab4:	f107 031c 	add.w	r3, r7, #28
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f000 f966 	bl	8007d8a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	8b9b      	ldrh	r3, [r3, #28]
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 f9b0 	bl	8007e28 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	8c1b      	ldrh	r3, [r3, #32]
 8007acc:	4618      	mov	r0, r3
 8007ace:	f000 f98b 	bl	8007de8 <SUBGRF_SetCrcPolynomial>
        break;
 8007ad2:	e0a4      	b.n	8007c1e <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007ad4:	4b5e      	ldr	r3, [pc, #376]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8007ae2:	4b5b      	ldr	r3, [pc, #364]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 8007ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8007aee:	4b58      	ldr	r3, [pc, #352]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 8007af0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8007afa:	4b55      	ldr	r3, [pc, #340]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 8007afc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d010      	beq.n	8007b2c <RadioSetTxGenericConfig+0x1fc>
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	dc22      	bgt.n	8007b54 <RadioSetTxGenericConfig+0x224>
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d002      	beq.n	8007b18 <RadioSetTxGenericConfig+0x1e8>
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d005      	beq.n	8007b22 <RadioSetTxGenericConfig+0x1f2>
            break;
 8007b16:	e01d      	b.n	8007b54 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8007b18:	4b4d      	ldr	r3, [pc, #308]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8007b20:	e019      	b.n	8007b56 <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8007b22:	4b4b      	ldr	r3, [pc, #300]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8007b2a:	e014      	b.n	8007b56 <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b32:	2b0b      	cmp	r3, #11
 8007b34:	d004      	beq.n	8007b40 <RadioSetTxGenericConfig+0x210>
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b3c:	2b0c      	cmp	r3, #12
 8007b3e:	d104      	bne.n	8007b4a <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8007b40:	4b43      	ldr	r3, [pc, #268]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8007b48:	e005      	b.n	8007b56 <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8007b4a:	4b41      	ldr	r3, [pc, #260]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8007b52:	e000      	b.n	8007b56 <RadioSetTxGenericConfig+0x226>
            break;
 8007b54:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007b56:	4b3e      	ldr	r3, [pc, #248]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 8007b58:	2201      	movs	r2, #1
 8007b5a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b60:	4b3b      	ldr	r3, [pc, #236]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 8007b62:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8007b6a:	4b39      	ldr	r3, [pc, #228]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 8007b6c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007b74:	4b36      	ldr	r3, [pc, #216]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 8007b76:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8007b80:	4b33      	ldr	r3, [pc, #204]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 8007b82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8007b86:	f7ff f8b2 	bl	8006cee <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8007b8a:	2001      	movs	r0, #1
 8007b8c:	f7fe fa4a 	bl	8006024 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007b90:	4832      	ldr	r0, [pc, #200]	; (8007c5c <RadioSetTxGenericConfig+0x32c>)
 8007b92:	f000 fcef 	bl	8008574 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007b96:	4832      	ldr	r0, [pc, #200]	; (8007c60 <RadioSetTxGenericConfig+0x330>)
 8007b98:	f000 fdb8 	bl	800870c <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8007b9c:	4b2c      	ldr	r3, [pc, #176]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 8007b9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ba2:	2b06      	cmp	r3, #6
 8007ba4:	d10d      	bne.n	8007bc2 <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8007ba6:	f640 0089 	movw	r0, #2185	; 0x889
 8007baa:	f000 ff0b 	bl	80089c4 <SUBGRF_ReadRegister>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	f023 0304 	bic.w	r3, r3, #4
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	f640 0089 	movw	r0, #2185	; 0x889
 8007bbc:	f000 feee 	bl	800899c <SUBGRF_WriteRegister>
        break;
 8007bc0:	e02d      	b.n	8007c1e <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8007bc2:	f640 0089 	movw	r0, #2185	; 0x889
 8007bc6:	f000 fefd 	bl	80089c4 <SUBGRF_ReadRegister>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	f043 0304 	orr.w	r3, r3, #4
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	f640 0089 	movw	r0, #2185	; 0x889
 8007bd8:	f000 fee0 	bl	800899c <SUBGRF_WriteRegister>
        break;
 8007bdc:	e01f      	b.n	8007c1e <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d004      	beq.n	8007bf0 <RadioSetTxGenericConfig+0x2c0>
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bee:	d902      	bls.n	8007bf6 <RadioSetTxGenericConfig+0x2c6>
            return -1;
 8007bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8007bf4:	e027      	b.n	8007c46 <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 8007bf6:	2002      	movs	r0, #2
 8007bf8:	f7fe fa14 	bl	8006024 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8007bfc:	4b14      	ldr	r3, [pc, #80]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 8007bfe:	2202      	movs	r2, #2
 8007c00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c08:	4a11      	ldr	r2, [pc, #68]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 8007c0a:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8007c0c:	4b10      	ldr	r3, [pc, #64]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 8007c0e:	2216      	movs	r2, #22
 8007c10:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007c14:	4811      	ldr	r0, [pc, #68]	; (8007c5c <RadioSetTxGenericConfig+0x32c>)
 8007c16:	f000 fcad 	bl	8008574 <SUBGRF_SetModulationParams>
        break;
 8007c1a:	e000      	b.n	8007c1e <RadioSetTxGenericConfig+0x2ee>
        break;
 8007c1c:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8007c1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f000 ffd6 	bl	8008bd4 <SUBGRF_SetRfTxPower>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	4b08      	ldr	r3, [pc, #32]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 8007c2e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8007c32:	4b07      	ldr	r3, [pc, #28]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 8007c34:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f001 f99c 	bl	8008f76 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8007c3e:	4a04      	ldr	r2, [pc, #16]	; (8007c50 <RadioSetTxGenericConfig+0x320>)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6053      	str	r3, [r2, #4]
    return 0;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3728      	adds	r7, #40	; 0x28
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	20000444 	.word	0x20000444
 8007c54:	200002a0 	.word	0x200002a0
 8007c58:	2000049c 	.word	0x2000049c
 8007c5c:	2000047c 	.word	0x2000047c
 8007c60:	20000452 	.word	0x20000452

08007c64 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d002      	beq.n	8007c78 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8007c72:	4a1b      	ldr	r2, [pc, #108]	; (8007ce0 <SUBGRF_Init+0x7c>)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8007c78:	f7f8 ff76 	bl	8000b68 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8007c7c:	2002      	movs	r0, #2
 8007c7e:	f001 f875 	bl	8008d6c <Radio_SMPS_Set>

    ImageCalibrated = false;
 8007c82:	4b18      	ldr	r3, [pc, #96]	; (8007ce4 <SUBGRF_Init+0x80>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8007c88:	2000      	movs	r0, #0
 8007c8a:	f000 f979 	bl	8007f80 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8007c8e:	f001 fa2c 	bl	80090ea <RBI_IsTCXO>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d10f      	bne.n	8007cb8 <SUBGRF_Init+0x54>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8007c98:	f44f 7120 	mov.w	r1, #640	; 0x280
 8007c9c:	2001      	movs	r0, #1
 8007c9e:	f000 fb79 	bl	8008394 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	f640 1011 	movw	r0, #2321	; 0x911
 8007ca8:	f000 fe78 	bl	800899c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8007cac:	237f      	movs	r3, #127	; 0x7f
 8007cae:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8007cb0:	7b38      	ldrb	r0, [r7, #12]
 8007cb2:	f000 fa86 	bl	80081c2 <SUBGRF_Calibrate>
 8007cb6:	e009      	b.n	8007ccc <SUBGRF_Init+0x68>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8007cb8:	2120      	movs	r1, #32
 8007cba:	f640 1011 	movw	r0, #2321	; 0x911
 8007cbe:	f000 fe6d 	bl	800899c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8007cc2:	2120      	movs	r1, #32
 8007cc4:	f640 1012 	movw	r0, #2322	; 0x912
 8007cc8:	f000 fe68 	bl	800899c <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8007ccc:	f001 f9ea 	bl	80090a4 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8007cd0:	4b05      	ldr	r3, [pc, #20]	; (8007ce8 <SUBGRF_Init+0x84>)
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	701a      	strb	r2, [r3, #0]
}
 8007cd6:	bf00      	nop
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	200002b0 	.word	0x200002b0
 8007ce4:	200002ac 	.word	0x200002ac
 8007ce8:	200002a4 	.word	0x200002a4

08007cec <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8007cec:	b480      	push	{r7}
 8007cee:	af00      	add	r7, sp, #0
    return OperatingMode;
 8007cf0:	4b02      	ldr	r3, [pc, #8]	; (8007cfc <SUBGRF_GetOperatingMode+0x10>)
 8007cf2:	781b      	ldrb	r3, [r3, #0]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bc80      	pop	{r7}
 8007cfa:	4770      	bx	lr
 8007cfc:	200002a4 	.word	0x200002a4

08007d00 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8007d0c:	78fb      	ldrb	r3, [r7, #3]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	6879      	ldr	r1, [r7, #4]
 8007d12:	2000      	movs	r0, #0
 8007d14:	f000 feae 	bl	8008a74 <SUBGRF_WriteBuffer>
}
 8007d18:	bf00      	nop
 8007d1a:	3708      	adds	r7, #8
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8007d32:	f107 0317 	add.w	r3, r7, #23
 8007d36:	4619      	mov	r1, r3
 8007d38:	68b8      	ldr	r0, [r7, #8]
 8007d3a:	f000 fdb1 	bl	80088a0 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	79fa      	ldrb	r2, [r7, #7]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d201      	bcs.n	8007d4c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e007      	b.n	8007d5c <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8007d4c:	7df8      	ldrb	r0, [r7, #23]
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	461a      	mov	r2, r3
 8007d54:	68f9      	ldr	r1, [r7, #12]
 8007d56:	f000 feaf 	bl	8008ab8 <SUBGRF_ReadBuffer>

    return 0;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3718      	adds	r7, #24
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	607a      	str	r2, [r7, #4]
 8007d70:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8007d72:	7afb      	ldrb	r3, [r7, #11]
 8007d74:	4619      	mov	r1, r3
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f7ff ffc2 	bl	8007d00 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f91b 	bl	8007fb8 <SUBGRF_SetTx>
}
 8007d82:	bf00      	nop
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b082      	sub	sp, #8
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8007d92:	2208      	movs	r2, #8
 8007d94:	6879      	ldr	r1, [r7, #4]
 8007d96:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8007d9a:	f000 fe27 	bl	80089ec <SUBGRF_WriteRegisters>
    return 0;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	4603      	mov	r3, r0
 8007db0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8007db2:	88fb      	ldrh	r3, [r7, #6]
 8007db4:	0a1b      	lsrs	r3, r3, #8
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8007dbc:	88fb      	ldrh	r3, [r7, #6]
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8007dc2:	f000 fb67 	bl	8008494 <SUBGRF_GetPacketType>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d108      	bne.n	8007dde <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8007dcc:	f107 030c 	add.w	r3, r7, #12
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8007dd8:	f000 fe08 	bl	80089ec <SUBGRF_WriteRegisters>
            break;
 8007ddc:	e000      	b.n	8007de0 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8007dde:	bf00      	nop
    }
}
 8007de0:	bf00      	nop
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	4603      	mov	r3, r0
 8007df0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8007df2:	88fb      	ldrh	r3, [r7, #6]
 8007df4:	0a1b      	lsrs	r3, r3, #8
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8007dfc:	88fb      	ldrh	r3, [r7, #6]
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8007e02:	f000 fb47 	bl	8008494 <SUBGRF_GetPacketType>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d108      	bne.n	8007e1e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8007e0c:	f107 030c 	add.w	r3, r7, #12
 8007e10:	2202      	movs	r2, #2
 8007e12:	4619      	mov	r1, r3
 8007e14:	f240 60be 	movw	r0, #1726	; 0x6be
 8007e18:	f000 fde8 	bl	80089ec <SUBGRF_WriteRegisters>
            break;
 8007e1c:	e000      	b.n	8007e20 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8007e1e:	bf00      	nop
    }
}
 8007e20:	bf00      	nop
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	4603      	mov	r3, r0
 8007e30:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8007e32:	2300      	movs	r3, #0
 8007e34:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8007e36:	f000 fb2d 	bl	8008494 <SUBGRF_GetPacketType>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d121      	bne.n	8007e84 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8007e40:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8007e44:	f000 fdbe 	bl	80089c4 <SUBGRF_ReadRegister>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	f023 0301 	bic.w	r3, r3, #1
 8007e4e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8007e50:	88fb      	ldrh	r3, [r7, #6]
 8007e52:	0a1b      	lsrs	r3, r3, #8
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	b25b      	sxtb	r3, r3
 8007e58:	f003 0301 	and.w	r3, r3, #1
 8007e5c:	b25a      	sxtb	r2, r3
 8007e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	b25b      	sxtb	r3, r3
 8007e66:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8007e68:	7bfb      	ldrb	r3, [r7, #15]
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8007e70:	f000 fd94 	bl	800899c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8007e74:	88fb      	ldrh	r3, [r7, #6]
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	4619      	mov	r1, r3
 8007e7a:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8007e7e:	f000 fd8d 	bl	800899c <SUBGRF_WriteRegister>
            break;
 8007e82:	e000      	b.n	8007e86 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8007e84:	bf00      	nop
    }
}
 8007e86:	bf00      	nop
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b082      	sub	sp, #8
 8007e92:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8007e94:	2300      	movs	r3, #0
 8007e96:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8007ea0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8007ea4:	f000 fd8e 	bl	80089c4 <SUBGRF_ReadRegister>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8007eac:	79fb      	ldrb	r3, [r7, #7]
 8007eae:	f023 0301 	bic.w	r3, r3, #1
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8007eba:	f000 fd6f 	bl	800899c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8007ebe:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8007ec2:	f000 fd7f 	bl	80089c4 <SUBGRF_ReadRegister>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8007eca:	79bb      	ldrb	r3, [r7, #6]
 8007ecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8007ed8:	f000 fd60 	bl	800899c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8007edc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007ee0:	f000 f88a 	bl	8007ff8 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8007ee4:	463b      	mov	r3, r7
 8007ee6:	2204      	movs	r2, #4
 8007ee8:	4619      	mov	r1, r3
 8007eea:	f640 0019 	movw	r0, #2073	; 0x819
 8007eee:	f000 fd9f 	bl	8008a30 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8007ef2:	2000      	movs	r0, #0
 8007ef4:	f000 f844 	bl	8007f80 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8007ef8:	79fb      	ldrb	r3, [r7, #7]
 8007efa:	4619      	mov	r1, r3
 8007efc:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8007f00:	f000 fd4c 	bl	800899c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8007f04:	79bb      	ldrb	r3, [r7, #6]
 8007f06:	4619      	mov	r1, r3
 8007f08:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8007f0c:	f000 fd46 	bl	800899c <SUBGRF_WriteRegister>

    return number;
 8007f10:	683b      	ldr	r3, [r7, #0]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
	...

08007f1c <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8007f24:	2000      	movs	r0, #0
 8007f26:	f001 f8c8 	bl	80090ba <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8007f2a:	2002      	movs	r0, #2
 8007f2c:	f000 ff1e 	bl	8008d6c <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8007f30:	793b      	ldrb	r3, [r7, #4]
 8007f32:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8007f3c:	793b      	ldrb	r3, [r7, #4]
 8007f3e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8007f46:	b25b      	sxtb	r3, r3
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8007f4c:	793b      	ldrb	r3, [r7, #4]
 8007f4e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8007f56:	4313      	orrs	r3, r2
 8007f58:	b25b      	sxtb	r3, r3
 8007f5a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8007f5c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8007f5e:	f107 030f 	add.w	r3, r7, #15
 8007f62:	2201      	movs	r2, #1
 8007f64:	4619      	mov	r1, r3
 8007f66:	2084      	movs	r0, #132	; 0x84
 8007f68:	f000 fdc8 	bl	8008afc <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8007f6c:	4b03      	ldr	r3, [pc, #12]	; (8007f7c <SUBGRF_SetSleep+0x60>)
 8007f6e:	2200      	movs	r2, #0
 8007f70:	701a      	strb	r2, [r3, #0]
}
 8007f72:	bf00      	nop
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	200002a4 	.word	0x200002a4

08007f80 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	4603      	mov	r3, r0
 8007f88:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8007f8a:	1dfb      	adds	r3, r7, #7
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	4619      	mov	r1, r3
 8007f90:	2080      	movs	r0, #128	; 0x80
 8007f92:	f000 fdb3 	bl	8008afc <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8007f96:	79fb      	ldrb	r3, [r7, #7]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d103      	bne.n	8007fa4 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8007f9c:	4b05      	ldr	r3, [pc, #20]	; (8007fb4 <SUBGRF_SetStandby+0x34>)
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8007fa2:	e002      	b.n	8007faa <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8007fa4:	4b03      	ldr	r3, [pc, #12]	; (8007fb4 <SUBGRF_SetStandby+0x34>)
 8007fa6:	2202      	movs	r2, #2
 8007fa8:	701a      	strb	r2, [r3, #0]
}
 8007faa:	bf00      	nop
 8007fac:	3708      	adds	r7, #8
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	200002a4 	.word	0x200002a4

08007fb8 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8007fc0:	4b0c      	ldr	r3, [pc, #48]	; (8007ff4 <SUBGRF_SetTx+0x3c>)
 8007fc2:	2204      	movs	r2, #4
 8007fc4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	0c1b      	lsrs	r3, r3, #16
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	0a1b      	lsrs	r3, r3, #8
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8007fdc:	f107 030c 	add.w	r3, r7, #12
 8007fe0:	2203      	movs	r2, #3
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	2083      	movs	r0, #131	; 0x83
 8007fe6:	f000 fd89 	bl	8008afc <SUBGRF_WriteCommand>
}
 8007fea:	bf00      	nop
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	200002a4 	.word	0x200002a4

08007ff8 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8008000:	4b0c      	ldr	r3, [pc, #48]	; (8008034 <SUBGRF_SetRx+0x3c>)
 8008002:	2205      	movs	r2, #5
 8008004:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	0c1b      	lsrs	r3, r3, #16
 800800a:	b2db      	uxtb	r3, r3
 800800c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	0a1b      	lsrs	r3, r3, #8
 8008012:	b2db      	uxtb	r3, r3
 8008014:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	b2db      	uxtb	r3, r3
 800801a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800801c:	f107 030c 	add.w	r3, r7, #12
 8008020:	2203      	movs	r2, #3
 8008022:	4619      	mov	r1, r3
 8008024:	2082      	movs	r0, #130	; 0x82
 8008026:	f000 fd69 	bl	8008afc <SUBGRF_WriteCommand>
}
 800802a:	bf00      	nop
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	200002a4 	.word	0x200002a4

08008038 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8008040:	4b0e      	ldr	r3, [pc, #56]	; (800807c <SUBGRF_SetRxBoosted+0x44>)
 8008042:	2205      	movs	r2, #5
 8008044:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8008046:	2197      	movs	r1, #151	; 0x97
 8008048:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800804c:	f000 fca6 	bl	800899c <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	0c1b      	lsrs	r3, r3, #16
 8008054:	b2db      	uxtb	r3, r3
 8008056:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	0a1b      	lsrs	r3, r3, #8
 800805c:	b2db      	uxtb	r3, r3
 800805e:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	b2db      	uxtb	r3, r3
 8008064:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8008066:	f107 030c 	add.w	r3, r7, #12
 800806a:	2203      	movs	r2, #3
 800806c:	4619      	mov	r1, r3
 800806e:	2082      	movs	r0, #130	; 0x82
 8008070:	f000 fd44 	bl	8008afc <SUBGRF_WriteCommand>
}
 8008074:	bf00      	nop
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	200002a4 	.word	0x200002a4

08008080 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	0c1b      	lsrs	r3, r3, #16
 800808e:	b2db      	uxtb	r3, r3
 8008090:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	0a1b      	lsrs	r3, r3, #8
 8008096:	b2db      	uxtb	r3, r3
 8008098:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	b2db      	uxtb	r3, r3
 800809e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	0c1b      	lsrs	r3, r3, #16
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	0a1b      	lsrs	r3, r3, #8
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80080b6:	f107 0308 	add.w	r3, r7, #8
 80080ba:	2206      	movs	r2, #6
 80080bc:	4619      	mov	r1, r3
 80080be:	2094      	movs	r0, #148	; 0x94
 80080c0:	f000 fd1c 	bl	8008afc <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80080c4:	4b03      	ldr	r3, [pc, #12]	; (80080d4 <SUBGRF_SetRxDutyCycle+0x54>)
 80080c6:	2206      	movs	r2, #6
 80080c8:	701a      	strb	r2, [r3, #0]
}
 80080ca:	bf00      	nop
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	200002a4 	.word	0x200002a4

080080d8 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80080dc:	2200      	movs	r2, #0
 80080de:	2100      	movs	r1, #0
 80080e0:	20c5      	movs	r0, #197	; 0xc5
 80080e2:	f000 fd0b 	bl	8008afc <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80080e6:	4b02      	ldr	r3, [pc, #8]	; (80080f0 <SUBGRF_SetCad+0x18>)
 80080e8:	2207      	movs	r2, #7
 80080ea:	701a      	strb	r2, [r3, #0]
}
 80080ec:	bf00      	nop
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	200002a4 	.word	0x200002a4

080080f4 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80080f8:	2200      	movs	r2, #0
 80080fa:	2100      	movs	r1, #0
 80080fc:	20d1      	movs	r0, #209	; 0xd1
 80080fe:	f000 fcfd 	bl	8008afc <SUBGRF_WriteCommand>
}
 8008102:	bf00      	nop
 8008104:	bd80      	pop	{r7, pc}

08008106 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8008106:	b580      	push	{r7, lr}
 8008108:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800810a:	2200      	movs	r2, #0
 800810c:	2100      	movs	r1, #0
 800810e:	20d2      	movs	r0, #210	; 0xd2
 8008110:	f000 fcf4 	bl	8008afc <SUBGRF_WriteCommand>
}
 8008114:	bf00      	nop
 8008116:	bd80      	pop	{r7, pc}

08008118 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	4603      	mov	r3, r0
 8008120:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8008122:	1dfb      	adds	r3, r7, #7
 8008124:	2201      	movs	r2, #1
 8008126:	4619      	mov	r1, r3
 8008128:	209f      	movs	r0, #159	; 0x9f
 800812a:	f000 fce7 	bl	8008afc <SUBGRF_WriteCommand>
}
 800812e:	bf00      	nop
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b084      	sub	sp, #16
 800813a:	af00      	add	r7, sp, #0
 800813c:	4603      	mov	r3, r0
 800813e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8008140:	1dfb      	adds	r3, r7, #7
 8008142:	2201      	movs	r2, #1
 8008144:	4619      	mov	r1, r3
 8008146:	20a0      	movs	r0, #160	; 0xa0
 8008148:	f000 fcd8 	bl	8008afc <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800814c:	79fb      	ldrb	r3, [r7, #7]
 800814e:	2b3f      	cmp	r3, #63	; 0x3f
 8008150:	d91c      	bls.n	800818c <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8008152:	79fb      	ldrb	r3, [r7, #7]
 8008154:	085b      	lsrs	r3, r3, #1
 8008156:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8008158:	2300      	movs	r3, #0
 800815a:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800815c:	2300      	movs	r3, #0
 800815e:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8008160:	e005      	b.n	800816e <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8008162:	7bfb      	ldrb	r3, [r7, #15]
 8008164:	089b      	lsrs	r3, r3, #2
 8008166:	73fb      	strb	r3, [r7, #15]
            exp++;
 8008168:	7bbb      	ldrb	r3, [r7, #14]
 800816a:	3301      	adds	r3, #1
 800816c:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800816e:	7bfb      	ldrb	r3, [r7, #15]
 8008170:	2b1f      	cmp	r3, #31
 8008172:	d8f6      	bhi.n	8008162 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8008174:	7bfb      	ldrb	r3, [r7, #15]
 8008176:	00db      	lsls	r3, r3, #3
 8008178:	b2da      	uxtb	r2, r3
 800817a:	7bbb      	ldrb	r3, [r7, #14]
 800817c:	4413      	add	r3, r2
 800817e:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8008180:	7b7b      	ldrb	r3, [r7, #13]
 8008182:	4619      	mov	r1, r3
 8008184:	f240 7006 	movw	r0, #1798	; 0x706
 8008188:	f000 fc08 	bl	800899c <SUBGRF_WriteRegister>
    }
}
 800818c:	bf00      	nop
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800819a:	f000 ffb1 	bl	8009100 <RBI_IsDCDC>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d102      	bne.n	80081aa <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 80081a4:	2301      	movs	r3, #1
 80081a6:	71fb      	strb	r3, [r7, #7]
 80081a8:	e001      	b.n	80081ae <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 80081aa:	2300      	movs	r3, #0
 80081ac:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80081ae:	1dfb      	adds	r3, r7, #7
 80081b0:	2201      	movs	r2, #1
 80081b2:	4619      	mov	r1, r3
 80081b4:	2096      	movs	r0, #150	; 0x96
 80081b6:	f000 fca1 	bl	8008afc <SUBGRF_WriteCommand>
}
 80081ba:	bf00      	nop
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b084      	sub	sp, #16
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80081ca:	793b      	ldrb	r3, [r7, #4]
 80081cc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	019b      	lsls	r3, r3, #6
 80081d4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80081d6:	793b      	ldrb	r3, [r7, #4]
 80081d8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80081e0:	b25b      	sxtb	r3, r3
 80081e2:	4313      	orrs	r3, r2
 80081e4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80081e6:	793b      	ldrb	r3, [r7, #4]
 80081e8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80081f0:	b25b      	sxtb	r3, r3
 80081f2:	4313      	orrs	r3, r2
 80081f4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80081f6:	793b      	ldrb	r3, [r7, #4]
 80081f8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8008200:	b25b      	sxtb	r3, r3
 8008202:	4313      	orrs	r3, r2
 8008204:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8008206:	793b      	ldrb	r3, [r7, #4]
 8008208:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800820c:	b2db      	uxtb	r3, r3
 800820e:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8008210:	b25b      	sxtb	r3, r3
 8008212:	4313      	orrs	r3, r2
 8008214:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8008216:	793b      	ldrb	r3, [r7, #4]
 8008218:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800821c:	b2db      	uxtb	r3, r3
 800821e:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8008220:	b25b      	sxtb	r3, r3
 8008222:	4313      	orrs	r3, r2
 8008224:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8008226:	793b      	ldrb	r3, [r7, #4]
 8008228:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800822c:	b2db      	uxtb	r3, r3
 800822e:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8008230:	4313      	orrs	r3, r2
 8008232:	b25b      	sxtb	r3, r3
 8008234:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8008236:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8008238:	f107 030f 	add.w	r3, r7, #15
 800823c:	2201      	movs	r2, #1
 800823e:	4619      	mov	r1, r3
 8008240:	2089      	movs	r0, #137	; 0x89
 8008242:	f000 fc5b 	bl	8008afc <SUBGRF_WriteCommand>
}
 8008246:	bf00      	nop
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
	...

08008250 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a1b      	ldr	r2, [pc, #108]	; (80082c8 <SUBGRF_CalibrateImage+0x78>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d904      	bls.n	800826a <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8008260:	23e1      	movs	r3, #225	; 0xe1
 8008262:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8008264:	23e9      	movs	r3, #233	; 0xe9
 8008266:	737b      	strb	r3, [r7, #13]
 8008268:	e022      	b.n	80082b0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a17      	ldr	r2, [pc, #92]	; (80082cc <SUBGRF_CalibrateImage+0x7c>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d904      	bls.n	800827c <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8008272:	23d7      	movs	r3, #215	; 0xd7
 8008274:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8008276:	23db      	movs	r3, #219	; 0xdb
 8008278:	737b      	strb	r3, [r7, #13]
 800827a:	e019      	b.n	80082b0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4a14      	ldr	r2, [pc, #80]	; (80082d0 <SUBGRF_CalibrateImage+0x80>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d904      	bls.n	800828e <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8008284:	23c1      	movs	r3, #193	; 0xc1
 8008286:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8008288:	23c5      	movs	r3, #197	; 0xc5
 800828a:	737b      	strb	r3, [r7, #13]
 800828c:	e010      	b.n	80082b0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a10      	ldr	r2, [pc, #64]	; (80082d4 <SUBGRF_CalibrateImage+0x84>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d904      	bls.n	80082a0 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8008296:	2375      	movs	r3, #117	; 0x75
 8008298:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800829a:	2381      	movs	r3, #129	; 0x81
 800829c:	737b      	strb	r3, [r7, #13]
 800829e:	e007      	b.n	80082b0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	4a0d      	ldr	r2, [pc, #52]	; (80082d8 <SUBGRF_CalibrateImage+0x88>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d903      	bls.n	80082b0 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 80082a8:	236b      	movs	r3, #107	; 0x6b
 80082aa:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80082ac:	236f      	movs	r3, #111	; 0x6f
 80082ae:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80082b0:	f107 030c 	add.w	r3, r7, #12
 80082b4:	2202      	movs	r2, #2
 80082b6:	4619      	mov	r1, r3
 80082b8:	2098      	movs	r0, #152	; 0x98
 80082ba:	f000 fc1f 	bl	8008afc <SUBGRF_WriteCommand>
}
 80082be:	bf00      	nop
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	35a4e900 	.word	0x35a4e900
 80082cc:	32a9f880 	.word	0x32a9f880
 80082d0:	2de54480 	.word	0x2de54480
 80082d4:	1b6b0b00 	.word	0x1b6b0b00
 80082d8:	1954fc40 	.word	0x1954fc40

080082dc <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80082dc:	b590      	push	{r4, r7, lr}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	4604      	mov	r4, r0
 80082e4:	4608      	mov	r0, r1
 80082e6:	4611      	mov	r1, r2
 80082e8:	461a      	mov	r2, r3
 80082ea:	4623      	mov	r3, r4
 80082ec:	71fb      	strb	r3, [r7, #7]
 80082ee:	4603      	mov	r3, r0
 80082f0:	71bb      	strb	r3, [r7, #6]
 80082f2:	460b      	mov	r3, r1
 80082f4:	717b      	strb	r3, [r7, #5]
 80082f6:	4613      	mov	r3, r2
 80082f8:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 80082fa:	79fb      	ldrb	r3, [r7, #7]
 80082fc:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 80082fe:	79bb      	ldrb	r3, [r7, #6]
 8008300:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8008302:	797b      	ldrb	r3, [r7, #5]
 8008304:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8008306:	793b      	ldrb	r3, [r7, #4]
 8008308:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800830a:	f107 030c 	add.w	r3, r7, #12
 800830e:	2204      	movs	r2, #4
 8008310:	4619      	mov	r1, r3
 8008312:	2095      	movs	r0, #149	; 0x95
 8008314:	f000 fbf2 	bl	8008afc <SUBGRF_WriteCommand>
}
 8008318:	bf00      	nop
 800831a:	3714      	adds	r7, #20
 800831c:	46bd      	mov	sp, r7
 800831e:	bd90      	pop	{r4, r7, pc}

08008320 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8008320:	b590      	push	{r4, r7, lr}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	4604      	mov	r4, r0
 8008328:	4608      	mov	r0, r1
 800832a:	4611      	mov	r1, r2
 800832c:	461a      	mov	r2, r3
 800832e:	4623      	mov	r3, r4
 8008330:	80fb      	strh	r3, [r7, #6]
 8008332:	4603      	mov	r3, r0
 8008334:	80bb      	strh	r3, [r7, #4]
 8008336:	460b      	mov	r3, r1
 8008338:	807b      	strh	r3, [r7, #2]
 800833a:	4613      	mov	r3, r2
 800833c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800833e:	88fb      	ldrh	r3, [r7, #6]
 8008340:	0a1b      	lsrs	r3, r3, #8
 8008342:	b29b      	uxth	r3, r3
 8008344:	b2db      	uxtb	r3, r3
 8008346:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8008348:	88fb      	ldrh	r3, [r7, #6]
 800834a:	b2db      	uxtb	r3, r3
 800834c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800834e:	88bb      	ldrh	r3, [r7, #4]
 8008350:	0a1b      	lsrs	r3, r3, #8
 8008352:	b29b      	uxth	r3, r3
 8008354:	b2db      	uxtb	r3, r3
 8008356:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8008358:	88bb      	ldrh	r3, [r7, #4]
 800835a:	b2db      	uxtb	r3, r3
 800835c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800835e:	887b      	ldrh	r3, [r7, #2]
 8008360:	0a1b      	lsrs	r3, r3, #8
 8008362:	b29b      	uxth	r3, r3
 8008364:	b2db      	uxtb	r3, r3
 8008366:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8008368:	887b      	ldrh	r3, [r7, #2]
 800836a:	b2db      	uxtb	r3, r3
 800836c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800836e:	883b      	ldrh	r3, [r7, #0]
 8008370:	0a1b      	lsrs	r3, r3, #8
 8008372:	b29b      	uxth	r3, r3
 8008374:	b2db      	uxtb	r3, r3
 8008376:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8008378:	883b      	ldrh	r3, [r7, #0]
 800837a:	b2db      	uxtb	r3, r3
 800837c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800837e:	f107 0308 	add.w	r3, r7, #8
 8008382:	2208      	movs	r2, #8
 8008384:	4619      	mov	r1, r3
 8008386:	2008      	movs	r0, #8
 8008388:	f000 fbb8 	bl	8008afc <SUBGRF_WriteCommand>
}
 800838c:	bf00      	nop
 800838e:	3714      	adds	r7, #20
 8008390:	46bd      	mov	sp, r7
 8008392:	bd90      	pop	{r4, r7, pc}

08008394 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	4603      	mov	r3, r0
 800839c:	6039      	str	r1, [r7, #0]
 800839e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80083a0:	79fb      	ldrb	r3, [r7, #7]
 80083a2:	f003 0307 	and.w	r3, r3, #7
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	0c1b      	lsrs	r3, r3, #16
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	0a1b      	lsrs	r3, r3, #8
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80083c0:	f107 030c 	add.w	r3, r7, #12
 80083c4:	2204      	movs	r2, #4
 80083c6:	4619      	mov	r1, r3
 80083c8:	2097      	movs	r0, #151	; 0x97
 80083ca:	f000 fb97 	bl	8008afc <SUBGRF_WriteCommand>
}
 80083ce:	bf00      	nop
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
	...

080083d8 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80083d8:	b5b0      	push	{r4, r5, r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 80083e0:	2300      	movs	r3, #0
 80083e2:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 80083e4:	4b1b      	ldr	r3, [pc, #108]	; (8008454 <SUBGRF_SetRfFrequency+0x7c>)
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	f083 0301 	eor.w	r3, r3, #1
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d005      	beq.n	80083fe <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f7ff ff2c 	bl	8008250 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80083f8:	4b16      	ldr	r3, [pc, #88]	; (8008454 <SUBGRF_SetRfFrequency+0x7c>)
 80083fa:	2201      	movs	r2, #1
 80083fc:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	461a      	mov	r2, r3
 8008402:	f04f 0300 	mov.w	r3, #0
 8008406:	09d5      	lsrs	r5, r2, #7
 8008408:	0654      	lsls	r4, r2, #25
 800840a:	4a13      	ldr	r2, [pc, #76]	; (8008458 <SUBGRF_SetRfFrequency+0x80>)
 800840c:	f04f 0300 	mov.w	r3, #0
 8008410:	4620      	mov	r0, r4
 8008412:	4629      	mov	r1, r5
 8008414:	f7f7 ff04 	bl	8000220 <__aeabi_uldivmod>
 8008418:	4602      	mov	r2, r0
 800841a:	460b      	mov	r3, r1
 800841c:	4613      	mov	r3, r2
 800841e:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	0e1b      	lsrs	r3, r3, #24
 8008424:	b2db      	uxtb	r3, r3
 8008426:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	0c1b      	lsrs	r3, r3, #16
 800842c:	b2db      	uxtb	r3, r3
 800842e:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	0a1b      	lsrs	r3, r3, #8
 8008434:	b2db      	uxtb	r3, r3
 8008436:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	b2db      	uxtb	r3, r3
 800843c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800843e:	f107 0308 	add.w	r3, r7, #8
 8008442:	2204      	movs	r2, #4
 8008444:	4619      	mov	r1, r3
 8008446:	2086      	movs	r0, #134	; 0x86
 8008448:	f000 fb58 	bl	8008afc <SUBGRF_WriteCommand>
}
 800844c:	bf00      	nop
 800844e:	3710      	adds	r7, #16
 8008450:	46bd      	mov	sp, r7
 8008452:	bdb0      	pop	{r4, r5, r7, pc}
 8008454:	200002ac 	.word	0x200002ac
 8008458:	01e84800 	.word	0x01e84800

0800845c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	4603      	mov	r3, r0
 8008464:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8008466:	79fa      	ldrb	r2, [r7, #7]
 8008468:	4b09      	ldr	r3, [pc, #36]	; (8008490 <SUBGRF_SetPacketType+0x34>)
 800846a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800846c:	79fb      	ldrb	r3, [r7, #7]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d104      	bne.n	800847c <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8008472:	2100      	movs	r1, #0
 8008474:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8008478:	f000 fa90 	bl	800899c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800847c:	1dfb      	adds	r3, r7, #7
 800847e:	2201      	movs	r2, #1
 8008480:	4619      	mov	r1, r3
 8008482:	208a      	movs	r0, #138	; 0x8a
 8008484:	f000 fb3a 	bl	8008afc <SUBGRF_WriteCommand>
}
 8008488:	bf00      	nop
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	200002a5 	.word	0x200002a5

08008494 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8008494:	b480      	push	{r7}
 8008496:	af00      	add	r7, sp, #0
    return PacketType;
 8008498:	4b02      	ldr	r3, [pc, #8]	; (80084a4 <SUBGRF_GetPacketType+0x10>)
 800849a:	781b      	ldrb	r3, [r3, #0]
}
 800849c:	4618      	mov	r0, r3
 800849e:	46bd      	mov	sp, r7
 80084a0:	bc80      	pop	{r7}
 80084a2:	4770      	bx	lr
 80084a4:	200002a5 	.word	0x200002a5

080084a8 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	4603      	mov	r3, r0
 80084b0:	71fb      	strb	r3, [r7, #7]
 80084b2:	460b      	mov	r3, r1
 80084b4:	71bb      	strb	r3, [r7, #6]
 80084b6:	4613      	mov	r3, r2
 80084b8:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 80084ba:	79fb      	ldrb	r3, [r7, #7]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d124      	bne.n	800850a <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 80084c0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80084c4:	2b0f      	cmp	r3, #15
 80084c6:	d106      	bne.n	80084d6 <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 80084c8:	2301      	movs	r3, #1
 80084ca:	2201      	movs	r2, #1
 80084cc:	2100      	movs	r1, #0
 80084ce:	2006      	movs	r0, #6
 80084d0:	f7ff ff04 	bl	80082dc <SUBGRF_SetPaConfig>
 80084d4:	e005      	b.n	80084e2 <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 80084d6:	2301      	movs	r3, #1
 80084d8:	2201      	movs	r2, #1
 80084da:	2100      	movs	r1, #0
 80084dc:	2004      	movs	r0, #4
 80084de:	f7ff fefd 	bl	80082dc <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 80084e2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80084e6:	2b0d      	cmp	r3, #13
 80084e8:	dd02      	ble.n	80084f0 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 80084ea:	230e      	movs	r3, #14
 80084ec:	71bb      	strb	r3, [r7, #6]
 80084ee:	e006      	b.n	80084fe <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 80084f0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80084f4:	f113 0f11 	cmn.w	r3, #17
 80084f8:	da01      	bge.n	80084fe <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 80084fa:	23ef      	movs	r3, #239	; 0xef
 80084fc:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 80084fe:	2118      	movs	r1, #24
 8008500:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8008504:	f000 fa4a 	bl	800899c <SUBGRF_WriteRegister>
 8008508:	e025      	b.n	8008556 <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 800850a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800850e:	f000 fa59 	bl	80089c4 <SUBGRF_ReadRegister>
 8008512:	4603      	mov	r3, r0
 8008514:	f043 031e 	orr.w	r3, r3, #30
 8008518:	b2db      	uxtb	r3, r3
 800851a:	4619      	mov	r1, r3
 800851c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8008520:	f000 fa3c 	bl	800899c <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 8008524:	2301      	movs	r3, #1
 8008526:	2200      	movs	r2, #0
 8008528:	2107      	movs	r1, #7
 800852a:	2004      	movs	r0, #4
 800852c:	f7ff fed6 	bl	80082dc <SUBGRF_SetPaConfig>
        if( power > 22 )
 8008530:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008534:	2b16      	cmp	r3, #22
 8008536:	dd02      	ble.n	800853e <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 8008538:	2316      	movs	r3, #22
 800853a:	71bb      	strb	r3, [r7, #6]
 800853c:	e006      	b.n	800854c <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 800853e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008542:	f113 0f09 	cmn.w	r3, #9
 8008546:	da01      	bge.n	800854c <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 8008548:	23f7      	movs	r3, #247	; 0xf7
 800854a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 800854c:	2138      	movs	r1, #56	; 0x38
 800854e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8008552:	f000 fa23 	bl	800899c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8008556:	79bb      	ldrb	r3, [r7, #6]
 8008558:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 800855a:	797b      	ldrb	r3, [r7, #5]
 800855c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 800855e:	f107 030c 	add.w	r3, r7, #12
 8008562:	2202      	movs	r2, #2
 8008564:	4619      	mov	r1, r3
 8008566:	208e      	movs	r0, #142	; 0x8e
 8008568:	f000 fac8 	bl	8008afc <SUBGRF_WriteCommand>
}
 800856c:	bf00      	nop
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8008574:	b5b0      	push	{r4, r5, r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800857c:	2300      	movs	r3, #0
 800857e:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8008580:	4a5e      	ldr	r2, [pc, #376]	; (80086fc <SUBGRF_SetModulationParams+0x188>)
 8008582:	f107 0308 	add.w	r3, r7, #8
 8008586:	e892 0003 	ldmia.w	r2, {r0, r1}
 800858a:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	781a      	ldrb	r2, [r3, #0]
 8008592:	4b5b      	ldr	r3, [pc, #364]	; (8008700 <SUBGRF_SetModulationParams+0x18c>)
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	429a      	cmp	r2, r3
 8008598:	d004      	beq.n	80085a4 <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	4618      	mov	r0, r3
 80085a0:	f7ff ff5c 	bl	800845c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	2b03      	cmp	r3, #3
 80085aa:	f200 80a2 	bhi.w	80086f2 <SUBGRF_SetModulationParams+0x17e>
 80085ae:	a201      	add	r2, pc, #4	; (adr r2, 80085b4 <SUBGRF_SetModulationParams+0x40>)
 80085b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b4:	080085c5 	.word	0x080085c5
 80085b8:	08008681 	.word	0x08008681
 80085bc:	08008643 	.word	0x08008643
 80085c0:	080086af 	.word	0x080086af
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80085c4:	2308      	movs	r3, #8
 80085c6:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	4a4d      	ldr	r2, [pc, #308]	; (8008704 <SUBGRF_SetModulationParams+0x190>)
 80085ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80085d2:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	0c1b      	lsrs	r3, r3, #16
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	0a1b      	lsrs	r3, r3, #8
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	7b1b      	ldrb	r3, [r3, #12]
 80085ee:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	7b5b      	ldrb	r3, [r3, #13]
 80085f4:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	461a      	mov	r2, r3
 80085fc:	f04f 0300 	mov.w	r3, #0
 8008600:	09d5      	lsrs	r5, r2, #7
 8008602:	0654      	lsls	r4, r2, #25
 8008604:	4a40      	ldr	r2, [pc, #256]	; (8008708 <SUBGRF_SetModulationParams+0x194>)
 8008606:	f04f 0300 	mov.w	r3, #0
 800860a:	4620      	mov	r0, r4
 800860c:	4629      	mov	r1, r5
 800860e:	f7f7 fe07 	bl	8000220 <__aeabi_uldivmod>
 8008612:	4602      	mov	r2, r0
 8008614:	460b      	mov	r3, r1
 8008616:	4613      	mov	r3, r2
 8008618:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	0c1b      	lsrs	r3, r3, #16
 800861e:	b2db      	uxtb	r3, r3
 8008620:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	0a1b      	lsrs	r3, r3, #8
 8008626:	b2db      	uxtb	r3, r3
 8008628:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	b2db      	uxtb	r3, r3
 800862e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8008630:	7cfb      	ldrb	r3, [r7, #19]
 8008632:	b29a      	uxth	r2, r3
 8008634:	f107 0308 	add.w	r3, r7, #8
 8008638:	4619      	mov	r1, r3
 800863a:	208b      	movs	r0, #139	; 0x8b
 800863c:	f000 fa5e 	bl	8008afc <SUBGRF_WriteCommand>
        break;
 8008640:	e058      	b.n	80086f4 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 8008642:	2304      	movs	r3, #4
 8008644:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	4a2e      	ldr	r2, [pc, #184]	; (8008704 <SUBGRF_SetModulationParams+0x190>)
 800864c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008650:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	0c1b      	lsrs	r3, r3, #16
 8008656:	b2db      	uxtb	r3, r3
 8008658:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	0a1b      	lsrs	r3, r3, #8
 800865e:	b2db      	uxtb	r3, r3
 8008660:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	b2db      	uxtb	r3, r3
 8008666:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	7d1b      	ldrb	r3, [r3, #20]
 800866c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800866e:	7cfb      	ldrb	r3, [r7, #19]
 8008670:	b29a      	uxth	r2, r3
 8008672:	f107 0308 	add.w	r3, r7, #8
 8008676:	4619      	mov	r1, r3
 8008678:	208b      	movs	r0, #139	; 0x8b
 800867a:	f000 fa3f 	bl	8008afc <SUBGRF_WriteCommand>
        break;
 800867e:	e039      	b.n	80086f4 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 8008680:	2304      	movs	r3, #4
 8008682:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	7e1b      	ldrb	r3, [r3, #24]
 8008688:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	7e5b      	ldrb	r3, [r3, #25]
 800868e:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	7e9b      	ldrb	r3, [r3, #26]
 8008694:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	7edb      	ldrb	r3, [r3, #27]
 800869a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800869c:	7cfb      	ldrb	r3, [r7, #19]
 800869e:	b29a      	uxth	r2, r3
 80086a0:	f107 0308 	add.w	r3, r7, #8
 80086a4:	4619      	mov	r1, r3
 80086a6:	208b      	movs	r0, #139	; 0x8b
 80086a8:	f000 fa28 	bl	8008afc <SUBGRF_WriteCommand>

        break;
 80086ac:	e022      	b.n	80086f4 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 80086ae:	2305      	movs	r3, #5
 80086b0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	4a13      	ldr	r2, [pc, #76]	; (8008704 <SUBGRF_SetModulationParams+0x190>)
 80086b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80086bc:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	0c1b      	lsrs	r3, r3, #16
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	0a1b      	lsrs	r3, r3, #8
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	7b1b      	ldrb	r3, [r3, #12]
 80086d8:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	7b5b      	ldrb	r3, [r3, #13]
 80086de:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80086e0:	7cfb      	ldrb	r3, [r7, #19]
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	f107 0308 	add.w	r3, r7, #8
 80086e8:	4619      	mov	r1, r3
 80086ea:	208b      	movs	r0, #139	; 0x8b
 80086ec:	f000 fa06 	bl	8008afc <SUBGRF_WriteCommand>
        break;
 80086f0:	e000      	b.n	80086f4 <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 80086f2:	bf00      	nop
    }
}
 80086f4:	bf00      	nop
 80086f6:	3718      	adds	r7, #24
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bdb0      	pop	{r4, r5, r7, pc}
 80086fc:	0800a0bc 	.word	0x0800a0bc
 8008700:	200002a5 	.word	0x200002a5
 8008704:	3d090000 	.word	0x3d090000
 8008708:	01e84800 	.word	0x01e84800

0800870c <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b086      	sub	sp, #24
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8008714:	2300      	movs	r3, #0
 8008716:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8008718:	4a48      	ldr	r2, [pc, #288]	; (800883c <SUBGRF_SetPacketParams+0x130>)
 800871a:	f107 030c 	add.w	r3, r7, #12
 800871e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008720:	c303      	stmia	r3!, {r0, r1}
 8008722:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	781a      	ldrb	r2, [r3, #0]
 8008728:	4b45      	ldr	r3, [pc, #276]	; (8008840 <SUBGRF_SetPacketParams+0x134>)
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	429a      	cmp	r2, r3
 800872e:	d004      	beq.n	800873a <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	4618      	mov	r0, r3
 8008736:	f7ff fe91 	bl	800845c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	2b03      	cmp	r3, #3
 8008740:	d878      	bhi.n	8008834 <SUBGRF_SetPacketParams+0x128>
 8008742:	a201      	add	r2, pc, #4	; (adr r2, 8008748 <SUBGRF_SetPacketParams+0x3c>)
 8008744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008748:	08008759 	.word	0x08008759
 800874c:	080087e9 	.word	0x080087e9
 8008750:	080087dd 	.word	0x080087dd
 8008754:	08008759 	.word	0x08008759
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	7a5b      	ldrb	r3, [r3, #9]
 800875c:	2bf1      	cmp	r3, #241	; 0xf1
 800875e:	d10a      	bne.n	8008776 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8008760:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008764:	f7ff fb20 	bl	8007da8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8008768:	f248 0005 	movw	r0, #32773	; 0x8005
 800876c:	f7ff fb3c 	bl	8007de8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8008770:	2302      	movs	r3, #2
 8008772:	75bb      	strb	r3, [r7, #22]
 8008774:	e011      	b.n	800879a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	7a5b      	ldrb	r3, [r3, #9]
 800877a:	2bf2      	cmp	r3, #242	; 0xf2
 800877c:	d10a      	bne.n	8008794 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800877e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8008782:	f7ff fb11 	bl	8007da8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8008786:	f241 0021 	movw	r0, #4129	; 0x1021
 800878a:	f7ff fb2d 	bl	8007de8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800878e:	2306      	movs	r3, #6
 8008790:	75bb      	strb	r3, [r7, #22]
 8008792:	e002      	b.n	800879a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	7a5b      	ldrb	r3, [r3, #9]
 8008798:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800879a:	2309      	movs	r3, #9
 800879c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	885b      	ldrh	r3, [r3, #2]
 80087a2:	0a1b      	lsrs	r3, r3, #8
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	885b      	ldrh	r3, [r3, #2]
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	791b      	ldrb	r3, [r3, #4]
 80087b6:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	795b      	ldrb	r3, [r3, #5]
 80087bc:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	799b      	ldrb	r3, [r3, #6]
 80087c2:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	79db      	ldrb	r3, [r3, #7]
 80087c8:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	7a1b      	ldrb	r3, [r3, #8]
 80087ce:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 80087d0:	7dbb      	ldrb	r3, [r7, #22]
 80087d2:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	7a9b      	ldrb	r3, [r3, #10]
 80087d8:	753b      	strb	r3, [r7, #20]
        break;
 80087da:	e022      	b.n	8008822 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 80087dc:	2301      	movs	r3, #1
 80087de:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	7b1b      	ldrb	r3, [r3, #12]
 80087e4:	733b      	strb	r3, [r7, #12]
        break;
 80087e6:	e01c      	b.n	8008822 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 80087e8:	2306      	movs	r3, #6
 80087ea:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	89db      	ldrh	r3, [r3, #14]
 80087f0:	0a1b      	lsrs	r3, r3, #8
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	89db      	ldrh	r3, [r3, #14]
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	7c1a      	ldrb	r2, [r3, #16]
 8008804:	4b0f      	ldr	r3, [pc, #60]	; (8008844 <SUBGRF_SetPacketParams+0x138>)
 8008806:	4611      	mov	r1, r2
 8008808:	7019      	strb	r1, [r3, #0]
 800880a:	4613      	mov	r3, r2
 800880c:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	7c5b      	ldrb	r3, [r3, #17]
 8008812:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	7c9b      	ldrb	r3, [r3, #18]
 8008818:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	7cdb      	ldrb	r3, [r3, #19]
 800881e:	747b      	strb	r3, [r7, #17]
        break;
 8008820:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8008822:	7dfb      	ldrb	r3, [r7, #23]
 8008824:	b29a      	uxth	r2, r3
 8008826:	f107 030c 	add.w	r3, r7, #12
 800882a:	4619      	mov	r1, r3
 800882c:	208c      	movs	r0, #140	; 0x8c
 800882e:	f000 f965 	bl	8008afc <SUBGRF_WriteCommand>
 8008832:	e000      	b.n	8008836 <SUBGRF_SetPacketParams+0x12a>
        return;
 8008834:	bf00      	nop
}
 8008836:	3718      	adds	r7, #24
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	0800a0c4 	.word	0x0800a0c4
 8008840:	200002a5 	.word	0x200002a5
 8008844:	200002a6 	.word	0x200002a6

08008848 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	4603      	mov	r3, r0
 8008850:	460a      	mov	r2, r1
 8008852:	71fb      	strb	r3, [r7, #7]
 8008854:	4613      	mov	r3, r2
 8008856:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8008858:	79fb      	ldrb	r3, [r7, #7]
 800885a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800885c:	79bb      	ldrb	r3, [r7, #6]
 800885e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8008860:	f107 030c 	add.w	r3, r7, #12
 8008864:	2202      	movs	r2, #2
 8008866:	4619      	mov	r1, r3
 8008868:	208f      	movs	r0, #143	; 0x8f
 800886a:	f000 f947 	bl	8008afc <SUBGRF_WriteCommand>
}
 800886e:	bf00      	nop
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b082      	sub	sp, #8
 800887a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800887c:	2300      	movs	r3, #0
 800887e:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8008880:	1d3b      	adds	r3, r7, #4
 8008882:	2201      	movs	r2, #1
 8008884:	4619      	mov	r1, r3
 8008886:	2015      	movs	r0, #21
 8008888:	f000 f95a 	bl	8008b40 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800888c:	793b      	ldrb	r3, [r7, #4]
 800888e:	425b      	negs	r3, r3
 8008890:	105b      	asrs	r3, r3, #1
 8008892:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8008894:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3708      	adds	r7, #8
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80088aa:	f107 030c 	add.w	r3, r7, #12
 80088ae:	2202      	movs	r2, #2
 80088b0:	4619      	mov	r1, r3
 80088b2:	2013      	movs	r0, #19
 80088b4:	f000 f944 	bl	8008b40 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80088b8:	f7ff fdec 	bl	8008494 <SUBGRF_GetPacketType>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d10d      	bne.n	80088de <SUBGRF_GetRxBufferStatus+0x3e>
 80088c2:	4b0c      	ldr	r3, [pc, #48]	; (80088f4 <SUBGRF_GetRxBufferStatus+0x54>)
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d108      	bne.n	80088de <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80088cc:	f240 7002 	movw	r0, #1794	; 0x702
 80088d0:	f000 f878 	bl	80089c4 <SUBGRF_ReadRegister>
 80088d4:	4603      	mov	r3, r0
 80088d6:	461a      	mov	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	701a      	strb	r2, [r3, #0]
 80088dc:	e002      	b.n	80088e4 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 80088de:	7b3a      	ldrb	r2, [r7, #12]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 80088e4:	7b7a      	ldrb	r2, [r7, #13]
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	701a      	strb	r2, [r3, #0]
}
 80088ea:	bf00      	nop
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	200002a6 	.word	0x200002a6

080088f8 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8008900:	f107 030c 	add.w	r3, r7, #12
 8008904:	2203      	movs	r2, #3
 8008906:	4619      	mov	r1, r3
 8008908:	2014      	movs	r0, #20
 800890a:	f000 f919 	bl	8008b40 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800890e:	f7ff fdc1 	bl	8008494 <SUBGRF_GetPacketType>
 8008912:	4603      	mov	r3, r0
 8008914:	461a      	mov	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d002      	beq.n	8008928 <SUBGRF_GetPacketStatus+0x30>
 8008922:	2b01      	cmp	r3, #1
 8008924:	d013      	beq.n	800894e <SUBGRF_GetPacketStatus+0x56>
 8008926:	e02a      	b.n	800897e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8008928:	7b3a      	ldrb	r2, [r7, #12]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800892e:	7b7b      	ldrb	r3, [r7, #13]
 8008930:	425b      	negs	r3, r3
 8008932:	105b      	asrs	r3, r3, #1
 8008934:	b25a      	sxtb	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800893a:	7bbb      	ldrb	r3, [r7, #14]
 800893c:	425b      	negs	r3, r3
 800893e:	105b      	asrs	r3, r3, #1
 8008940:	b25a      	sxtb	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	609a      	str	r2, [r3, #8]
            break;
 800894c:	e020      	b.n	8008990 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800894e:	7b3b      	ldrb	r3, [r7, #12]
 8008950:	425b      	negs	r3, r3
 8008952:	105b      	asrs	r3, r3, #1
 8008954:	b25a      	sxtb	r2, r3
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800895a:	7b7b      	ldrb	r3, [r7, #13]
 800895c:	b25b      	sxtb	r3, r3
 800895e:	3302      	adds	r3, #2
 8008960:	109b      	asrs	r3, r3, #2
 8008962:	b25a      	sxtb	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8008968:	7bbb      	ldrb	r3, [r7, #14]
 800896a:	425b      	negs	r3, r3
 800896c:	105b      	asrs	r3, r3, #1
 800896e:	b25a      	sxtb	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8008974:	4b08      	ldr	r3, [pc, #32]	; (8008998 <SUBGRF_GetPacketStatus+0xa0>)
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	611a      	str	r2, [r3, #16]
            break;
 800897c:	e008      	b.n	8008990 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800897e:	2214      	movs	r2, #20
 8008980:	2100      	movs	r1, #0
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 fbc7 	bl	8009116 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	220f      	movs	r2, #15
 800898c:	701a      	strb	r2, [r3, #0]
            break;
 800898e:	bf00      	nop
    }
}
 8008990:	bf00      	nop
 8008992:	3710      	adds	r7, #16
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	200002a8 	.word	0x200002a8

0800899c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	4603      	mov	r3, r0
 80089a4:	460a      	mov	r2, r1
 80089a6:	80fb      	strh	r3, [r7, #6]
 80089a8:	4613      	mov	r3, r2
 80089aa:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80089ac:	1d7a      	adds	r2, r7, #5
 80089ae:	88f9      	ldrh	r1, [r7, #6]
 80089b0:	2301      	movs	r3, #1
 80089b2:	4803      	ldr	r0, [pc, #12]	; (80089c0 <SUBGRF_WriteRegister+0x24>)
 80089b4:	f7fa fd0e 	bl	80033d4 <HAL_SUBGHZ_WriteRegisters>
}
 80089b8:	bf00      	nop
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	200002e4 	.word	0x200002e4

080089c4 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	4603      	mov	r3, r0
 80089cc:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80089ce:	f107 020f 	add.w	r2, r7, #15
 80089d2:	88f9      	ldrh	r1, [r7, #6]
 80089d4:	2301      	movs	r3, #1
 80089d6:	4804      	ldr	r0, [pc, #16]	; (80089e8 <SUBGRF_ReadRegister+0x24>)
 80089d8:	f7fa fd5b 	bl	8003492 <HAL_SUBGHZ_ReadRegisters>
    return data;
 80089dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	200002e4 	.word	0x200002e4

080089ec <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b086      	sub	sp, #24
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	4603      	mov	r3, r0
 80089f4:	6039      	str	r1, [r7, #0]
 80089f6:	80fb      	strh	r3, [r7, #6]
 80089f8:	4613      	mov	r3, r2
 80089fa:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089fc:	f3ef 8310 	mrs	r3, PRIMASK
 8008a00:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a02:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8008a04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a06:	b672      	cpsid	i
}
 8008a08:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8008a0a:	88bb      	ldrh	r3, [r7, #4]
 8008a0c:	88f9      	ldrh	r1, [r7, #6]
 8008a0e:	683a      	ldr	r2, [r7, #0]
 8008a10:	4806      	ldr	r0, [pc, #24]	; (8008a2c <SUBGRF_WriteRegisters+0x40>)
 8008a12:	f7fa fcdf 	bl	80033d4 <HAL_SUBGHZ_WriteRegisters>
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	f383 8810 	msr	PRIMASK, r3
}
 8008a20:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8008a22:	bf00      	nop
 8008a24:	3718      	adds	r7, #24
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	200002e4 	.word	0x200002e4

08008a30 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	4603      	mov	r3, r0
 8008a38:	6039      	str	r1, [r7, #0]
 8008a3a:	80fb      	strh	r3, [r7, #6]
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a40:	f3ef 8310 	mrs	r3, PRIMASK
 8008a44:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a46:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8008a48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a4a:	b672      	cpsid	i
}
 8008a4c:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8008a4e:	88bb      	ldrh	r3, [r7, #4]
 8008a50:	88f9      	ldrh	r1, [r7, #6]
 8008a52:	683a      	ldr	r2, [r7, #0]
 8008a54:	4806      	ldr	r0, [pc, #24]	; (8008a70 <SUBGRF_ReadRegisters+0x40>)
 8008a56:	f7fa fd1c 	bl	8003492 <HAL_SUBGHZ_ReadRegisters>
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	f383 8810 	msr	PRIMASK, r3
}
 8008a64:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8008a66:	bf00      	nop
 8008a68:	3718      	adds	r7, #24
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	200002e4 	.word	0x200002e4

08008a74 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b086      	sub	sp, #24
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	6039      	str	r1, [r7, #0]
 8008a7e:	71fb      	strb	r3, [r7, #7]
 8008a80:	4613      	mov	r3, r2
 8008a82:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a84:	f3ef 8310 	mrs	r3, PRIMASK
 8008a88:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8008a8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a8e:	b672      	cpsid	i
}
 8008a90:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8008a92:	79bb      	ldrb	r3, [r7, #6]
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	79f9      	ldrb	r1, [r7, #7]
 8008a98:	683a      	ldr	r2, [r7, #0]
 8008a9a:	4806      	ldr	r0, [pc, #24]	; (8008ab4 <SUBGRF_WriteBuffer+0x40>)
 8008a9c:	f7fa fe0d 	bl	80036ba <HAL_SUBGHZ_WriteBuffer>
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	f383 8810 	msr	PRIMASK, r3
}
 8008aaa:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8008aac:	bf00      	nop
 8008aae:	3718      	adds	r7, #24
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	200002e4 	.word	0x200002e4

08008ab8 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b086      	sub	sp, #24
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	4603      	mov	r3, r0
 8008ac0:	6039      	str	r1, [r7, #0]
 8008ac2:	71fb      	strb	r3, [r7, #7]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8008acc:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ace:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8008ad0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ad2:	b672      	cpsid	i
}
 8008ad4:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8008ad6:	79bb      	ldrb	r3, [r7, #6]
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	79f9      	ldrb	r1, [r7, #7]
 8008adc:	683a      	ldr	r2, [r7, #0]
 8008ade:	4806      	ldr	r0, [pc, #24]	; (8008af8 <SUBGRF_ReadBuffer+0x40>)
 8008ae0:	f7fa fe3e 	bl	8003760 <HAL_SUBGHZ_ReadBuffer>
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	f383 8810 	msr	PRIMASK, r3
}
 8008aee:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8008af0:	bf00      	nop
 8008af2:	3718      	adds	r7, #24
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	200002e4 	.word	0x200002e4

08008afc <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b086      	sub	sp, #24
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	4603      	mov	r3, r0
 8008b04:	6039      	str	r1, [r7, #0]
 8008b06:	71fb      	strb	r3, [r7, #7]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b0c:	f3ef 8310 	mrs	r3, PRIMASK
 8008b10:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b12:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8008b14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b16:	b672      	cpsid	i
}
 8008b18:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8008b1a:	88bb      	ldrh	r3, [r7, #4]
 8008b1c:	79f9      	ldrb	r1, [r7, #7]
 8008b1e:	683a      	ldr	r2, [r7, #0]
 8008b20:	4806      	ldr	r0, [pc, #24]	; (8008b3c <SUBGRF_WriteCommand+0x40>)
 8008b22:	f7fa fd17 	bl	8003554 <HAL_SUBGHZ_ExecSetCmd>
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	f383 8810 	msr	PRIMASK, r3
}
 8008b30:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8008b32:	bf00      	nop
 8008b34:	3718      	adds	r7, #24
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	200002e4 	.word	0x200002e4

08008b40 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b086      	sub	sp, #24
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	4603      	mov	r3, r0
 8008b48:	6039      	str	r1, [r7, #0]
 8008b4a:	71fb      	strb	r3, [r7, #7]
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b50:	f3ef 8310 	mrs	r3, PRIMASK
 8008b54:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b56:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8008b58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b5a:	b672      	cpsid	i
}
 8008b5c:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8008b5e:	88bb      	ldrh	r3, [r7, #4]
 8008b60:	79f9      	ldrb	r1, [r7, #7]
 8008b62:	683a      	ldr	r2, [r7, #0]
 8008b64:	4806      	ldr	r0, [pc, #24]	; (8008b80 <SUBGRF_ReadCommand+0x40>)
 8008b66:	f7fa fd54 	bl	8003612 <HAL_SUBGHZ_ExecGetCmd>
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	f383 8810 	msr	PRIMASK, r3
}
 8008b74:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8008b76:	bf00      	nop
 8008b78:	3718      	adds	r7, #24
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	200002e4 	.word	0x200002e4

08008b84 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	460a      	mov	r2, r1
 8008b8e:	71fb      	strb	r3, [r7, #7]
 8008b90:	4613      	mov	r3, r2
 8008b92:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8008b94:	2301      	movs	r3, #1
 8008b96:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8008b98:	79bb      	ldrb	r3, [r7, #6]
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d10d      	bne.n	8008bba <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8008b9e:	79fb      	ldrb	r3, [r7, #7]
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d104      	bne.n	8008bae <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8008ba4:	2302      	movs	r3, #2
 8008ba6:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8008ba8:	2004      	movs	r0, #4
 8008baa:	f000 f8df 	bl	8008d6c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8008bae:	79fb      	ldrb	r3, [r7, #7]
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d107      	bne.n	8008bc4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8008bb4:	2303      	movs	r3, #3
 8008bb6:	73fb      	strb	r3, [r7, #15]
 8008bb8:	e004      	b.n	8008bc4 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8008bba:	79bb      	ldrb	r3, [r7, #6]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8008bc4:	7bfb      	ldrb	r3, [r7, #15]
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f000 fa77 	bl	80090ba <RBI_ConfigRFSwitch>
}
 8008bcc:	bf00      	nop
 8008bce:	3710      	adds	r7, #16
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	4603      	mov	r3, r0
 8008bdc:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8008bde:	2301      	movs	r3, #1
 8008be0:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8008be2:	f000 fa77 	bl	80090d4 <RBI_GetTxConfig>
 8008be6:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	d016      	beq.n	8008c1c <SUBGRF_SetRfTxPower+0x48>
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	dc16      	bgt.n	8008c22 <SUBGRF_SetRfTxPower+0x4e>
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d003      	beq.n	8008c02 <SUBGRF_SetRfTxPower+0x2e>
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d00a      	beq.n	8008c16 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8008c00:	e00f      	b.n	8008c22 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8008c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c06:	2b0f      	cmp	r3, #15
 8008c08:	dd02      	ble.n	8008c10 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8008c0a:	2302      	movs	r3, #2
 8008c0c:	73fb      	strb	r3, [r7, #15]
            break;
 8008c0e:	e009      	b.n	8008c24 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8008c10:	2301      	movs	r3, #1
 8008c12:	73fb      	strb	r3, [r7, #15]
            break;
 8008c14:	e006      	b.n	8008c24 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8008c16:	2301      	movs	r3, #1
 8008c18:	73fb      	strb	r3, [r7, #15]
            break;
 8008c1a:	e003      	b.n	8008c24 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	73fb      	strb	r3, [r7, #15]
            break;
 8008c20:	e000      	b.n	8008c24 <SUBGRF_SetRfTxPower+0x50>
            break;
 8008c22:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8008c24:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8008c28:	7bfb      	ldrb	r3, [r7, #15]
 8008c2a:	2202      	movs	r2, #2
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7ff fc3b 	bl	80084a8 <SUBGRF_SetTxParams>

    return paSelect;
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8008c40:	230a      	movs	r3, #10
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bc80      	pop	{r7}
 8008c48:	4770      	bx	lr
	...

08008c4c <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8008c54:	4b03      	ldr	r3, [pc, #12]	; (8008c64 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2001      	movs	r0, #1
 8008c5a:	4798      	blx	r3
}
 8008c5c:	bf00      	nop
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	200002b0 	.word	0x200002b0

08008c68 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8008c70:	4b03      	ldr	r3, [pc, #12]	; (8008c80 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2002      	movs	r0, #2
 8008c76:	4798      	blx	r3
}
 8008c78:	bf00      	nop
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	200002b0 	.word	0x200002b0

08008c84 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8008c8c:	4b03      	ldr	r3, [pc, #12]	; (8008c9c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2040      	movs	r0, #64	; 0x40
 8008c92:	4798      	blx	r3
}
 8008c94:	bf00      	nop
 8008c96:	3708      	adds	r7, #8
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	200002b0 	.word	0x200002b0

08008ca0 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	460b      	mov	r3, r1
 8008caa:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8008cac:	78fb      	ldrb	r3, [r7, #3]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d002      	beq.n	8008cb8 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d005      	beq.n	8008cc2 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8008cb6:	e00a      	b.n	8008cce <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8008cb8:	4b07      	ldr	r3, [pc, #28]	; (8008cd8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2080      	movs	r0, #128	; 0x80
 8008cbe:	4798      	blx	r3
            break;
 8008cc0:	e005      	b.n	8008cce <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8008cc2:	4b05      	ldr	r3, [pc, #20]	; (8008cd8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008cca:	4798      	blx	r3
            break;
 8008ccc:	bf00      	nop
    }
}
 8008cce:	bf00      	nop
 8008cd0:	3708      	adds	r7, #8
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	200002b0 	.word	0x200002b0

08008cdc <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8008ce4:	4b04      	ldr	r3, [pc, #16]	; (8008cf8 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008cec:	4798      	blx	r3
}
 8008cee:	bf00      	nop
 8008cf0:	3708      	adds	r7, #8
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	200002b0 	.word	0x200002b0

08008cfc <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8008d04:	4b03      	ldr	r3, [pc, #12]	; (8008d14 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2020      	movs	r0, #32
 8008d0a:	4798      	blx	r3
}
 8008d0c:	bf00      	nop
 8008d0e:	3708      	adds	r7, #8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	200002b0 	.word	0x200002b0

08008d18 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8008d20:	4b03      	ldr	r3, [pc, #12]	; (8008d30 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2004      	movs	r0, #4
 8008d26:	4798      	blx	r3
}
 8008d28:	bf00      	nop
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	200002b0 	.word	0x200002b0

08008d34 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8008d3c:	4b03      	ldr	r3, [pc, #12]	; (8008d4c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2008      	movs	r0, #8
 8008d42:	4798      	blx	r3
}
 8008d44:	bf00      	nop
 8008d46:	3708      	adds	r7, #8
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	200002b0 	.word	0x200002b0

08008d50 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8008d58:	4b03      	ldr	r3, [pc, #12]	; (8008d68 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2010      	movs	r0, #16
 8008d5e:	4798      	blx	r3
}
 8008d60:	bf00      	nop
 8008d62:	3708      	adds	r7, #8
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	200002b0 	.word	0x200002b0

08008d6c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	4603      	mov	r3, r0
 8008d74:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8008d76:	f000 f9c3 	bl	8009100 <RBI_IsDCDC>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d112      	bne.n	8008da6 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8008d80:	f640 1023 	movw	r0, #2339	; 0x923
 8008d84:	f7ff fe1e 	bl	80089c4 <SUBGRF_ReadRegister>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8008d8c:	7bfb      	ldrb	r3, [r7, #15]
 8008d8e:	f023 0306 	bic.w	r3, r3, #6
 8008d92:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8008d94:	7bfa      	ldrb	r2, [r7, #15]
 8008d96:	79fb      	ldrb	r3, [r7, #7]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	f640 1023 	movw	r0, #2339	; 0x923
 8008da2:	f7ff fdfb 	bl	800899c <SUBGRF_WriteRegister>
  }
}
 8008da6:	bf00      	nop
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
	...

08008db0 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d101      	bne.n	8008dc2 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8008dbe:	231f      	movs	r3, #31
 8008dc0:	e016      	b.n	8008df0 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	73fb      	strb	r3, [r7, #15]
 8008dc6:	e00f      	b.n	8008de8 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8008dc8:	7bfb      	ldrb	r3, [r7, #15]
 8008dca:	4a0c      	ldr	r2, [pc, #48]	; (8008dfc <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8008dcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d205      	bcs.n	8008de2 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8008dd6:	7bfb      	ldrb	r3, [r7, #15]
 8008dd8:	4a08      	ldr	r2, [pc, #32]	; (8008dfc <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8008dda:	00db      	lsls	r3, r3, #3
 8008ddc:	4413      	add	r3, r2
 8008dde:	791b      	ldrb	r3, [r3, #4]
 8008de0:	e006      	b.n	8008df0 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8008de2:	7bfb      	ldrb	r3, [r7, #15]
 8008de4:	3301      	adds	r3, #1
 8008de6:	73fb      	strb	r3, [r7, #15]
 8008de8:	7bfb      	ldrb	r3, [r7, #15]
 8008dea:	2b15      	cmp	r3, #21
 8008dec:	d9ec      	bls.n	8008dc8 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8008dee:	e7fe      	b.n	8008dee <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3714      	adds	r7, #20
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bc80      	pop	{r7}
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	0800a24c 	.word	0x0800a24c

08008e00 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b08a      	sub	sp, #40	; 0x28
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8008e0a:	4b36      	ldr	r3, [pc, #216]	; (8008ee4 <SUBGRF_GetCFO+0xe4>)
 8008e0c:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 8008e0e:	f640 0007 	movw	r0, #2055	; 0x807
 8008e12:	f7ff fdd7 	bl	80089c4 <SUBGRF_ReadRegister>
 8008e16:	4603      	mov	r3, r0
 8008e18:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8008e1a:	7ffb      	ldrb	r3, [r7, #31]
 8008e1c:	08db      	lsrs	r3, r3, #3
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	f003 0303 	and.w	r3, r3, #3
 8008e24:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008e28:	4413      	add	r3, r2
 8008e2a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8008e2e:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8008e30:	7ffb      	ldrb	r3, [r7, #31]
 8008e32:	f003 0307 	and.w	r3, r3, #7
 8008e36:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8008e38:	7fba      	ldrb	r2, [r7, #30]
 8008e3a:	7f7b      	ldrb	r3, [r7, #29]
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e42:	461a      	mov	r2, r3
 8008e44:	4b28      	ldr	r3, [pc, #160]	; (8008ee8 <SUBGRF_GetCFO+0xe8>)
 8008e46:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e4a:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8008e4c:	69ba      	ldr	r2, [r7, #24]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e54:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8008e56:	2301      	movs	r3, #1
 8008e58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8008e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e60:	697a      	ldr	r2, [r7, #20]
 8008e62:	fb02 f303 	mul.w	r3, r2, r3
 8008e66:	2b07      	cmp	r3, #7
 8008e68:	d802      	bhi.n	8008e70 <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 8008e6a:	2302      	movs	r3, #2
 8008e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8008e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e74:	697a      	ldr	r2, [r7, #20]
 8008e76:	fb02 f303 	mul.w	r3, r2, r3
 8008e7a:	2b03      	cmp	r3, #3
 8008e7c:	d802      	bhi.n	8008e84 <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 8008e7e:	2304      	movs	r3, #4
 8008e80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8008e84:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	fb02 f303 	mul.w	r3, r2, r3
 8008e8e:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 8008e90:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8008e94:	f7ff fd96 	bl	80089c4 <SUBGRF_ReadRegister>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	021b      	lsls	r3, r3, #8
 8008e9c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008ea0:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 8008ea2:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8008ea6:	f7ff fd8d 	bl	80089c4 <SUBGRF_ReadRegister>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	461a      	mov	r2, r3
 8008eae:	6a3b      	ldr	r3, [r7, #32]
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8008eb4:	6a3b      	ldr	r3, [r7, #32]
 8008eb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d005      	beq.n	8008eca <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 8008ebe:	6a3b      	ldr	r3, [r7, #32]
 8008ec0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8008ec4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8008ec8:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	095b      	lsrs	r3, r3, #5
 8008ece:	6a3a      	ldr	r2, [r7, #32]
 8008ed0:	fb02 f303 	mul.w	r3, r2, r3
 8008ed4:	11da      	asrs	r2, r3, #7
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	601a      	str	r2, [r3, #0]
}
 8008eda:	bf00      	nop
 8008edc:	3728      	adds	r7, #40	; 0x28
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	0c0a0804 	.word	0x0c0a0804
 8008ee8:	01e84800 	.word	0x01e84800

08008eec <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 8008eec:	b480      	push	{r7}
 8008eee:	b087      	sub	sp, #28
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]
 8008ef8:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 8008efa:	2300      	movs	r3, #0
 8008efc:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 8008efe:	f04f 33ff 	mov.w	r3, #4294967295
 8008f02:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8008f04:	697b      	ldr	r3, [r7, #20]
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	371c      	adds	r7, #28
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bc80      	pop	{r7}
 8008f0e:	4770      	bx	lr

08008f10 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 8008f10:	b480      	push	{r7}
 8008f12:	b087      	sub	sp, #28
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	4603      	mov	r3, r0
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
 8008f1c:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 8008f22:	f04f 33ff 	mov.w	r3, #4294967295
 8008f26:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8008f28:	697b      	ldr	r3, [r7, #20]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	371c      	adds	r7, #28
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bc80      	pop	{r7}
 8008f32:	4770      	bx	lr

08008f34 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 8008f40:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3714      	adds	r7, #20
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bc80      	pop	{r7}
 8008f4c:	4770      	bx	lr

08008f4e <RFW_DeInit>:

void RFW_DeInit( void)
{
 8008f4e:	b480      	push	{r7}
 8008f50:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8008f52:	bf00      	nop
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bc80      	pop	{r7}
 8008f58:	4770      	bx	lr

08008f5a <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 8008f5a:	b480      	push	{r7}
 8008f5c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 8008f5e:	2300      	movs	r3, #0
#endif
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bc80      	pop	{r7}
 8008f66:	4770      	bx	lr

08008f68 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 8008f6c:	2300      	movs	r3, #0
#endif
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bc80      	pop	{r7}
 8008f74:	4770      	bx	lr

08008f76 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 8008f76:	b480      	push	{r7}
 8008f78:	b083      	sub	sp, #12
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8008f80:	bf00      	nop
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bc80      	pop	{r7}
 8008f88:	4770      	bx	lr

08008f8a <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 8008f8a:	b480      	push	{r7}
 8008f8c:	b087      	sub	sp, #28
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	60f8      	str	r0, [r7, #12]
 8008f92:	460b      	mov	r3, r1
 8008f94:	607a      	str	r2, [r7, #4]
 8008f96:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8008f98:	f04f 33ff 	mov.w	r3, #4294967295
 8008f9c:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 8008f9e:	697b      	ldr	r3, [r7, #20]
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	371c      	adds	r7, #28
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bc80      	pop	{r7}
 8008fa8:	4770      	bx	lr

08008faa <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8008faa:	b480      	push	{r7}
 8008fac:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 8008fae:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bc80      	pop	{r7}
 8008fb8:	4770      	bx	lr

08008fba <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 8008fba:	b480      	push	{r7}
 8008fbc:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8008fbe:	bf00      	nop
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bc80      	pop	{r7}
 8008fc4:	4770      	bx	lr

08008fc6 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8008fc6:	b480      	push	{r7}
 8008fc8:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8008fca:	bf00      	nop
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bc80      	pop	{r7}
 8008fd0:	4770      	bx	lr

08008fd2 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 8008fd2:	b480      	push	{r7}
 8008fd4:	b083      	sub	sp, #12
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	4603      	mov	r3, r0
 8008fda:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8008fdc:	bf00      	nop
 8008fde:	370c      	adds	r7, #12
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bc80      	pop	{r7}
 8008fe4:	4770      	bx	lr

08008fe6 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 8008fea:	f7f7 fde2 	bl	8000bb2 <SystemApp_Init>
  SubghzApp_Init();
 8008fee:	f000 f809 	bl	8009004 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 8008ff2:	bf00      	nop
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 8008ff6:	b480      	push	{r7}
 8008ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
}
 8008ffa:	bf00      	nop
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bc80      	pop	{r7}
 8009000:	4770      	bx	lr
	...

08009004 <SubghzApp_Init>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */
  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 8009008:	4b0a      	ldr	r3, [pc, #40]	; (8009034 <SubghzApp_Init+0x30>)
 800900a:	4a0b      	ldr	r2, [pc, #44]	; (8009038 <SubghzApp_Init+0x34>)
 800900c:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800900e:	4b09      	ldr	r3, [pc, #36]	; (8009034 <SubghzApp_Init+0x30>)
 8009010:	4a0a      	ldr	r2, [pc, #40]	; (800903c <SubghzApp_Init+0x38>)
 8009012:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8009014:	4b07      	ldr	r3, [pc, #28]	; (8009034 <SubghzApp_Init+0x30>)
 8009016:	4a0a      	ldr	r2, [pc, #40]	; (8009040 <SubghzApp_Init+0x3c>)
 8009018:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800901a:	4b06      	ldr	r3, [pc, #24]	; (8009034 <SubghzApp_Init+0x30>)
 800901c:	4a09      	ldr	r2, [pc, #36]	; (8009044 <SubghzApp_Init+0x40>)
 800901e:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 8009020:	4b04      	ldr	r3, [pc, #16]	; (8009034 <SubghzApp_Init+0x30>)
 8009022:	4a09      	ldr	r2, [pc, #36]	; (8009048 <SubghzApp_Init+0x44>)
 8009024:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 8009026:	4b09      	ldr	r3, [pc, #36]	; (800904c <SubghzApp_Init+0x48>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4802      	ldr	r0, [pc, #8]	; (8009034 <SubghzApp_Init+0x30>)
 800902c:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */
  /* USER CODE END SubghzApp_Init_2 */
}
 800902e:	bf00      	nop
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	200002b4 	.word	0x200002b4
 8009038:	08009051 	.word	0x08009051
 800903c:	0800905d 	.word	0x0800905d
 8009040:	08009081 	.word	0x08009081
 8009044:	0800908d 	.word	0x0800908d
 8009048:	08009099 	.word	0x08009099
 800904c:	0800a1c4 	.word	0x0800a1c4

08009050 <OnTxDone>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void OnTxDone(void)
{
 8009050:	b480      	push	{r7}
 8009052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 8009054:	bf00      	nop
 8009056:	46bd      	mov	sp, r7
 8009058:	bc80      	pop	{r7}
 800905a:	4770      	bx	lr

0800905c <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	4608      	mov	r0, r1
 8009066:	4611      	mov	r1, r2
 8009068:	461a      	mov	r2, r3
 800906a:	4603      	mov	r3, r0
 800906c:	817b      	strh	r3, [r7, #10]
 800906e:	460b      	mov	r3, r1
 8009070:	813b      	strh	r3, [r7, #8]
 8009072:	4613      	mov	r3, r2
 8009074:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 8009076:	bf00      	nop
 8009078:	3714      	adds	r7, #20
 800907a:	46bd      	mov	sp, r7
 800907c:	bc80      	pop	{r7}
 800907e:	4770      	bx	lr

08009080 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 8009080:	b480      	push	{r7}
 8009082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 8009084:	bf00      	nop
 8009086:	46bd      	mov	sp, r7
 8009088:	bc80      	pop	{r7}
 800908a:	4770      	bx	lr

0800908c <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800908c:	b480      	push	{r7}
 800908e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 8009090:	bf00      	nop
 8009092:	46bd      	mov	sp, r7
 8009094:	bc80      	pop	{r7}
 8009096:	4770      	bx	lr

08009098 <OnRxError>:

static void OnRxError(void)
{
 8009098:	b480      	push	{r7}
 800909a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 800909c:	bf00      	nop
 800909e:	46bd      	mov	sp, r7
 80090a0:	bc80      	pop	{r7}
 80090a2:	4770      	bx	lr

080090a4 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 80090aa:	2300      	movs	r3, #0
 80090ac:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 80090ae:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bc80      	pop	{r7}
 80090b8:	4770      	bx	lr

080090ba <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80090ba:	b480      	push	{r7}
 80090bc:	b085      	sub	sp, #20
 80090be:	af00      	add	r7, sp, #0
 80090c0:	4603      	mov	r3, r0
 80090c2:	71fb      	strb	r3, [r7, #7]
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 80090c4:	2300      	movs	r3, #0
 80090c6:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 80090c8:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3714      	adds	r7, #20
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bc80      	pop	{r7}
 80090d2:	4770      	bx	lr

080090d4 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 80090da:	2300      	movs	r3, #0
 80090dc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 80090de:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bc80      	pop	{r7}
 80090e8:	4770      	bx	lr

080090ea <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80090ea:	b480      	push	{r7}
 80090ec:	b083      	sub	sp, #12
 80090ee:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 80090f0:	2301      	movs	r3, #1
 80090f2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 80090f4:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	370c      	adds	r7, #12
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bc80      	pop	{r7}
 80090fe:	4770      	bx	lr

08009100 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 8009106:	2301      	movs	r3, #1
 8009108:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 800910a:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800910c:	4618      	mov	r0, r3
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	bc80      	pop	{r7}
 8009114:	4770      	bx	lr

08009116 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8009116:	b480      	push	{r7}
 8009118:	b085      	sub	sp, #20
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	460b      	mov	r3, r1
 8009120:	70fb      	strb	r3, [r7, #3]
 8009122:	4613      	mov	r3, r2
 8009124:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800912a:	e004      	b.n	8009136 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	1c5a      	adds	r2, r3, #1
 8009130:	60fa      	str	r2, [r7, #12]
 8009132:	78fa      	ldrb	r2, [r7, #3]
 8009134:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8009136:	883b      	ldrh	r3, [r7, #0]
 8009138:	1e5a      	subs	r2, r3, #1
 800913a:	803a      	strh	r2, [r7, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d1f5      	bne.n	800912c <UTIL_MEM_set_8+0x16>
  }
}
 8009140:	bf00      	nop
 8009142:	bf00      	nop
 8009144:	3714      	adds	r7, #20
 8009146:	46bd      	mov	sp, r7
 8009148:	bc80      	pop	{r7}
 800914a:	4770      	bx	lr

0800914c <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	603b      	str	r3, [r7, #0]
 8009158:	4613      	mov	r3, r2
 800915a:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d023      	beq.n	80091aa <UTIL_TIMER_Create+0x5e>
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d020      	beq.n	80091aa <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2200      	movs	r2, #0
 800916c:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800916e:	4b11      	ldr	r3, [pc, #68]	; (80091b4 <UTIL_TIMER_Create+0x68>)
 8009170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009172:	68b8      	ldr	r0, [r7, #8]
 8009174:	4798      	blx	r3
 8009176:	4602      	mov	r2, r0
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2200      	movs	r2, #0
 8009180:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2200      	movs	r2, #0
 8009186:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2200      	movs	r2, #0
 800918c:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	683a      	ldr	r2, [r7, #0]
 8009192:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	69ba      	ldr	r2, [r7, #24]
 8009198:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	79fa      	ldrb	r2, [r7, #7]
 800919e:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2200      	movs	r2, #0
 80091a4:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 80091a6:	2300      	movs	r3, #0
 80091a8:	e000      	b.n	80091ac <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 80091aa:	2301      	movs	r3, #1
  }
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3710      	adds	r7, #16
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	0800a170 	.word	0x0800a170

080091b8 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b08a      	sub	sp, #40	; 0x28
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 80091c0:	2300      	movs	r3, #0
 80091c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d056      	beq.n	800927a <UTIL_TIMER_Start+0xc2>
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 f929 	bl	8009424 <TimerExists>
 80091d2:	4603      	mov	r3, r0
 80091d4:	f083 0301 	eor.w	r3, r3, #1
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d04d      	beq.n	800927a <UTIL_TIMER_Start+0xc2>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	7a5b      	ldrb	r3, [r3, #9]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d149      	bne.n	800927a <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091e6:	f3ef 8310 	mrs	r3, PRIMASK
 80091ea:	613b      	str	r3, [r7, #16]
  return(result);
 80091ec:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 80091ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80091f0:	b672      	cpsid	i
}
 80091f2:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 80091fa:	4b24      	ldr	r3, [pc, #144]	; (800928c <UTIL_TIMER_Start+0xd4>)
 80091fc:	6a1b      	ldr	r3, [r3, #32]
 80091fe:	4798      	blx	r3
 8009200:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 8009202:	6a3a      	ldr	r2, [r7, #32]
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	429a      	cmp	r2, r3
 8009208:	d201      	bcs.n	800920e <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800920a:	69bb      	ldr	r3, [r7, #24]
 800920c:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a3a      	ldr	r2, [r7, #32]
 8009212:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2201      	movs	r2, #1
 800921e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 8009226:	4b1a      	ldr	r3, [pc, #104]	; (8009290 <UTIL_TIMER_Start+0xd8>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d106      	bne.n	800923c <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800922e:	4b17      	ldr	r3, [pc, #92]	; (800928c <UTIL_TIMER_Start+0xd4>)
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 f96b 	bl	8009510 <TimerInsertNewHeadTimer>
 800923a:	e017      	b.n	800926c <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800923c:	4b13      	ldr	r3, [pc, #76]	; (800928c <UTIL_TIMER_Start+0xd4>)
 800923e:	699b      	ldr	r3, [r3, #24]
 8009240:	4798      	blx	r3
 8009242:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	441a      	add	r2, r3
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	4b0e      	ldr	r3, [pc, #56]	; (8009290 <UTIL_TIMER_Start+0xd8>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	429a      	cmp	r2, r3
 800925c:	d203      	bcs.n	8009266 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 f956 	bl	8009510 <TimerInsertNewHeadTimer>
 8009264:	e002      	b.n	800926c <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 f922 	bl	80094b0 <TimerInsertTimer>
 800926c:	69fb      	ldr	r3, [r7, #28]
 800926e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f383 8810 	msr	PRIMASK, r3
}
 8009276:	bf00      	nop
  {
 8009278:	e002      	b.n	8009280 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800927a:	2301      	movs	r3, #1
 800927c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8009280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009284:	4618      	mov	r0, r3
 8009286:	3728      	adds	r7, #40	; 0x28
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	0800a170 	.word	0x0800a170
 8009290:	200002d0 	.word	0x200002d0

08009294 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b088      	sub	sp, #32
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800929c:	2300      	movs	r3, #0
 800929e:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d05b      	beq.n	800935e <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092a6:	f3ef 8310 	mrs	r3, PRIMASK
 80092aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80092ac:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 80092ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80092b0:	b672      	cpsid	i
}
 80092b2:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 80092b4:	4b2d      	ldr	r3, [pc, #180]	; (800936c <UTIL_TIMER_Stop+0xd8>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 80092ba:	4b2c      	ldr	r3, [pc, #176]	; (800936c <UTIL_TIMER_Stop+0xd8>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 80092c6:	4b29      	ldr	r3, [pc, #164]	; (800936c <UTIL_TIMER_Stop+0xd8>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d041      	beq.n	8009352 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 80092d4:	4b25      	ldr	r3, [pc, #148]	; (800936c <UTIL_TIMER_Stop+0xd8>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d134      	bne.n	8009348 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 80092de:	4b23      	ldr	r3, [pc, #140]	; (800936c <UTIL_TIMER_Stop+0xd8>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2200      	movs	r2, #0
 80092e4:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 80092e6:	4b21      	ldr	r3, [pc, #132]	; (800936c <UTIL_TIMER_Stop+0xd8>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	695b      	ldr	r3, [r3, #20]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00a      	beq.n	8009306 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 80092f0:	4b1e      	ldr	r3, [pc, #120]	; (800936c <UTIL_TIMER_Stop+0xd8>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	695b      	ldr	r3, [r3, #20]
 80092f6:	4a1d      	ldr	r2, [pc, #116]	; (800936c <UTIL_TIMER_Stop+0xd8>)
 80092f8:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 80092fa:	4b1c      	ldr	r3, [pc, #112]	; (800936c <UTIL_TIMER_Stop+0xd8>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4618      	mov	r0, r3
 8009300:	f000 f8ac 	bl	800945c <TimerSetTimeout>
 8009304:	e023      	b.n	800934e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 8009306:	4b1a      	ldr	r3, [pc, #104]	; (8009370 <UTIL_TIMER_Stop+0xdc>)
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	4798      	blx	r3
            TimerListHead = NULL;
 800930c:	4b17      	ldr	r3, [pc, #92]	; (800936c <UTIL_TIMER_Stop+0xd8>)
 800930e:	2200      	movs	r2, #0
 8009310:	601a      	str	r2, [r3, #0]
 8009312:	e01c      	b.n	800934e <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 8009314:	697a      	ldr	r2, [r7, #20]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	429a      	cmp	r2, r3
 800931a:	d110      	bne.n	800933e <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	695b      	ldr	r3, [r3, #20]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d006      	beq.n	8009332 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	695b      	ldr	r3, [r3, #20]
 8009328:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	697a      	ldr	r2, [r7, #20]
 800932e:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 8009330:	e00d      	b.n	800934e <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 8009332:	2300      	movs	r3, #0
 8009334:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8009336:	69bb      	ldr	r3, [r7, #24]
 8009338:	697a      	ldr	r2, [r7, #20]
 800933a:	615a      	str	r2, [r3, #20]
            break;
 800933c:	e007      	b.n	800934e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	695b      	ldr	r3, [r3, #20]
 8009346:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1e2      	bne.n	8009314 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800934e:	2300      	movs	r3, #0
 8009350:	77fb      	strb	r3, [r7, #31]
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	f383 8810 	msr	PRIMASK, r3
}
 800935c:	e001      	b.n	8009362 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800935e:	2301      	movs	r3, #1
 8009360:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 8009362:	7ffb      	ldrb	r3, [r7, #31]
}
 8009364:	4618      	mov	r0, r3
 8009366:	3720      	adds	r7, #32
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	200002d0 	.word	0x200002d0
 8009370:	0800a170 	.word	0x0800a170

08009374 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800937e:	2300      	movs	r3, #0
 8009380:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d102      	bne.n	800938e <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 8009388:	2301      	movs	r3, #1
 800938a:	73fb      	strb	r3, [r7, #15]
 800938c:	e014      	b.n	80093b8 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800938e:	4b0d      	ldr	r3, [pc, #52]	; (80093c4 <UTIL_TIMER_SetPeriod+0x50>)
 8009390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009392:	6838      	ldr	r0, [r7, #0]
 8009394:	4798      	blx	r3
 8009396:	4602      	mov	r2, r0
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 f841 	bl	8009424 <TimerExists>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d007      	beq.n	80093b8 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f7ff ff73 	bl	8009294 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f7ff ff02 	bl	80091b8 <UTIL_TIMER_Start>
 80093b4:	4603      	mov	r3, r0
 80093b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 80093b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	0800a170 	.word	0x0800a170

080093c8 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 80093ce:	4b06      	ldr	r3, [pc, #24]	; (80093e8 <UTIL_TIMER_GetCurrentTime+0x20>)
 80093d0:	69db      	ldr	r3, [r3, #28]
 80093d2:	4798      	blx	r3
 80093d4:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 80093d6:	4b04      	ldr	r3, [pc, #16]	; (80093e8 <UTIL_TIMER_GetCurrentTime+0x20>)
 80093d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	4798      	blx	r3
 80093de:	4603      	mov	r3, r0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3708      	adds	r7, #8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	0800a170 	.word	0x0800a170

080093ec <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 80093f4:	4b0a      	ldr	r3, [pc, #40]	; (8009420 <UTIL_TIMER_GetElapsedTime+0x34>)
 80093f6:	69db      	ldr	r3, [r3, #28]
 80093f8:	4798      	blx	r3
 80093fa:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 80093fc:	4b08      	ldr	r3, [pc, #32]	; (8009420 <UTIL_TIMER_GetElapsedTime+0x34>)
 80093fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	4798      	blx	r3
 8009404:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8009406:	4b06      	ldr	r3, [pc, #24]	; (8009420 <UTIL_TIMER_GetElapsedTime+0x34>)
 8009408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800940a:	68f9      	ldr	r1, [r7, #12]
 800940c:	68ba      	ldr	r2, [r7, #8]
 800940e:	1a8a      	subs	r2, r1, r2
 8009410:	4610      	mov	r0, r2
 8009412:	4798      	blx	r3
 8009414:	4603      	mov	r3, r0
}
 8009416:	4618      	mov	r0, r3
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	0800a170 	.word	0x0800a170

08009424 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800942c:	4b0a      	ldr	r3, [pc, #40]	; (8009458 <TimerExists+0x34>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 8009432:	e008      	b.n	8009446 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 8009434:	68fa      	ldr	r2, [r7, #12]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	429a      	cmp	r2, r3
 800943a:	d101      	bne.n	8009440 <TimerExists+0x1c>
    {
      return true;
 800943c:	2301      	movs	r3, #1
 800943e:	e006      	b.n	800944e <TimerExists+0x2a>
    }
    cur = cur->Next;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	695b      	ldr	r3, [r3, #20]
 8009444:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1f3      	bne.n	8009434 <TimerExists+0x10>
  }
  return false;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	3714      	adds	r7, #20
 8009452:	46bd      	mov	sp, r7
 8009454:	bc80      	pop	{r7}
 8009456:	4770      	bx	lr
 8009458:	200002d0 	.word	0x200002d0

0800945c <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800945c:	b590      	push	{r4, r7, lr}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8009464:	4b11      	ldr	r3, [pc, #68]	; (80094ac <TimerSetTimeout+0x50>)
 8009466:	6a1b      	ldr	r3, [r3, #32]
 8009468:	4798      	blx	r3
 800946a:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2201      	movs	r2, #1
 8009470:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681c      	ldr	r4, [r3, #0]
 8009476:	4b0d      	ldr	r3, [pc, #52]	; (80094ac <TimerSetTimeout+0x50>)
 8009478:	699b      	ldr	r3, [r3, #24]
 800947a:	4798      	blx	r3
 800947c:	4602      	mov	r2, r0
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	4413      	add	r3, r2
 8009482:	429c      	cmp	r4, r3
 8009484:	d207      	bcs.n	8009496 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8009486:	4b09      	ldr	r3, [pc, #36]	; (80094ac <TimerSetTimeout+0x50>)
 8009488:	699b      	ldr	r3, [r3, #24]
 800948a:	4798      	blx	r3
 800948c:	4602      	mov	r2, r0
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	441a      	add	r2, r3
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8009496:	4b05      	ldr	r3, [pc, #20]	; (80094ac <TimerSetTimeout+0x50>)
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	6812      	ldr	r2, [r2, #0]
 800949e:	4610      	mov	r0, r2
 80094a0:	4798      	blx	r3
}
 80094a2:	bf00      	nop
 80094a4:	3714      	adds	r7, #20
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd90      	pop	{r4, r7, pc}
 80094aa:	bf00      	nop
 80094ac:	0800a170 	.word	0x0800a170

080094b0 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b085      	sub	sp, #20
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80094b8:	4b14      	ldr	r3, [pc, #80]	; (800950c <TimerInsertTimer+0x5c>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 80094be:	4b13      	ldr	r3, [pc, #76]	; (800950c <TimerInsertTimer+0x5c>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	695b      	ldr	r3, [r3, #20]
 80094c4:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 80094c6:	e012      	b.n	80094ee <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d905      	bls.n	80094e0 <TimerInsertTimer+0x30>
    {
        cur = next;
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	695b      	ldr	r3, [r3, #20]
 80094dc:	60bb      	str	r3, [r7, #8]
 80094de:	e006      	b.n	80094ee <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	68ba      	ldr	r2, [r7, #8]
 80094ea:	615a      	str	r2, [r3, #20]
        return;
 80094ec:	e009      	b.n	8009502 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	695b      	ldr	r3, [r3, #20]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d1e8      	bne.n	80094c8 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	615a      	str	r2, [r3, #20]
}
 8009502:	3714      	adds	r7, #20
 8009504:	46bd      	mov	sp, r7
 8009506:	bc80      	pop	{r7}
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	200002d0 	.word	0x200002d0

08009510 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8009518:	4b0b      	ldr	r3, [pc, #44]	; (8009548 <TimerInsertNewHeadTimer+0x38>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d002      	beq.n	800952a <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2200      	movs	r2, #0
 8009528:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	68fa      	ldr	r2, [r7, #12]
 800952e:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 8009530:	4a05      	ldr	r2, [pc, #20]	; (8009548 <TimerInsertNewHeadTimer+0x38>)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 8009536:	4b04      	ldr	r3, [pc, #16]	; (8009548 <TimerInsertNewHeadTimer+0x38>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4618      	mov	r0, r3
 800953c:	f7ff ff8e 	bl	800945c <TimerSetTimeout>
}
 8009540:	bf00      	nop
 8009542:	3710      	adds	r7, #16
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}
 8009548:	200002d0 	.word	0x200002d0

0800954c <__errno>:
 800954c:	4b01      	ldr	r3, [pc, #4]	; (8009554 <__errno+0x8>)
 800954e:	6818      	ldr	r0, [r3, #0]
 8009550:	4770      	bx	lr
 8009552:	bf00      	nop
 8009554:	20000010 	.word	0x20000010

08009558 <__libc_init_array>:
 8009558:	b570      	push	{r4, r5, r6, lr}
 800955a:	4d0d      	ldr	r5, [pc, #52]	; (8009590 <__libc_init_array+0x38>)
 800955c:	4c0d      	ldr	r4, [pc, #52]	; (8009594 <__libc_init_array+0x3c>)
 800955e:	1b64      	subs	r4, r4, r5
 8009560:	10a4      	asrs	r4, r4, #2
 8009562:	2600      	movs	r6, #0
 8009564:	42a6      	cmp	r6, r4
 8009566:	d109      	bne.n	800957c <__libc_init_array+0x24>
 8009568:	4d0b      	ldr	r5, [pc, #44]	; (8009598 <__libc_init_array+0x40>)
 800956a:	4c0c      	ldr	r4, [pc, #48]	; (800959c <__libc_init_array+0x44>)
 800956c:	f000 fc66 	bl	8009e3c <_init>
 8009570:	1b64      	subs	r4, r4, r5
 8009572:	10a4      	asrs	r4, r4, #2
 8009574:	2600      	movs	r6, #0
 8009576:	42a6      	cmp	r6, r4
 8009578:	d105      	bne.n	8009586 <__libc_init_array+0x2e>
 800957a:	bd70      	pop	{r4, r5, r6, pc}
 800957c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009580:	4798      	blx	r3
 8009582:	3601      	adds	r6, #1
 8009584:	e7ee      	b.n	8009564 <__libc_init_array+0xc>
 8009586:	f855 3b04 	ldr.w	r3, [r5], #4
 800958a:	4798      	blx	r3
 800958c:	3601      	adds	r6, #1
 800958e:	e7f2      	b.n	8009576 <__libc_init_array+0x1e>
 8009590:	0800a338 	.word	0x0800a338
 8009594:	0800a338 	.word	0x0800a338
 8009598:	0800a338 	.word	0x0800a338
 800959c:	0800a33c 	.word	0x0800a33c

080095a0 <memset>:
 80095a0:	4402      	add	r2, r0
 80095a2:	4603      	mov	r3, r0
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d100      	bne.n	80095aa <memset+0xa>
 80095a8:	4770      	bx	lr
 80095aa:	f803 1b01 	strb.w	r1, [r3], #1
 80095ae:	e7f9      	b.n	80095a4 <memset+0x4>

080095b0 <_vsniprintf_r>:
 80095b0:	b530      	push	{r4, r5, lr}
 80095b2:	1e14      	subs	r4, r2, #0
 80095b4:	4605      	mov	r5, r0
 80095b6:	b09b      	sub	sp, #108	; 0x6c
 80095b8:	4618      	mov	r0, r3
 80095ba:	da05      	bge.n	80095c8 <_vsniprintf_r+0x18>
 80095bc:	238b      	movs	r3, #139	; 0x8b
 80095be:	602b      	str	r3, [r5, #0]
 80095c0:	f04f 30ff 	mov.w	r0, #4294967295
 80095c4:	b01b      	add	sp, #108	; 0x6c
 80095c6:	bd30      	pop	{r4, r5, pc}
 80095c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80095cc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80095d0:	bf14      	ite	ne
 80095d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80095d6:	4623      	moveq	r3, r4
 80095d8:	9302      	str	r3, [sp, #8]
 80095da:	9305      	str	r3, [sp, #20]
 80095dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80095e0:	9100      	str	r1, [sp, #0]
 80095e2:	9104      	str	r1, [sp, #16]
 80095e4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80095e8:	4602      	mov	r2, r0
 80095ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80095ec:	4669      	mov	r1, sp
 80095ee:	4628      	mov	r0, r5
 80095f0:	f000 f874 	bl	80096dc <_svfiprintf_r>
 80095f4:	1c43      	adds	r3, r0, #1
 80095f6:	bfbc      	itt	lt
 80095f8:	238b      	movlt	r3, #139	; 0x8b
 80095fa:	602b      	strlt	r3, [r5, #0]
 80095fc:	2c00      	cmp	r4, #0
 80095fe:	d0e1      	beq.n	80095c4 <_vsniprintf_r+0x14>
 8009600:	9b00      	ldr	r3, [sp, #0]
 8009602:	2200      	movs	r2, #0
 8009604:	701a      	strb	r2, [r3, #0]
 8009606:	e7dd      	b.n	80095c4 <_vsniprintf_r+0x14>

08009608 <vsniprintf>:
 8009608:	b507      	push	{r0, r1, r2, lr}
 800960a:	9300      	str	r3, [sp, #0]
 800960c:	4613      	mov	r3, r2
 800960e:	460a      	mov	r2, r1
 8009610:	4601      	mov	r1, r0
 8009612:	4803      	ldr	r0, [pc, #12]	; (8009620 <vsniprintf+0x18>)
 8009614:	6800      	ldr	r0, [r0, #0]
 8009616:	f7ff ffcb 	bl	80095b0 <_vsniprintf_r>
 800961a:	b003      	add	sp, #12
 800961c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009620:	20000010 	.word	0x20000010

08009624 <__ssputs_r>:
 8009624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009628:	688e      	ldr	r6, [r1, #8]
 800962a:	429e      	cmp	r6, r3
 800962c:	4682      	mov	sl, r0
 800962e:	460c      	mov	r4, r1
 8009630:	4690      	mov	r8, r2
 8009632:	461f      	mov	r7, r3
 8009634:	d838      	bhi.n	80096a8 <__ssputs_r+0x84>
 8009636:	898a      	ldrh	r2, [r1, #12]
 8009638:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800963c:	d032      	beq.n	80096a4 <__ssputs_r+0x80>
 800963e:	6825      	ldr	r5, [r4, #0]
 8009640:	6909      	ldr	r1, [r1, #16]
 8009642:	eba5 0901 	sub.w	r9, r5, r1
 8009646:	6965      	ldr	r5, [r4, #20]
 8009648:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800964c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009650:	3301      	adds	r3, #1
 8009652:	444b      	add	r3, r9
 8009654:	106d      	asrs	r5, r5, #1
 8009656:	429d      	cmp	r5, r3
 8009658:	bf38      	it	cc
 800965a:	461d      	movcc	r5, r3
 800965c:	0553      	lsls	r3, r2, #21
 800965e:	d531      	bpl.n	80096c4 <__ssputs_r+0xa0>
 8009660:	4629      	mov	r1, r5
 8009662:	f000 fb45 	bl	8009cf0 <_malloc_r>
 8009666:	4606      	mov	r6, r0
 8009668:	b950      	cbnz	r0, 8009680 <__ssputs_r+0x5c>
 800966a:	230c      	movs	r3, #12
 800966c:	f8ca 3000 	str.w	r3, [sl]
 8009670:	89a3      	ldrh	r3, [r4, #12]
 8009672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009676:	81a3      	strh	r3, [r4, #12]
 8009678:	f04f 30ff 	mov.w	r0, #4294967295
 800967c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009680:	6921      	ldr	r1, [r4, #16]
 8009682:	464a      	mov	r2, r9
 8009684:	f000 fabe 	bl	8009c04 <memcpy>
 8009688:	89a3      	ldrh	r3, [r4, #12]
 800968a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800968e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009692:	81a3      	strh	r3, [r4, #12]
 8009694:	6126      	str	r6, [r4, #16]
 8009696:	6165      	str	r5, [r4, #20]
 8009698:	444e      	add	r6, r9
 800969a:	eba5 0509 	sub.w	r5, r5, r9
 800969e:	6026      	str	r6, [r4, #0]
 80096a0:	60a5      	str	r5, [r4, #8]
 80096a2:	463e      	mov	r6, r7
 80096a4:	42be      	cmp	r6, r7
 80096a6:	d900      	bls.n	80096aa <__ssputs_r+0x86>
 80096a8:	463e      	mov	r6, r7
 80096aa:	4632      	mov	r2, r6
 80096ac:	6820      	ldr	r0, [r4, #0]
 80096ae:	4641      	mov	r1, r8
 80096b0:	f000 fab6 	bl	8009c20 <memmove>
 80096b4:	68a3      	ldr	r3, [r4, #8]
 80096b6:	6822      	ldr	r2, [r4, #0]
 80096b8:	1b9b      	subs	r3, r3, r6
 80096ba:	4432      	add	r2, r6
 80096bc:	60a3      	str	r3, [r4, #8]
 80096be:	6022      	str	r2, [r4, #0]
 80096c0:	2000      	movs	r0, #0
 80096c2:	e7db      	b.n	800967c <__ssputs_r+0x58>
 80096c4:	462a      	mov	r2, r5
 80096c6:	f000 fb6d 	bl	8009da4 <_realloc_r>
 80096ca:	4606      	mov	r6, r0
 80096cc:	2800      	cmp	r0, #0
 80096ce:	d1e1      	bne.n	8009694 <__ssputs_r+0x70>
 80096d0:	6921      	ldr	r1, [r4, #16]
 80096d2:	4650      	mov	r0, sl
 80096d4:	f000 fabe 	bl	8009c54 <_free_r>
 80096d8:	e7c7      	b.n	800966a <__ssputs_r+0x46>
	...

080096dc <_svfiprintf_r>:
 80096dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e0:	4698      	mov	r8, r3
 80096e2:	898b      	ldrh	r3, [r1, #12]
 80096e4:	061b      	lsls	r3, r3, #24
 80096e6:	b09d      	sub	sp, #116	; 0x74
 80096e8:	4607      	mov	r7, r0
 80096ea:	460d      	mov	r5, r1
 80096ec:	4614      	mov	r4, r2
 80096ee:	d50e      	bpl.n	800970e <_svfiprintf_r+0x32>
 80096f0:	690b      	ldr	r3, [r1, #16]
 80096f2:	b963      	cbnz	r3, 800970e <_svfiprintf_r+0x32>
 80096f4:	2140      	movs	r1, #64	; 0x40
 80096f6:	f000 fafb 	bl	8009cf0 <_malloc_r>
 80096fa:	6028      	str	r0, [r5, #0]
 80096fc:	6128      	str	r0, [r5, #16]
 80096fe:	b920      	cbnz	r0, 800970a <_svfiprintf_r+0x2e>
 8009700:	230c      	movs	r3, #12
 8009702:	603b      	str	r3, [r7, #0]
 8009704:	f04f 30ff 	mov.w	r0, #4294967295
 8009708:	e0d1      	b.n	80098ae <_svfiprintf_r+0x1d2>
 800970a:	2340      	movs	r3, #64	; 0x40
 800970c:	616b      	str	r3, [r5, #20]
 800970e:	2300      	movs	r3, #0
 8009710:	9309      	str	r3, [sp, #36]	; 0x24
 8009712:	2320      	movs	r3, #32
 8009714:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009718:	f8cd 800c 	str.w	r8, [sp, #12]
 800971c:	2330      	movs	r3, #48	; 0x30
 800971e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80098c8 <_svfiprintf_r+0x1ec>
 8009722:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009726:	f04f 0901 	mov.w	r9, #1
 800972a:	4623      	mov	r3, r4
 800972c:	469a      	mov	sl, r3
 800972e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009732:	b10a      	cbz	r2, 8009738 <_svfiprintf_r+0x5c>
 8009734:	2a25      	cmp	r2, #37	; 0x25
 8009736:	d1f9      	bne.n	800972c <_svfiprintf_r+0x50>
 8009738:	ebba 0b04 	subs.w	fp, sl, r4
 800973c:	d00b      	beq.n	8009756 <_svfiprintf_r+0x7a>
 800973e:	465b      	mov	r3, fp
 8009740:	4622      	mov	r2, r4
 8009742:	4629      	mov	r1, r5
 8009744:	4638      	mov	r0, r7
 8009746:	f7ff ff6d 	bl	8009624 <__ssputs_r>
 800974a:	3001      	adds	r0, #1
 800974c:	f000 80aa 	beq.w	80098a4 <_svfiprintf_r+0x1c8>
 8009750:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009752:	445a      	add	r2, fp
 8009754:	9209      	str	r2, [sp, #36]	; 0x24
 8009756:	f89a 3000 	ldrb.w	r3, [sl]
 800975a:	2b00      	cmp	r3, #0
 800975c:	f000 80a2 	beq.w	80098a4 <_svfiprintf_r+0x1c8>
 8009760:	2300      	movs	r3, #0
 8009762:	f04f 32ff 	mov.w	r2, #4294967295
 8009766:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800976a:	f10a 0a01 	add.w	sl, sl, #1
 800976e:	9304      	str	r3, [sp, #16]
 8009770:	9307      	str	r3, [sp, #28]
 8009772:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009776:	931a      	str	r3, [sp, #104]	; 0x68
 8009778:	4654      	mov	r4, sl
 800977a:	2205      	movs	r2, #5
 800977c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009780:	4851      	ldr	r0, [pc, #324]	; (80098c8 <_svfiprintf_r+0x1ec>)
 8009782:	f7f6 fcfd 	bl	8000180 <memchr>
 8009786:	9a04      	ldr	r2, [sp, #16]
 8009788:	b9d8      	cbnz	r0, 80097c2 <_svfiprintf_r+0xe6>
 800978a:	06d0      	lsls	r0, r2, #27
 800978c:	bf44      	itt	mi
 800978e:	2320      	movmi	r3, #32
 8009790:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009794:	0711      	lsls	r1, r2, #28
 8009796:	bf44      	itt	mi
 8009798:	232b      	movmi	r3, #43	; 0x2b
 800979a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800979e:	f89a 3000 	ldrb.w	r3, [sl]
 80097a2:	2b2a      	cmp	r3, #42	; 0x2a
 80097a4:	d015      	beq.n	80097d2 <_svfiprintf_r+0xf6>
 80097a6:	9a07      	ldr	r2, [sp, #28]
 80097a8:	4654      	mov	r4, sl
 80097aa:	2000      	movs	r0, #0
 80097ac:	f04f 0c0a 	mov.w	ip, #10
 80097b0:	4621      	mov	r1, r4
 80097b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097b6:	3b30      	subs	r3, #48	; 0x30
 80097b8:	2b09      	cmp	r3, #9
 80097ba:	d94e      	bls.n	800985a <_svfiprintf_r+0x17e>
 80097bc:	b1b0      	cbz	r0, 80097ec <_svfiprintf_r+0x110>
 80097be:	9207      	str	r2, [sp, #28]
 80097c0:	e014      	b.n	80097ec <_svfiprintf_r+0x110>
 80097c2:	eba0 0308 	sub.w	r3, r0, r8
 80097c6:	fa09 f303 	lsl.w	r3, r9, r3
 80097ca:	4313      	orrs	r3, r2
 80097cc:	9304      	str	r3, [sp, #16]
 80097ce:	46a2      	mov	sl, r4
 80097d0:	e7d2      	b.n	8009778 <_svfiprintf_r+0x9c>
 80097d2:	9b03      	ldr	r3, [sp, #12]
 80097d4:	1d19      	adds	r1, r3, #4
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	9103      	str	r1, [sp, #12]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	bfbb      	ittet	lt
 80097de:	425b      	neglt	r3, r3
 80097e0:	f042 0202 	orrlt.w	r2, r2, #2
 80097e4:	9307      	strge	r3, [sp, #28]
 80097e6:	9307      	strlt	r3, [sp, #28]
 80097e8:	bfb8      	it	lt
 80097ea:	9204      	strlt	r2, [sp, #16]
 80097ec:	7823      	ldrb	r3, [r4, #0]
 80097ee:	2b2e      	cmp	r3, #46	; 0x2e
 80097f0:	d10c      	bne.n	800980c <_svfiprintf_r+0x130>
 80097f2:	7863      	ldrb	r3, [r4, #1]
 80097f4:	2b2a      	cmp	r3, #42	; 0x2a
 80097f6:	d135      	bne.n	8009864 <_svfiprintf_r+0x188>
 80097f8:	9b03      	ldr	r3, [sp, #12]
 80097fa:	1d1a      	adds	r2, r3, #4
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	9203      	str	r2, [sp, #12]
 8009800:	2b00      	cmp	r3, #0
 8009802:	bfb8      	it	lt
 8009804:	f04f 33ff 	movlt.w	r3, #4294967295
 8009808:	3402      	adds	r4, #2
 800980a:	9305      	str	r3, [sp, #20]
 800980c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80098d8 <_svfiprintf_r+0x1fc>
 8009810:	7821      	ldrb	r1, [r4, #0]
 8009812:	2203      	movs	r2, #3
 8009814:	4650      	mov	r0, sl
 8009816:	f7f6 fcb3 	bl	8000180 <memchr>
 800981a:	b140      	cbz	r0, 800982e <_svfiprintf_r+0x152>
 800981c:	2340      	movs	r3, #64	; 0x40
 800981e:	eba0 000a 	sub.w	r0, r0, sl
 8009822:	fa03 f000 	lsl.w	r0, r3, r0
 8009826:	9b04      	ldr	r3, [sp, #16]
 8009828:	4303      	orrs	r3, r0
 800982a:	3401      	adds	r4, #1
 800982c:	9304      	str	r3, [sp, #16]
 800982e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009832:	4826      	ldr	r0, [pc, #152]	; (80098cc <_svfiprintf_r+0x1f0>)
 8009834:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009838:	2206      	movs	r2, #6
 800983a:	f7f6 fca1 	bl	8000180 <memchr>
 800983e:	2800      	cmp	r0, #0
 8009840:	d038      	beq.n	80098b4 <_svfiprintf_r+0x1d8>
 8009842:	4b23      	ldr	r3, [pc, #140]	; (80098d0 <_svfiprintf_r+0x1f4>)
 8009844:	bb1b      	cbnz	r3, 800988e <_svfiprintf_r+0x1b2>
 8009846:	9b03      	ldr	r3, [sp, #12]
 8009848:	3307      	adds	r3, #7
 800984a:	f023 0307 	bic.w	r3, r3, #7
 800984e:	3308      	adds	r3, #8
 8009850:	9303      	str	r3, [sp, #12]
 8009852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009854:	4433      	add	r3, r6
 8009856:	9309      	str	r3, [sp, #36]	; 0x24
 8009858:	e767      	b.n	800972a <_svfiprintf_r+0x4e>
 800985a:	fb0c 3202 	mla	r2, ip, r2, r3
 800985e:	460c      	mov	r4, r1
 8009860:	2001      	movs	r0, #1
 8009862:	e7a5      	b.n	80097b0 <_svfiprintf_r+0xd4>
 8009864:	2300      	movs	r3, #0
 8009866:	3401      	adds	r4, #1
 8009868:	9305      	str	r3, [sp, #20]
 800986a:	4619      	mov	r1, r3
 800986c:	f04f 0c0a 	mov.w	ip, #10
 8009870:	4620      	mov	r0, r4
 8009872:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009876:	3a30      	subs	r2, #48	; 0x30
 8009878:	2a09      	cmp	r2, #9
 800987a:	d903      	bls.n	8009884 <_svfiprintf_r+0x1a8>
 800987c:	2b00      	cmp	r3, #0
 800987e:	d0c5      	beq.n	800980c <_svfiprintf_r+0x130>
 8009880:	9105      	str	r1, [sp, #20]
 8009882:	e7c3      	b.n	800980c <_svfiprintf_r+0x130>
 8009884:	fb0c 2101 	mla	r1, ip, r1, r2
 8009888:	4604      	mov	r4, r0
 800988a:	2301      	movs	r3, #1
 800988c:	e7f0      	b.n	8009870 <_svfiprintf_r+0x194>
 800988e:	ab03      	add	r3, sp, #12
 8009890:	9300      	str	r3, [sp, #0]
 8009892:	462a      	mov	r2, r5
 8009894:	4b0f      	ldr	r3, [pc, #60]	; (80098d4 <_svfiprintf_r+0x1f8>)
 8009896:	a904      	add	r1, sp, #16
 8009898:	4638      	mov	r0, r7
 800989a:	f3af 8000 	nop.w
 800989e:	1c42      	adds	r2, r0, #1
 80098a0:	4606      	mov	r6, r0
 80098a2:	d1d6      	bne.n	8009852 <_svfiprintf_r+0x176>
 80098a4:	89ab      	ldrh	r3, [r5, #12]
 80098a6:	065b      	lsls	r3, r3, #25
 80098a8:	f53f af2c 	bmi.w	8009704 <_svfiprintf_r+0x28>
 80098ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098ae:	b01d      	add	sp, #116	; 0x74
 80098b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b4:	ab03      	add	r3, sp, #12
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	462a      	mov	r2, r5
 80098ba:	4b06      	ldr	r3, [pc, #24]	; (80098d4 <_svfiprintf_r+0x1f8>)
 80098bc:	a904      	add	r1, sp, #16
 80098be:	4638      	mov	r0, r7
 80098c0:	f000 f87a 	bl	80099b8 <_printf_i>
 80098c4:	e7eb      	b.n	800989e <_svfiprintf_r+0x1c2>
 80098c6:	bf00      	nop
 80098c8:	0800a2fc 	.word	0x0800a2fc
 80098cc:	0800a306 	.word	0x0800a306
 80098d0:	00000000 	.word	0x00000000
 80098d4:	08009625 	.word	0x08009625
 80098d8:	0800a302 	.word	0x0800a302

080098dc <_printf_common>:
 80098dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098e0:	4616      	mov	r6, r2
 80098e2:	4699      	mov	r9, r3
 80098e4:	688a      	ldr	r2, [r1, #8]
 80098e6:	690b      	ldr	r3, [r1, #16]
 80098e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098ec:	4293      	cmp	r3, r2
 80098ee:	bfb8      	it	lt
 80098f0:	4613      	movlt	r3, r2
 80098f2:	6033      	str	r3, [r6, #0]
 80098f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098f8:	4607      	mov	r7, r0
 80098fa:	460c      	mov	r4, r1
 80098fc:	b10a      	cbz	r2, 8009902 <_printf_common+0x26>
 80098fe:	3301      	adds	r3, #1
 8009900:	6033      	str	r3, [r6, #0]
 8009902:	6823      	ldr	r3, [r4, #0]
 8009904:	0699      	lsls	r1, r3, #26
 8009906:	bf42      	ittt	mi
 8009908:	6833      	ldrmi	r3, [r6, #0]
 800990a:	3302      	addmi	r3, #2
 800990c:	6033      	strmi	r3, [r6, #0]
 800990e:	6825      	ldr	r5, [r4, #0]
 8009910:	f015 0506 	ands.w	r5, r5, #6
 8009914:	d106      	bne.n	8009924 <_printf_common+0x48>
 8009916:	f104 0a19 	add.w	sl, r4, #25
 800991a:	68e3      	ldr	r3, [r4, #12]
 800991c:	6832      	ldr	r2, [r6, #0]
 800991e:	1a9b      	subs	r3, r3, r2
 8009920:	42ab      	cmp	r3, r5
 8009922:	dc26      	bgt.n	8009972 <_printf_common+0x96>
 8009924:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009928:	1e13      	subs	r3, r2, #0
 800992a:	6822      	ldr	r2, [r4, #0]
 800992c:	bf18      	it	ne
 800992e:	2301      	movne	r3, #1
 8009930:	0692      	lsls	r2, r2, #26
 8009932:	d42b      	bmi.n	800998c <_printf_common+0xb0>
 8009934:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009938:	4649      	mov	r1, r9
 800993a:	4638      	mov	r0, r7
 800993c:	47c0      	blx	r8
 800993e:	3001      	adds	r0, #1
 8009940:	d01e      	beq.n	8009980 <_printf_common+0xa4>
 8009942:	6823      	ldr	r3, [r4, #0]
 8009944:	68e5      	ldr	r5, [r4, #12]
 8009946:	6832      	ldr	r2, [r6, #0]
 8009948:	f003 0306 	and.w	r3, r3, #6
 800994c:	2b04      	cmp	r3, #4
 800994e:	bf08      	it	eq
 8009950:	1aad      	subeq	r5, r5, r2
 8009952:	68a3      	ldr	r3, [r4, #8]
 8009954:	6922      	ldr	r2, [r4, #16]
 8009956:	bf0c      	ite	eq
 8009958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800995c:	2500      	movne	r5, #0
 800995e:	4293      	cmp	r3, r2
 8009960:	bfc4      	itt	gt
 8009962:	1a9b      	subgt	r3, r3, r2
 8009964:	18ed      	addgt	r5, r5, r3
 8009966:	2600      	movs	r6, #0
 8009968:	341a      	adds	r4, #26
 800996a:	42b5      	cmp	r5, r6
 800996c:	d11a      	bne.n	80099a4 <_printf_common+0xc8>
 800996e:	2000      	movs	r0, #0
 8009970:	e008      	b.n	8009984 <_printf_common+0xa8>
 8009972:	2301      	movs	r3, #1
 8009974:	4652      	mov	r2, sl
 8009976:	4649      	mov	r1, r9
 8009978:	4638      	mov	r0, r7
 800997a:	47c0      	blx	r8
 800997c:	3001      	adds	r0, #1
 800997e:	d103      	bne.n	8009988 <_printf_common+0xac>
 8009980:	f04f 30ff 	mov.w	r0, #4294967295
 8009984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009988:	3501      	adds	r5, #1
 800998a:	e7c6      	b.n	800991a <_printf_common+0x3e>
 800998c:	18e1      	adds	r1, r4, r3
 800998e:	1c5a      	adds	r2, r3, #1
 8009990:	2030      	movs	r0, #48	; 0x30
 8009992:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009996:	4422      	add	r2, r4
 8009998:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800999c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099a0:	3302      	adds	r3, #2
 80099a2:	e7c7      	b.n	8009934 <_printf_common+0x58>
 80099a4:	2301      	movs	r3, #1
 80099a6:	4622      	mov	r2, r4
 80099a8:	4649      	mov	r1, r9
 80099aa:	4638      	mov	r0, r7
 80099ac:	47c0      	blx	r8
 80099ae:	3001      	adds	r0, #1
 80099b0:	d0e6      	beq.n	8009980 <_printf_common+0xa4>
 80099b2:	3601      	adds	r6, #1
 80099b4:	e7d9      	b.n	800996a <_printf_common+0x8e>
	...

080099b8 <_printf_i>:
 80099b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099bc:	460c      	mov	r4, r1
 80099be:	4691      	mov	r9, r2
 80099c0:	7e27      	ldrb	r7, [r4, #24]
 80099c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80099c4:	2f78      	cmp	r7, #120	; 0x78
 80099c6:	4680      	mov	r8, r0
 80099c8:	469a      	mov	sl, r3
 80099ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099ce:	d807      	bhi.n	80099e0 <_printf_i+0x28>
 80099d0:	2f62      	cmp	r7, #98	; 0x62
 80099d2:	d80a      	bhi.n	80099ea <_printf_i+0x32>
 80099d4:	2f00      	cmp	r7, #0
 80099d6:	f000 80d8 	beq.w	8009b8a <_printf_i+0x1d2>
 80099da:	2f58      	cmp	r7, #88	; 0x58
 80099dc:	f000 80a3 	beq.w	8009b26 <_printf_i+0x16e>
 80099e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80099e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099e8:	e03a      	b.n	8009a60 <_printf_i+0xa8>
 80099ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80099ee:	2b15      	cmp	r3, #21
 80099f0:	d8f6      	bhi.n	80099e0 <_printf_i+0x28>
 80099f2:	a001      	add	r0, pc, #4	; (adr r0, 80099f8 <_printf_i+0x40>)
 80099f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80099f8:	08009a51 	.word	0x08009a51
 80099fc:	08009a65 	.word	0x08009a65
 8009a00:	080099e1 	.word	0x080099e1
 8009a04:	080099e1 	.word	0x080099e1
 8009a08:	080099e1 	.word	0x080099e1
 8009a0c:	080099e1 	.word	0x080099e1
 8009a10:	08009a65 	.word	0x08009a65
 8009a14:	080099e1 	.word	0x080099e1
 8009a18:	080099e1 	.word	0x080099e1
 8009a1c:	080099e1 	.word	0x080099e1
 8009a20:	080099e1 	.word	0x080099e1
 8009a24:	08009b71 	.word	0x08009b71
 8009a28:	08009a95 	.word	0x08009a95
 8009a2c:	08009b53 	.word	0x08009b53
 8009a30:	080099e1 	.word	0x080099e1
 8009a34:	080099e1 	.word	0x080099e1
 8009a38:	08009b93 	.word	0x08009b93
 8009a3c:	080099e1 	.word	0x080099e1
 8009a40:	08009a95 	.word	0x08009a95
 8009a44:	080099e1 	.word	0x080099e1
 8009a48:	080099e1 	.word	0x080099e1
 8009a4c:	08009b5b 	.word	0x08009b5b
 8009a50:	680b      	ldr	r3, [r1, #0]
 8009a52:	1d1a      	adds	r2, r3, #4
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	600a      	str	r2, [r1, #0]
 8009a58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009a5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a60:	2301      	movs	r3, #1
 8009a62:	e0a3      	b.n	8009bac <_printf_i+0x1f4>
 8009a64:	6825      	ldr	r5, [r4, #0]
 8009a66:	6808      	ldr	r0, [r1, #0]
 8009a68:	062e      	lsls	r6, r5, #24
 8009a6a:	f100 0304 	add.w	r3, r0, #4
 8009a6e:	d50a      	bpl.n	8009a86 <_printf_i+0xce>
 8009a70:	6805      	ldr	r5, [r0, #0]
 8009a72:	600b      	str	r3, [r1, #0]
 8009a74:	2d00      	cmp	r5, #0
 8009a76:	da03      	bge.n	8009a80 <_printf_i+0xc8>
 8009a78:	232d      	movs	r3, #45	; 0x2d
 8009a7a:	426d      	negs	r5, r5
 8009a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a80:	485e      	ldr	r0, [pc, #376]	; (8009bfc <_printf_i+0x244>)
 8009a82:	230a      	movs	r3, #10
 8009a84:	e019      	b.n	8009aba <_printf_i+0x102>
 8009a86:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009a8a:	6805      	ldr	r5, [r0, #0]
 8009a8c:	600b      	str	r3, [r1, #0]
 8009a8e:	bf18      	it	ne
 8009a90:	b22d      	sxthne	r5, r5
 8009a92:	e7ef      	b.n	8009a74 <_printf_i+0xbc>
 8009a94:	680b      	ldr	r3, [r1, #0]
 8009a96:	6825      	ldr	r5, [r4, #0]
 8009a98:	1d18      	adds	r0, r3, #4
 8009a9a:	6008      	str	r0, [r1, #0]
 8009a9c:	0628      	lsls	r0, r5, #24
 8009a9e:	d501      	bpl.n	8009aa4 <_printf_i+0xec>
 8009aa0:	681d      	ldr	r5, [r3, #0]
 8009aa2:	e002      	b.n	8009aaa <_printf_i+0xf2>
 8009aa4:	0669      	lsls	r1, r5, #25
 8009aa6:	d5fb      	bpl.n	8009aa0 <_printf_i+0xe8>
 8009aa8:	881d      	ldrh	r5, [r3, #0]
 8009aaa:	4854      	ldr	r0, [pc, #336]	; (8009bfc <_printf_i+0x244>)
 8009aac:	2f6f      	cmp	r7, #111	; 0x6f
 8009aae:	bf0c      	ite	eq
 8009ab0:	2308      	moveq	r3, #8
 8009ab2:	230a      	movne	r3, #10
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009aba:	6866      	ldr	r6, [r4, #4]
 8009abc:	60a6      	str	r6, [r4, #8]
 8009abe:	2e00      	cmp	r6, #0
 8009ac0:	bfa2      	ittt	ge
 8009ac2:	6821      	ldrge	r1, [r4, #0]
 8009ac4:	f021 0104 	bicge.w	r1, r1, #4
 8009ac8:	6021      	strge	r1, [r4, #0]
 8009aca:	b90d      	cbnz	r5, 8009ad0 <_printf_i+0x118>
 8009acc:	2e00      	cmp	r6, #0
 8009ace:	d04d      	beq.n	8009b6c <_printf_i+0x1b4>
 8009ad0:	4616      	mov	r6, r2
 8009ad2:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ad6:	fb03 5711 	mls	r7, r3, r1, r5
 8009ada:	5dc7      	ldrb	r7, [r0, r7]
 8009adc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009ae0:	462f      	mov	r7, r5
 8009ae2:	42bb      	cmp	r3, r7
 8009ae4:	460d      	mov	r5, r1
 8009ae6:	d9f4      	bls.n	8009ad2 <_printf_i+0x11a>
 8009ae8:	2b08      	cmp	r3, #8
 8009aea:	d10b      	bne.n	8009b04 <_printf_i+0x14c>
 8009aec:	6823      	ldr	r3, [r4, #0]
 8009aee:	07df      	lsls	r7, r3, #31
 8009af0:	d508      	bpl.n	8009b04 <_printf_i+0x14c>
 8009af2:	6923      	ldr	r3, [r4, #16]
 8009af4:	6861      	ldr	r1, [r4, #4]
 8009af6:	4299      	cmp	r1, r3
 8009af8:	bfde      	ittt	le
 8009afa:	2330      	movle	r3, #48	; 0x30
 8009afc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b04:	1b92      	subs	r2, r2, r6
 8009b06:	6122      	str	r2, [r4, #16]
 8009b08:	f8cd a000 	str.w	sl, [sp]
 8009b0c:	464b      	mov	r3, r9
 8009b0e:	aa03      	add	r2, sp, #12
 8009b10:	4621      	mov	r1, r4
 8009b12:	4640      	mov	r0, r8
 8009b14:	f7ff fee2 	bl	80098dc <_printf_common>
 8009b18:	3001      	adds	r0, #1
 8009b1a:	d14c      	bne.n	8009bb6 <_printf_i+0x1fe>
 8009b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b20:	b004      	add	sp, #16
 8009b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b26:	4835      	ldr	r0, [pc, #212]	; (8009bfc <_printf_i+0x244>)
 8009b28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009b2c:	6823      	ldr	r3, [r4, #0]
 8009b2e:	680e      	ldr	r6, [r1, #0]
 8009b30:	061f      	lsls	r7, r3, #24
 8009b32:	f856 5b04 	ldr.w	r5, [r6], #4
 8009b36:	600e      	str	r6, [r1, #0]
 8009b38:	d514      	bpl.n	8009b64 <_printf_i+0x1ac>
 8009b3a:	07d9      	lsls	r1, r3, #31
 8009b3c:	bf44      	itt	mi
 8009b3e:	f043 0320 	orrmi.w	r3, r3, #32
 8009b42:	6023      	strmi	r3, [r4, #0]
 8009b44:	b91d      	cbnz	r5, 8009b4e <_printf_i+0x196>
 8009b46:	6823      	ldr	r3, [r4, #0]
 8009b48:	f023 0320 	bic.w	r3, r3, #32
 8009b4c:	6023      	str	r3, [r4, #0]
 8009b4e:	2310      	movs	r3, #16
 8009b50:	e7b0      	b.n	8009ab4 <_printf_i+0xfc>
 8009b52:	6823      	ldr	r3, [r4, #0]
 8009b54:	f043 0320 	orr.w	r3, r3, #32
 8009b58:	6023      	str	r3, [r4, #0]
 8009b5a:	2378      	movs	r3, #120	; 0x78
 8009b5c:	4828      	ldr	r0, [pc, #160]	; (8009c00 <_printf_i+0x248>)
 8009b5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b62:	e7e3      	b.n	8009b2c <_printf_i+0x174>
 8009b64:	065e      	lsls	r6, r3, #25
 8009b66:	bf48      	it	mi
 8009b68:	b2ad      	uxthmi	r5, r5
 8009b6a:	e7e6      	b.n	8009b3a <_printf_i+0x182>
 8009b6c:	4616      	mov	r6, r2
 8009b6e:	e7bb      	b.n	8009ae8 <_printf_i+0x130>
 8009b70:	680b      	ldr	r3, [r1, #0]
 8009b72:	6826      	ldr	r6, [r4, #0]
 8009b74:	6960      	ldr	r0, [r4, #20]
 8009b76:	1d1d      	adds	r5, r3, #4
 8009b78:	600d      	str	r5, [r1, #0]
 8009b7a:	0635      	lsls	r5, r6, #24
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	d501      	bpl.n	8009b84 <_printf_i+0x1cc>
 8009b80:	6018      	str	r0, [r3, #0]
 8009b82:	e002      	b.n	8009b8a <_printf_i+0x1d2>
 8009b84:	0671      	lsls	r1, r6, #25
 8009b86:	d5fb      	bpl.n	8009b80 <_printf_i+0x1c8>
 8009b88:	8018      	strh	r0, [r3, #0]
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	6123      	str	r3, [r4, #16]
 8009b8e:	4616      	mov	r6, r2
 8009b90:	e7ba      	b.n	8009b08 <_printf_i+0x150>
 8009b92:	680b      	ldr	r3, [r1, #0]
 8009b94:	1d1a      	adds	r2, r3, #4
 8009b96:	600a      	str	r2, [r1, #0]
 8009b98:	681e      	ldr	r6, [r3, #0]
 8009b9a:	6862      	ldr	r2, [r4, #4]
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	4630      	mov	r0, r6
 8009ba0:	f7f6 faee 	bl	8000180 <memchr>
 8009ba4:	b108      	cbz	r0, 8009baa <_printf_i+0x1f2>
 8009ba6:	1b80      	subs	r0, r0, r6
 8009ba8:	6060      	str	r0, [r4, #4]
 8009baa:	6863      	ldr	r3, [r4, #4]
 8009bac:	6123      	str	r3, [r4, #16]
 8009bae:	2300      	movs	r3, #0
 8009bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bb4:	e7a8      	b.n	8009b08 <_printf_i+0x150>
 8009bb6:	6923      	ldr	r3, [r4, #16]
 8009bb8:	4632      	mov	r2, r6
 8009bba:	4649      	mov	r1, r9
 8009bbc:	4640      	mov	r0, r8
 8009bbe:	47d0      	blx	sl
 8009bc0:	3001      	adds	r0, #1
 8009bc2:	d0ab      	beq.n	8009b1c <_printf_i+0x164>
 8009bc4:	6823      	ldr	r3, [r4, #0]
 8009bc6:	079b      	lsls	r3, r3, #30
 8009bc8:	d413      	bmi.n	8009bf2 <_printf_i+0x23a>
 8009bca:	68e0      	ldr	r0, [r4, #12]
 8009bcc:	9b03      	ldr	r3, [sp, #12]
 8009bce:	4298      	cmp	r0, r3
 8009bd0:	bfb8      	it	lt
 8009bd2:	4618      	movlt	r0, r3
 8009bd4:	e7a4      	b.n	8009b20 <_printf_i+0x168>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	4632      	mov	r2, r6
 8009bda:	4649      	mov	r1, r9
 8009bdc:	4640      	mov	r0, r8
 8009bde:	47d0      	blx	sl
 8009be0:	3001      	adds	r0, #1
 8009be2:	d09b      	beq.n	8009b1c <_printf_i+0x164>
 8009be4:	3501      	adds	r5, #1
 8009be6:	68e3      	ldr	r3, [r4, #12]
 8009be8:	9903      	ldr	r1, [sp, #12]
 8009bea:	1a5b      	subs	r3, r3, r1
 8009bec:	42ab      	cmp	r3, r5
 8009bee:	dcf2      	bgt.n	8009bd6 <_printf_i+0x21e>
 8009bf0:	e7eb      	b.n	8009bca <_printf_i+0x212>
 8009bf2:	2500      	movs	r5, #0
 8009bf4:	f104 0619 	add.w	r6, r4, #25
 8009bf8:	e7f5      	b.n	8009be6 <_printf_i+0x22e>
 8009bfa:	bf00      	nop
 8009bfc:	0800a30d 	.word	0x0800a30d
 8009c00:	0800a31e 	.word	0x0800a31e

08009c04 <memcpy>:
 8009c04:	440a      	add	r2, r1
 8009c06:	4291      	cmp	r1, r2
 8009c08:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c0c:	d100      	bne.n	8009c10 <memcpy+0xc>
 8009c0e:	4770      	bx	lr
 8009c10:	b510      	push	{r4, lr}
 8009c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c1a:	4291      	cmp	r1, r2
 8009c1c:	d1f9      	bne.n	8009c12 <memcpy+0xe>
 8009c1e:	bd10      	pop	{r4, pc}

08009c20 <memmove>:
 8009c20:	4288      	cmp	r0, r1
 8009c22:	b510      	push	{r4, lr}
 8009c24:	eb01 0402 	add.w	r4, r1, r2
 8009c28:	d902      	bls.n	8009c30 <memmove+0x10>
 8009c2a:	4284      	cmp	r4, r0
 8009c2c:	4623      	mov	r3, r4
 8009c2e:	d807      	bhi.n	8009c40 <memmove+0x20>
 8009c30:	1e43      	subs	r3, r0, #1
 8009c32:	42a1      	cmp	r1, r4
 8009c34:	d008      	beq.n	8009c48 <memmove+0x28>
 8009c36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c3e:	e7f8      	b.n	8009c32 <memmove+0x12>
 8009c40:	4402      	add	r2, r0
 8009c42:	4601      	mov	r1, r0
 8009c44:	428a      	cmp	r2, r1
 8009c46:	d100      	bne.n	8009c4a <memmove+0x2a>
 8009c48:	bd10      	pop	{r4, pc}
 8009c4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c52:	e7f7      	b.n	8009c44 <memmove+0x24>

08009c54 <_free_r>:
 8009c54:	b538      	push	{r3, r4, r5, lr}
 8009c56:	4605      	mov	r5, r0
 8009c58:	2900      	cmp	r1, #0
 8009c5a:	d045      	beq.n	8009ce8 <_free_r+0x94>
 8009c5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c60:	1f0c      	subs	r4, r1, #4
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	bfb8      	it	lt
 8009c66:	18e4      	addlt	r4, r4, r3
 8009c68:	f000 f8d2 	bl	8009e10 <__malloc_lock>
 8009c6c:	4a1f      	ldr	r2, [pc, #124]	; (8009cec <_free_r+0x98>)
 8009c6e:	6813      	ldr	r3, [r2, #0]
 8009c70:	4610      	mov	r0, r2
 8009c72:	b933      	cbnz	r3, 8009c82 <_free_r+0x2e>
 8009c74:	6063      	str	r3, [r4, #4]
 8009c76:	6014      	str	r4, [r2, #0]
 8009c78:	4628      	mov	r0, r5
 8009c7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c7e:	f000 b8cd 	b.w	8009e1c <__malloc_unlock>
 8009c82:	42a3      	cmp	r3, r4
 8009c84:	d90b      	bls.n	8009c9e <_free_r+0x4a>
 8009c86:	6821      	ldr	r1, [r4, #0]
 8009c88:	1862      	adds	r2, r4, r1
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	bf04      	itt	eq
 8009c8e:	681a      	ldreq	r2, [r3, #0]
 8009c90:	685b      	ldreq	r3, [r3, #4]
 8009c92:	6063      	str	r3, [r4, #4]
 8009c94:	bf04      	itt	eq
 8009c96:	1852      	addeq	r2, r2, r1
 8009c98:	6022      	streq	r2, [r4, #0]
 8009c9a:	6004      	str	r4, [r0, #0]
 8009c9c:	e7ec      	b.n	8009c78 <_free_r+0x24>
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	b10b      	cbz	r3, 8009ca8 <_free_r+0x54>
 8009ca4:	42a3      	cmp	r3, r4
 8009ca6:	d9fa      	bls.n	8009c9e <_free_r+0x4a>
 8009ca8:	6811      	ldr	r1, [r2, #0]
 8009caa:	1850      	adds	r0, r2, r1
 8009cac:	42a0      	cmp	r0, r4
 8009cae:	d10b      	bne.n	8009cc8 <_free_r+0x74>
 8009cb0:	6820      	ldr	r0, [r4, #0]
 8009cb2:	4401      	add	r1, r0
 8009cb4:	1850      	adds	r0, r2, r1
 8009cb6:	4283      	cmp	r3, r0
 8009cb8:	6011      	str	r1, [r2, #0]
 8009cba:	d1dd      	bne.n	8009c78 <_free_r+0x24>
 8009cbc:	6818      	ldr	r0, [r3, #0]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	6053      	str	r3, [r2, #4]
 8009cc2:	4401      	add	r1, r0
 8009cc4:	6011      	str	r1, [r2, #0]
 8009cc6:	e7d7      	b.n	8009c78 <_free_r+0x24>
 8009cc8:	d902      	bls.n	8009cd0 <_free_r+0x7c>
 8009cca:	230c      	movs	r3, #12
 8009ccc:	602b      	str	r3, [r5, #0]
 8009cce:	e7d3      	b.n	8009c78 <_free_r+0x24>
 8009cd0:	6820      	ldr	r0, [r4, #0]
 8009cd2:	1821      	adds	r1, r4, r0
 8009cd4:	428b      	cmp	r3, r1
 8009cd6:	bf04      	itt	eq
 8009cd8:	6819      	ldreq	r1, [r3, #0]
 8009cda:	685b      	ldreq	r3, [r3, #4]
 8009cdc:	6063      	str	r3, [r4, #4]
 8009cde:	bf04      	itt	eq
 8009ce0:	1809      	addeq	r1, r1, r0
 8009ce2:	6021      	streq	r1, [r4, #0]
 8009ce4:	6054      	str	r4, [r2, #4]
 8009ce6:	e7c7      	b.n	8009c78 <_free_r+0x24>
 8009ce8:	bd38      	pop	{r3, r4, r5, pc}
 8009cea:	bf00      	nop
 8009cec:	200002d4 	.word	0x200002d4

08009cf0 <_malloc_r>:
 8009cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf2:	1ccd      	adds	r5, r1, #3
 8009cf4:	f025 0503 	bic.w	r5, r5, #3
 8009cf8:	3508      	adds	r5, #8
 8009cfa:	2d0c      	cmp	r5, #12
 8009cfc:	bf38      	it	cc
 8009cfe:	250c      	movcc	r5, #12
 8009d00:	2d00      	cmp	r5, #0
 8009d02:	4606      	mov	r6, r0
 8009d04:	db01      	blt.n	8009d0a <_malloc_r+0x1a>
 8009d06:	42a9      	cmp	r1, r5
 8009d08:	d903      	bls.n	8009d12 <_malloc_r+0x22>
 8009d0a:	230c      	movs	r3, #12
 8009d0c:	6033      	str	r3, [r6, #0]
 8009d0e:	2000      	movs	r0, #0
 8009d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d12:	f000 f87d 	bl	8009e10 <__malloc_lock>
 8009d16:	4921      	ldr	r1, [pc, #132]	; (8009d9c <_malloc_r+0xac>)
 8009d18:	680a      	ldr	r2, [r1, #0]
 8009d1a:	4614      	mov	r4, r2
 8009d1c:	b99c      	cbnz	r4, 8009d46 <_malloc_r+0x56>
 8009d1e:	4f20      	ldr	r7, [pc, #128]	; (8009da0 <_malloc_r+0xb0>)
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	b923      	cbnz	r3, 8009d2e <_malloc_r+0x3e>
 8009d24:	4621      	mov	r1, r4
 8009d26:	4630      	mov	r0, r6
 8009d28:	f000 f862 	bl	8009df0 <_sbrk_r>
 8009d2c:	6038      	str	r0, [r7, #0]
 8009d2e:	4629      	mov	r1, r5
 8009d30:	4630      	mov	r0, r6
 8009d32:	f000 f85d 	bl	8009df0 <_sbrk_r>
 8009d36:	1c43      	adds	r3, r0, #1
 8009d38:	d123      	bne.n	8009d82 <_malloc_r+0x92>
 8009d3a:	230c      	movs	r3, #12
 8009d3c:	6033      	str	r3, [r6, #0]
 8009d3e:	4630      	mov	r0, r6
 8009d40:	f000 f86c 	bl	8009e1c <__malloc_unlock>
 8009d44:	e7e3      	b.n	8009d0e <_malloc_r+0x1e>
 8009d46:	6823      	ldr	r3, [r4, #0]
 8009d48:	1b5b      	subs	r3, r3, r5
 8009d4a:	d417      	bmi.n	8009d7c <_malloc_r+0x8c>
 8009d4c:	2b0b      	cmp	r3, #11
 8009d4e:	d903      	bls.n	8009d58 <_malloc_r+0x68>
 8009d50:	6023      	str	r3, [r4, #0]
 8009d52:	441c      	add	r4, r3
 8009d54:	6025      	str	r5, [r4, #0]
 8009d56:	e004      	b.n	8009d62 <_malloc_r+0x72>
 8009d58:	6863      	ldr	r3, [r4, #4]
 8009d5a:	42a2      	cmp	r2, r4
 8009d5c:	bf0c      	ite	eq
 8009d5e:	600b      	streq	r3, [r1, #0]
 8009d60:	6053      	strne	r3, [r2, #4]
 8009d62:	4630      	mov	r0, r6
 8009d64:	f000 f85a 	bl	8009e1c <__malloc_unlock>
 8009d68:	f104 000b 	add.w	r0, r4, #11
 8009d6c:	1d23      	adds	r3, r4, #4
 8009d6e:	f020 0007 	bic.w	r0, r0, #7
 8009d72:	1ac2      	subs	r2, r0, r3
 8009d74:	d0cc      	beq.n	8009d10 <_malloc_r+0x20>
 8009d76:	1a1b      	subs	r3, r3, r0
 8009d78:	50a3      	str	r3, [r4, r2]
 8009d7a:	e7c9      	b.n	8009d10 <_malloc_r+0x20>
 8009d7c:	4622      	mov	r2, r4
 8009d7e:	6864      	ldr	r4, [r4, #4]
 8009d80:	e7cc      	b.n	8009d1c <_malloc_r+0x2c>
 8009d82:	1cc4      	adds	r4, r0, #3
 8009d84:	f024 0403 	bic.w	r4, r4, #3
 8009d88:	42a0      	cmp	r0, r4
 8009d8a:	d0e3      	beq.n	8009d54 <_malloc_r+0x64>
 8009d8c:	1a21      	subs	r1, r4, r0
 8009d8e:	4630      	mov	r0, r6
 8009d90:	f000 f82e 	bl	8009df0 <_sbrk_r>
 8009d94:	3001      	adds	r0, #1
 8009d96:	d1dd      	bne.n	8009d54 <_malloc_r+0x64>
 8009d98:	e7cf      	b.n	8009d3a <_malloc_r+0x4a>
 8009d9a:	bf00      	nop
 8009d9c:	200002d4 	.word	0x200002d4
 8009da0:	200002d8 	.word	0x200002d8

08009da4 <_realloc_r>:
 8009da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009da6:	4607      	mov	r7, r0
 8009da8:	4614      	mov	r4, r2
 8009daa:	460e      	mov	r6, r1
 8009dac:	b921      	cbnz	r1, 8009db8 <_realloc_r+0x14>
 8009dae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009db2:	4611      	mov	r1, r2
 8009db4:	f7ff bf9c 	b.w	8009cf0 <_malloc_r>
 8009db8:	b922      	cbnz	r2, 8009dc4 <_realloc_r+0x20>
 8009dba:	f7ff ff4b 	bl	8009c54 <_free_r>
 8009dbe:	4625      	mov	r5, r4
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dc4:	f000 f830 	bl	8009e28 <_malloc_usable_size_r>
 8009dc8:	42a0      	cmp	r0, r4
 8009dca:	d20f      	bcs.n	8009dec <_realloc_r+0x48>
 8009dcc:	4621      	mov	r1, r4
 8009dce:	4638      	mov	r0, r7
 8009dd0:	f7ff ff8e 	bl	8009cf0 <_malloc_r>
 8009dd4:	4605      	mov	r5, r0
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	d0f2      	beq.n	8009dc0 <_realloc_r+0x1c>
 8009dda:	4631      	mov	r1, r6
 8009ddc:	4622      	mov	r2, r4
 8009dde:	f7ff ff11 	bl	8009c04 <memcpy>
 8009de2:	4631      	mov	r1, r6
 8009de4:	4638      	mov	r0, r7
 8009de6:	f7ff ff35 	bl	8009c54 <_free_r>
 8009dea:	e7e9      	b.n	8009dc0 <_realloc_r+0x1c>
 8009dec:	4635      	mov	r5, r6
 8009dee:	e7e7      	b.n	8009dc0 <_realloc_r+0x1c>

08009df0 <_sbrk_r>:
 8009df0:	b538      	push	{r3, r4, r5, lr}
 8009df2:	4d06      	ldr	r5, [pc, #24]	; (8009e0c <_sbrk_r+0x1c>)
 8009df4:	2300      	movs	r3, #0
 8009df6:	4604      	mov	r4, r0
 8009df8:	4608      	mov	r0, r1
 8009dfa:	602b      	str	r3, [r5, #0]
 8009dfc:	f7f6 fef2 	bl	8000be4 <_sbrk>
 8009e00:	1c43      	adds	r3, r0, #1
 8009e02:	d102      	bne.n	8009e0a <_sbrk_r+0x1a>
 8009e04:	682b      	ldr	r3, [r5, #0]
 8009e06:	b103      	cbz	r3, 8009e0a <_sbrk_r+0x1a>
 8009e08:	6023      	str	r3, [r4, #0]
 8009e0a:	bd38      	pop	{r3, r4, r5, pc}
 8009e0c:	200004cc 	.word	0x200004cc

08009e10 <__malloc_lock>:
 8009e10:	4801      	ldr	r0, [pc, #4]	; (8009e18 <__malloc_lock+0x8>)
 8009e12:	f000 b811 	b.w	8009e38 <__retarget_lock_acquire_recursive>
 8009e16:	bf00      	nop
 8009e18:	200004d4 	.word	0x200004d4

08009e1c <__malloc_unlock>:
 8009e1c:	4801      	ldr	r0, [pc, #4]	; (8009e24 <__malloc_unlock+0x8>)
 8009e1e:	f000 b80c 	b.w	8009e3a <__retarget_lock_release_recursive>
 8009e22:	bf00      	nop
 8009e24:	200004d4 	.word	0x200004d4

08009e28 <_malloc_usable_size_r>:
 8009e28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e2c:	1f18      	subs	r0, r3, #4
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	bfbc      	itt	lt
 8009e32:	580b      	ldrlt	r3, [r1, r0]
 8009e34:	18c0      	addlt	r0, r0, r3
 8009e36:	4770      	bx	lr

08009e38 <__retarget_lock_acquire_recursive>:
 8009e38:	4770      	bx	lr

08009e3a <__retarget_lock_release_recursive>:
 8009e3a:	4770      	bx	lr

08009e3c <_init>:
 8009e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e3e:	bf00      	nop
 8009e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e42:	bc08      	pop	{r3}
 8009e44:	469e      	mov	lr, r3
 8009e46:	4770      	bx	lr

08009e48 <_fini>:
 8009e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4a:	bf00      	nop
 8009e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e4e:	bc08      	pop	{r3}
 8009e50:	469e      	mov	lr, r3
 8009e52:	4770      	bx	lr
